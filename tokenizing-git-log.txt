commit 3184b4025493b76a325542a7995ce146328f5ca3
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Sun Apr 7 21:50:51 2024 -0400

    Tokenizing version 2 added with updated test case excel file and text file

diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
index 3c5e9e2..21e4d7c 100644
Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
diff --git a/tokenizing-test.txt b/tokenizing-test.txt
index c5a2949..e935389 100644
--- a/tokenizing-test.txt
+++ b/tokenizing-test.txt
@@ -1 +1,27 @@
-Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
\ No newline at end of file
+*** Start of Tokenizing Words Demo ***
+Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'*** Start of Tokenizing Phrases Demo ***
+Type a few phrases separated by comma (q - to quit): 
+hi, there
+Phrase #1 is 'hi'
+Phrase #2 is ' there'
+Type a few phrases separated by comma (q - to quit): 
+like, and subscribe, to my, channel
+Phrase #1 is 'like'
+Phrase #2 is ' and subscribe'
+Phrase #3 is ' to my'
+Phrase #4 is ' channel'
+Type a few phrases separated by comma (q - to quit): 
+how, are, you, 
+Phrase #1 is 'how'
+Phrase #2 is ' are'
+Phrase #3 is ' you'
+Phrase #4 is ' '
+Type a few phrases separated by comma (q - to quit): 
+my name is yyz
+Phrase #1 is 'my name is yyz'
+Type a few phrases separated by comma (q - to quit): 
+012
+Phrase #1 is '012'
+Type a few phrases separated by comma (q - to quit): 
+q
+*** End of Tokenizing phrases Demo ***
\ No newline at end of file
diff --git a/tokenizing.c b/tokenizing.c
index daa8647..6409077 100644
--- a/tokenizing.c
+++ b/tokenizing.c
@@ -57,5 +57,33 @@ void tokenizing(void) {
 
     /* Version 2 */
 
+    printf("*** Start of Tokenizing Phrases Demo ***\n");
+
+    char phrases[BUFFER_SIZE];
+    char *nextPhrase = NULL;
+    int phrasesCounter;
+
+
+    do
+    {
+        printf("Type a few phrases separated by comma (q - to quit): \n"); 
+        fgets(phrases, BUFFER_SIZE, stdin);
+        phrases[strlen(phrases) - 1] = '\0';
+
+        if (strcmp(phrases, "q") != 0) {
+            nextPhrase = strtok(phrases, ",");
+            phrasesCounter = 1;
+
+            while (nextPhrase) {
+                printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
+                nextPhrase = strtok(NULL, ",");
+            }
+        }
+    } while (strcmp(phrases, "q") != 0);
+
+
+    printf("*** End of Tokenizing phrases Demo ***\n\n");
+
+
     /* Version 3 */
 }

commit e49b5f4e1ac07c3430183b620507c8860e016ddc
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Sun Apr 7 21:13:48 2024 -0400

    Added Version 2 code, test cases, testing log, and git log

diff --git a/Final-Project-Test-Cases.xlsx b/Final-Project-Test-Cases.xlsx
new file mode 100644
index 0000000..8c7d6ed
Binary files /dev/null and b/Final-Project-Test-Cases.xlsx differ
diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
index 22c04b3..cdb93cc 100644
Binary files a/converting-test-cases.xlsx and b/converting-test-cases.xlsx differ
diff --git a/converting-test.txt b/converting-test.txt
index c000d00..47e38ed 100644
--- a/converting-test.txt
+++ b/converting-test.txt
@@ -1,3 +1,4 @@
+*** Start of Converting Strings to int Demo ***
 Type an int numeric string (q - to quit):
 5
 Converted number is 5
@@ -18,4 +19,24 @@ Type an int numeric string (q - to quit):
 Converted number is 19
 Type an int numeric string (q - to quit):
 
+
+*** Start of Converting Strings to double Demo ***
+Type the double numeric string (q - to quit):
+5.32
+Converted number is 5.320000
+Type the double numeric string (q - to quit):
+600.99
+Converted number is 600.990000
+Type the double numeric string (q - to quit):
+12.222
+Converted number is 12.222000
+Type the double numeric string (q - to quit):
+lol
+Converted number is 0.000000
+Type the double numeric string (q - to quit):
+no way
+Converted number is 0.000000
+Type the double numeric string (q - to quit):
+99.9876
+Converted number is 99.987600
 
\ No newline at end of file
diff --git a/converting.c b/converting.c
index 8e417a1..210c4e2 100644
--- a/converting.c
+++ b/converting.c
@@ -43,15 +43,34 @@ void converting(void) {
 
     // Printing a message indicating the end of the demonstration for converting strings to integers.
     printf("*** End of Converting Strings to int Demo ***\n\n");
-}
+
 
 
 /* Version 2 */
+    printf("*** Start of Converting Strings to double Demo ***\n"); // Printing a start message
 
+    char doubleString[BUFFER_SIZE]; // Declaring a character array to store the input string
+    double doubleNumber; // Declaring a variable to store the converted double number
 
+    do { // Starting a do-while loop
+        printf("Type the double numeric string (q - to quit):\n"); // Prompting the user to input a double numeric string
+        fgets(doubleString, BUFFER_SIZE, stdin); // Reading the input string from the user
+        doubleString[strlen(doubleString) -1] = '\0'; // Removing the trailing newline character from the input string
+
+        if ((strcmp(doubleString, "q") != 0)) { // Checking if the input string is not equal to "q"
+            doubleNumber = atof(doubleString); // Converting the input string to a double number
+            printf("Converted number is %f\n", doubleNumber); // Printing the converted double number with two decimal places
+        }
+    } while (strcmp(doubleString, "q") != 0); // Continuing the loop until the input string is "q"
+
+    printf("*** End of Converting Strings to double Demo ***\n\n"); // Printing an end message
 
-/* Version 3 */
 
 
 
 
+/* Version 3 */
+
+
+}
+
diff --git a/my_program b/my_program
new file mode 100755
index 0000000..2768dbe
Binary files /dev/null and b/my_program differ
diff --git a/~$(saksham)manipulating-test-cases.xlsx b/~$(saksham)manipulating-test-cases.xlsx
new file mode 100644
index 0000000..68f7efc
Binary files /dev/null and b/~$(saksham)manipulating-test-cases.xlsx differ

commit 9023f3f6d405e49d6fcbfd416f200b3b5cf7678d
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Wed Apr 3 17:03:24 2024 -0400

    delete file
     Please enter the commit message for your changes. Lines starting

diff --git a/newfile.txt b/newfile.txt
deleted file mode 100644
index e69de29..0000000

commit 93294306b9f549715f946d2d3447c5ab4e7d0265
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Wed Apr 3 17:02:02 2024 -0400

    random file

diff --git a/newfile.txt b/newfile.txt
new file mode 100644
index 0000000..e69de29

commit 5d2165e5901182b801e35a3329c56fd3cdfc4314
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Wed Apr 3 16:46:18 2024 -0400

    First commit

diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
new file mode 100644
index 0000000..0bbf16d
--- /dev/null
+++ b/(Saksham)manipulting-test.txt
@@ -0,0 +1,28 @@
+Type the 1st string (q - to quit):
+Hello
+Type the 2nd string:
+ Saksham
+Concatenated string is 'Hello Saksham'
+Type the 1st string (q - to quit):
+Hi
+Type the 2nd string:
+There
+Concatenated string is 'HiThere'
+Type the 1st string (q - to quit):
+my
+Type the 2nd string:
+q
+Concatenated string is 'myq'
+Type the 1st string (q - to quit):
+q
+*** End of Concatenating Strings Demo ***
+Type the 1st string (q - to quit):
+BE A HERO NOT A COWARD
+Type the 2nd string:
+NOT A COWARD
+Concatenated string is 'BE A HERO NOT A COWARDNoguilt'
+Type the 1st string (q - to quit):
+No
+Type the 2nd string:
+guilt
+Concatenated string is 'Noguilt'
diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
new file mode 100644
index 0000000..c58c27f
Binary files /dev/null and b/(Victor)manipulating-test-cases.xlsx differ
diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
new file mode 100644
index 0000000..7a8fda1
--- /dev/null
+++ b/(Victor)manipulating-test.txt
@@ -0,0 +1,28 @@
+Type the 1st string (q - to quit):
+mynameis
+Type the 2nd string:
+Mordi
+Concatenated string is 'mynameisMordi'
+Type the 1st string (q - to quit):
+no
+Type the 2nd string:
+lmk
+Concatenated string is 'no lmk'
+Type the 1st string (q - to quit):
+CPR.   
+Type the 2nd string:
+PROJECT
+Concatenated string is 'CPR.   PROJECT'
+Type the 1st string (q - to quit):
+Iphone          
+Type the 2nd string:
+is my fav
+Concatenated string is 'Iphone is my fav'
+Type the 1st string (q - to quit):
+CP R
+Type the 2nd string:
+Cp r
+Concatenated string is 'CP RCp r'
+Type the 1st string (q - to quit):
+q
+*** End of Concatenating Strings Demo ***
diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
new file mode 100644
index 0000000..f6356d1
Binary files /dev/null and b/(saksham)manipulating-test-cases.xlsx differ
diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000..019d636
Binary files /dev/null and b/.DS_Store differ
diff --git a/Final-Project-Plan (1).xlsx b/Final-Project-Plan (1).xlsx
new file mode 100644
index 0000000..32132b1
Binary files /dev/null and b/Final-Project-Plan (1).xlsx differ
diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
new file mode 100644
index 0000000..22c04b3
Binary files /dev/null and b/converting-test-cases.xlsx differ
diff --git a/converting-test.txt b/converting-test.txt
new file mode 100644
index 0000000..c000d00
--- /dev/null
+++ b/converting-test.txt
@@ -0,0 +1,21 @@
+Type an int numeric string (q - to quit):
+5
+Converted number is 5
+Type an int numeric string (q - to quit):
+8910
+Converted number is 8910
+Type an int numeric string (q - to quit):
+apple
+Converted number is 0
+Type an int numeric string (q - to quit):
+I_LOVE_CPR
+Converted number is 0
+Type an int numeric string (q - to quit):
+200
+Converted number is 200
+Type an int numeric string (q - to quit):
+19 23
+Converted number is 19
+Type an int numeric string (q - to quit):
+
+
\ No newline at end of file
diff --git a/converting.c b/converting.c
new file mode 100644
index 0000000..8e417a1
--- /dev/null
+++ b/converting.c
@@ -0,0 +1,57 @@
+// Version 1
+
+// This line  `#define _CRT_SECURE_NO_WARNINGS` is to disable certain warnings related to standard library functions in Windows.
+#define _CRT_SECURE_NO_WARNINGS
+
+// Defining the size of the buffer to be used for storing the input string.
+#define BUFFER_SIZE 80
+
+// Including the header file `converting.h`, which likely contains function prototypes needed for the `converting` function.
+#include "converting.h"
+
+// Commenting indicating the relation of the `converting` function to the VI (Version 1) of the code.
+// VI
+
+// Defining the function `converting`, which takes no arguments and returns nothing (`void`).
+void converting(void) {
+    // Printing a message indicating the start of the demonstration for converting strings to integers.
+    printf("*** Start of Converting Strings to int Demo ***\n");
+
+    // Declaring an array of characters named `intString` with a size defined by the macro `BUFFER_SIZE`.
+    char intString[BUFFER_SIZE];
+
+    // Declaring an integer variable `intNumber` which will hold the converted integer value.
+    int intNumber;
+
+    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
+    do {
+        // Prompting the user to type an integer numeric string.
+        printf("Type an int numeric string (q - to quit):\n"); 
+
+        // Reading the input string from the standard input and store it in `intString`.
+        fgets(intString, BUFFER_SIZE, stdin);
+
+        // Removing the newline character from the end of the input string.
+        intString[strlen(intString) - 1] = '\0';
+
+        // Converting the string `intString` to an integer using the `atoi` function and store the result in `intNumber`.
+        if (strcmp(intString, "q") != 0) {
+            intNumber = atoi(intString);
+            printf("Converted number is %d\n", intNumber);
+        }
+    } while (strcmp(intString, "q") != 0);
+
+    // Printing a message indicating the end of the demonstration for converting strings to integers.
+    printf("*** End of Converting Strings to int Demo ***\n\n");
+}
+
+
+/* Version 2 */
+
+
+
+/* Version 3 */
+
+
+
+
diff --git a/converting.h b/converting.h
new file mode 100644
index 0000000..e229834
--- /dev/null
+++ b/converting.h
@@ -0,0 +1,15 @@
+// CONVERTING MODULE HEADER
+
+// Header guards to prevent multiple inclusion of the header file.
+#ifndef _CONVERTING_H_
+#define _CONVERTING_H_
+
+// Include necessary standard library headers.
+#include <stdio.h> 
+#include <string.h> 
+#include <stdlib.h>
+
+// Function prototype for the converting function.
+void converting(void);
+
+#endif // End of header guard
diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
new file mode 100644
index 0000000..8447936
Binary files /dev/null and b/fundamentals-test-cases.xlsx differ
diff --git a/fundamentals-test.txt b/fundamentals-test.txt
new file mode 100644
index 0000000..d43c9c0
--- /dev/null
+++ b/fundamentals-test.txt
@@ -0,0 +1,29 @@
+Type not empty string (q- to quit):
+hello guys
+Type the character position within the string: 
+2
+The character found at 2 position is 'l'
+Type not empty string (q- to quit):
+BeAlright       
+Type the character position within the string: 
+6
+The character found at 6 position is 'g'
+Type not empty string (q- to quit):
+lllllllll
+Type the character position within the string: 
+20
+Too big... Position reduced to max. available
+The character found at 8 position is 'l'
+Type not empty string (q- to quit):
+q
+*** End of Indexing Strings Demo ***
+Type not empty string (q- to quit):
+sjncsa/';';
+Type the character position within the string: 
+8
+The character found at 8 position is ';'
+Type not empty string (q- to quit):
+12345LAB
+Type the character position within the string: 
+2
+The character found at 2 position is '3'
diff --git a/fundamentals.c b/fundamentals.c
new file mode 100644
index 0000000..86d67c0
--- /dev/null
+++ b/fundamentals.c
@@ -0,0 +1,71 @@
+#include "fundamentals.h"
+
+// Disable certain warnings related to standard library functions in Windows
+#define _CRT_SECURE_NO_WARNINGS
+
+// Define buffer size for storing strings
+#define BUFFER_SIZE 80 
+
+// Define size for input buffer storing numeric inputs
+#define NUM_INPUT_SIZE 10
+
+// Include the header file again to access its functionality
+#include "fundamentals.h"
+
+// Define the function `fundamentals`
+void fundamentals (void) {
+    // Start of the indexing strings demonstration
+    printf("*** Start of Indexing Strings Demo ***\n");
+
+    // Declare a buffer to store the input string
+    char buffer1 [BUFFER_SIZE];
+
+    // Declare a buffer to store numeric input
+    char numInput [NUM_INPUT_SIZE];
+
+    // Declare a variable to store the position of the character
+    size_t position;
+
+    // Start a loop for user interaction
+    do
+    {
+        // Prompt the user to input a non-empty string
+        printf("Type not empty string (q- to quit):\n");
+        
+        // Read the input string from the user
+        fgets (buffer1, BUFFER_SIZE, stdin);
+
+        // Remove the newline character from the input string
+        buffer1 [strlen(buffer1) - 1] = '\0';
+
+        // If the input is not "q", proceed with character position input
+        if (strcmp (buffer1, "q") != 0) {
+            // Prompt the user to input the character position within the string
+            printf(("Type the character position within the string: \n"));
+            
+            // Read the numeric input for character position
+            fgets (numInput, NUM_INPUT_SIZE, stdin) ;
+            
+            // Remove the newline character from the numeric input
+            numInput [strlen (numInput)- 1] = '\0';
+            
+            // Convert the numeric input to an integer
+            position = atoi(numInput);
+            
+            // If the position is greater than or equal to the length of the string, adjust it
+            if (position >= strlen(buffer1))
+            {
+                position = strlen(buffer1) - 1;
+                printf("Too big... Position reduced to max. available\n");
+            }
+            
+            // Print the character found at the specified position within the string
+            printf ("The character found at %d position is \'%c'\n", (int)position, buffer1[position]);
+        }
+    } while (strcmp (buffer1, "q") != 0); // Continue looping until the user inputs "q"
+
+    // End of the indexing strings demonstration
+    printf("*** End of Indexing Strings Demo ***\n\n");
+
+    // Version 2 and Version 3 are left empty for future implementations
+}
diff --git a/fundamentals.h b/fundamentals.h
new file mode 100644
index 0000000..f49fe48
--- /dev/null
+++ b/fundamentals.h
@@ -0,0 +1,13 @@
+// FUNDAMENTALS MODULE HEADER
+#ifndef _FUNDAMENTALS_H_
+#define _FUNDAMENTALS_H_
+
+// Include necessary standard library headers
+#include <stdio.h> // For input/output operations
+#include <string.h> // For string manipulation functions
+#include <stdlib.h> // For functions like `atoi()` used for string to integer conversion
+
+// Declare the fundamentals function prototype
+void fundamentals (void);
+
+#endif // End of header guard
diff --git a/main.c b/main.c
new file mode 100644
index 0000000..43a0e6f
--- /dev/null
+++ b/main.c
@@ -0,0 +1,46 @@
+// Including header files for the different modules
+#include "fundamentals.h" // For the fundamentals module
+#include "manipulating.h" // For the manipulating module
+#include "converting.h"   // For the converting module
+#include "tokenizing.h"   // For the tokenizing module
+
+// Main function of the program
+int main(void) { 
+    char buff[10]; // Buffer to store user input
+    
+    // Loop to display menu and handle user input
+    do {
+        // Displaying menu options
+        printf("1 - Fundamentals\n");
+        printf("2 - Manipulation\n");
+        printf("3 - Converting\n");
+        printf("4 - Tokenizing\n");
+        printf("0 - Exit\n");
+        printf("Which module to run? \n");
+        
+        // Reading user input
+        fgets(buff, 10, stdin);
+        
+        // Switch case to handle user choice
+        switch (buff[0]) {
+            // If user chooses option 1
+            case '1': 
+                fundamentals(); // Call fundamentals function
+                break;
+            // If user chooses option 2
+            case '2': 
+                manipulating(); // Call manipulating function
+                break;
+            // If user chooses option 3
+            case '3': 
+                converting(); // Call converting function
+                break;
+            // If user chooses option 4
+            case '4': 
+                tokenizing(); // Call tokenizing function
+                break;
+        }
+    } while (buff[0] != '0'); // Loop until user chooses to exit
+    
+    return 0; // Return 0 to indicate successful execution
+}
diff --git a/manipulating.c b/manipulating.c
new file mode 100644
index 0000000..e2bab7e
--- /dev/null
+++ b/manipulating.c
@@ -0,0 +1,55 @@
+/* Version 1 */
+
+// Including necessary standard library headers.
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#include "manipulating.h"
+
+// Function definition for the manipulating function.
+void manipulating(void) {
+    // Printing a message indicating the start of the demonstration for converting strings.
+    printf("*** Start of Converting Strings Demo ***\n");
+
+    // Declaring character arrays `string1` and `string2` to store user input strings.
+    char string1[BUFFER_SIZE];
+    char string2[BUFFER_SIZE];
+
+    // Start a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
+    do {
+        // Prompting the user to type the 1st string.
+        printf("Type the 1st string (q - to quit):\n"); 
+
+        // Reading the 1st string from the standard input and storing it in `string1`.
+        fgets(string1, BUFFER_SIZE, stdin);
+
+        // Removing the newline character from the end of `string1`.
+        string1[strlen(string1) - 1] = '\0';
+    
+        // Checking if `string1` is not equal to "q".
+        if ((strcmp(string1, "q") != 0)) {
+            // Prompting the user to type the 2nd string.
+            printf("Type the 2nd string:\n");
+            
+            // Reading the 2nd string from the standard input and storing it in `string2`.
+            fgets(string2, BUFFER_SIZE, stdin);
+            
+            // Removing the newline character from the end of `string2`.
+            string2[strlen(string2) - 1] = '\0';
+            
+            // Concatenating `string2` to `string1`.
+            strcat(string1, string2);
+            
+            // Printing the concatenated string.
+            printf("Concatenated string is '%s'\n", string1);
+        } 
+    } while (strcmp(string1, "q") != 0); // Loop continues until `string1` is "q".
+
+    // Printing a message indicating the end of the demonstration for concatenating strings.
+    printf("*** End of Concatenating Strings Demo ***\n\n");
+
+    /* Version 2 */
+
+    /* Version 3 */
+}
+
+
diff --git a/manipulating.h b/manipulating.h
new file mode 100644
index 0000000..de24853
--- /dev/null
+++ b/manipulating.h
@@ -0,0 +1,14 @@
+// MANIPULATING MODULE HEADER
+
+// Header guards to prevent multiple inclusion of the header file.
+#ifndef _MANIPULATING_H_
+#define _MANIPULATING_H_
+
+// Include necessary standard library headers.
+#include <stdio.h>
+#include <string.h>
+
+// Function prototype for the manipulating function.
+void manipulating(void);
+
+#endif // End of header guard
diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
new file mode 100644
index 0000000..3c5e9e2
Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
diff --git a/tokenizing-test.txt b/tokenizing-test.txt
new file mode 100644
index 0000000..c5a2949
--- /dev/null
+++ b/tokenizing-test.txt
@@ -0,0 +1 @@
+Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
\ No newline at end of file
diff --git a/tokenizing.c b/tokenizing.c
new file mode 100644
index 0000000..daa8647
--- /dev/null
+++ b/tokenizing.c
@@ -0,0 +1,61 @@
+// Defining the macro `_CRT_SECURE_NO_WARNINGS` to disable certain warnings related to standard library functions in Windows.
+#define _CRT_SECURE_NO_WARNINGS
+
+// Defining the size of the buffer to be used for storing words.
+#define BUFFER_SIZE 300
+
+// Including the header file `tokenizing.h`, which likely contains function prototypes needed for the `tokenizing` function.
+#include "tokenizing.h"
+
+// Defining the function `tokenizing`, which takes no arguments and returns nothing (`void`).
+void tokenizing(void) {
+    /* Version 1 */
+    // Printing a message indicating the start of the tokenizing words demonstration.
+    printf("*** Start of Tokenizing Words Demo ***\n");
+
+    // Declaring an array of characters named `words` with a size defined by the macro `BUFFER_SIZE`.
+    char words[BUFFER_SIZE];
+
+    // Declaring a pointer to a character named `nextWord`, initially set to NULL.
+    char* nextWord = NULL;
+
+    // Declaring an integer variable `wordsCounter` to keep track of the number of words.
+    int wordsCounter;
+
+    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
+    do {   
+        // Prompting the user to type a few words separated by space.
+        printf("Type a few words separated by space (q - to quit): \n");
+
+        // Reading the input string from the standard input and store it in `words`.
+        fgets(words, BUFFER_SIZE, stdin);
+
+        // Removing the newline character from the end of the input string.
+        words[strlen(words) - 1] = '\0';
+
+        // If the input string is not "q", tokenize the words using strtok function and print each word.
+        if (strcmp(words, "q") != 0) {
+            // Tokenizing the input string `words` using space as the delimiter.
+            nextWord = strtok(words, " ");
+
+            // Initializing `wordsCounter` to 1.
+            wordsCounter = 1;
+
+            // Looping through each token (word) obtained by strtok until NULL is returned.
+            while (nextWord) {
+                // Printing the current word along with its index.
+                printf("Word #%d is '%s'\n", wordsCounter++, nextWord);
+
+                // Getting the next token (word).
+                nextWord = strtok(NULL, " ");
+            }
+        }
+    } while (strcmp(words, "q") != 0); // Loop until the input string is "q".
+
+    // Printing a message indicating the end of the tokenizing words demonstration.
+    printf("*** End of Tokenizing Words Demo ***\n\n");
+
+    /* Version 2 */
+
+    /* Version 3 */
+}
diff --git a/tokenizing.h b/tokenizing.h
new file mode 100644
index 0000000..c452778
--- /dev/null
+++ b/tokenizing.h
@@ -0,0 +1,14 @@
+// TOKENIZING MODULE HEADER
+
+// Header guards to prevent multiple inclusion of the header file.
+#ifndef _TOKENIZING_H_
+#define _TOKENIZING_H_
+
+// Include necessary standard library headers.
+#include <stdio.h> 
+#include <string.h> 
+
+// Function prototype for the tokenizing function.
+void tokenizing(void);
+
+#endif // End of header guard
