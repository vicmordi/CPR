commit 5195bf16f226f6e4bb8f2bf88748c4aacb86923c
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Sun Apr 14 12:30:08 2024 -0400

    Final version of the project

diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000..cfa4611
Binary files /dev/null and b/.DS_Store differ
diff --git a/Final-Project-Plan (1).xlsx b/Final-Project-Plan (1).xlsx
index e931a70..13be104 100644
Binary files a/Final-Project-Plan (1).xlsx and b/Final-Project-Plan (1).xlsx differ
diff --git a/Final-Project-Test-Cases.xlsx b/Final-Project-Test-Cases.xlsx
index ece34a0..b5c3eda 100644
Binary files a/Final-Project-Test-Cases.xlsx and b/Final-Project-Test-Cases.xlsx differ
diff --git a/converting-git-log.txt b/converting-git-log.txt
deleted file mode 100644
index 4711040..0000000
--- a/converting-git-log.txt
+++ /dev/null
@@ -1,692 +0,0 @@
-commit e49b5f4e1ac07c3430183b620507c8860e016ddc
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Sun Apr 7 21:13:48 2024 -0400
-
-    Added Version 2 code, test cases, testing log, and git log
-
-diff --git a/Final-Project-Test-Cases.xlsx b/Final-Project-Test-Cases.xlsx
-new file mode 100644
-index 0000000..8c7d6ed
-Binary files /dev/null and b/Final-Project-Test-Cases.xlsx differ
-diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
-index 22c04b3..cdb93cc 100644
-Binary files a/converting-test-cases.xlsx and b/converting-test-cases.xlsx differ
-diff --git a/converting-test.txt b/converting-test.txt
-index c000d00..47e38ed 100644
---- a/converting-test.txt
-+++ b/converting-test.txt
-@@ -1,3 +1,4 @@
-+*** Start of Converting Strings to int Demo ***
- Type an int numeric string (q - to quit):
- 5
- Converted number is 5
-@@ -18,4 +19,24 @@ Type an int numeric string (q - to quit):
- Converted number is 19
- Type an int numeric string (q - to quit):
- 
-+
-+*** Start of Converting Strings to double Demo ***
-+Type the double numeric string (q - to quit):
-+5.32
-+Converted number is 5.320000
-+Type the double numeric string (q - to quit):
-+600.99
-+Converted number is 600.990000
-+Type the double numeric string (q - to quit):
-+12.222
-+Converted number is 12.222000
-+Type the double numeric string (q - to quit):
-+lol
-+Converted number is 0.000000
-+Type the double numeric string (q - to quit):
-+no way
-+Converted number is 0.000000
-+Type the double numeric string (q - to quit):
-+99.9876
-+Converted number is 99.987600
- 
-\ No newline at end of file
-diff --git a/converting.c b/converting.c
-index 8e417a1..210c4e2 100644
---- a/converting.c
-+++ b/converting.c
-@@ -43,15 +43,34 @@ void converting(void) {
- 
-     // Printing a message indicating the end of the demonstration for converting strings to integers.
-     printf("*** End of Converting Strings to int Demo ***\n\n");
--}
-+
- 
- 
- /* Version 2 */
-+    printf("*** Start of Converting Strings to double Demo ***\n"); // Printing a start message
- 
-+    char doubleString[BUFFER_SIZE]; // Declaring a character array to store the input string
-+    double doubleNumber; // Declaring a variable to store the converted double number
- 
-+    do { // Starting a do-while loop
-+        printf("Type the double numeric string (q - to quit):\n"); // Prompting the user to input a double numeric string
-+        fgets(doubleString, BUFFER_SIZE, stdin); // Reading the input string from the user
-+        doubleString[strlen(doubleString) -1] = '\0'; // Removing the trailing newline character from the input string
-+
-+        if ((strcmp(doubleString, "q") != 0)) { // Checking if the input string is not equal to "q"
-+            doubleNumber = atof(doubleString); // Converting the input string to a double number
-+            printf("Converted number is %f\n", doubleNumber); // Printing the converted double number with two decimal places
-+        }
-+    } while (strcmp(doubleString, "q") != 0); // Continuing the loop until the input string is "q"
-+
-+    printf("*** End of Converting Strings to double Demo ***\n\n"); // Printing an end message
- 
--/* Version 3 */
- 
- 
- 
- 
-+/* Version 3 */
-+
-+
-+}
-+
-diff --git a/my_program b/my_program
-new file mode 100755
-index 0000000..2768dbe
-Binary files /dev/null and b/my_program differ
-diff --git a/~$(saksham)manipulating-test-cases.xlsx b/~$(saksham)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..68f7efc
-Binary files /dev/null and b/~$(saksham)manipulating-test-cases.xlsx differ
-
-commit 9023f3f6d405e49d6fcbfd416f200b3b5cf7678d
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 17:03:24 2024 -0400
-
-    delete file
-     Please enter the commit message for your changes. Lines starting
-
-diff --git a/newfile.txt b/newfile.txt
-deleted file mode 100644
-index e69de29..0000000
-
-commit 93294306b9f549715f946d2d3447c5ab4e7d0265
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 17:02:02 2024 -0400
-
-    random file
-
-diff --git a/newfile.txt b/newfile.txt
-new file mode 100644
-index 0000000..e69de29
-
-commit 5d2165e5901182b801e35a3329c56fd3cdfc4314
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 16:46:18 2024 -0400
-
-    First commit
-
-diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
-new file mode 100644
-index 0000000..0bbf16d
---- /dev/null
-+++ b/(Saksham)manipulting-test.txt
-@@ -0,0 +1,28 @@
-+Type the 1st string (q - to quit):
-+Hello
-+Type the 2nd string:
-+ Saksham
-+Concatenated string is 'Hello Saksham'
-+Type the 1st string (q - to quit):
-+Hi
-+Type the 2nd string:
-+There
-+Concatenated string is 'HiThere'
-+Type the 1st string (q - to quit):
-+my
-+Type the 2nd string:
-+q
-+Concatenated string is 'myq'
-+Type the 1st string (q - to quit):
-+q
-+*** End of Concatenating Strings Demo ***
-+Type the 1st string (q - to quit):
-+BE A HERO NOT A COWARD
-+Type the 2nd string:
-+NOT A COWARD
-+Concatenated string is 'BE A HERO NOT A COWARDNoguilt'
-+Type the 1st string (q - to quit):
-+No
-+Type the 2nd string:
-+guilt
-+Concatenated string is 'Noguilt'
-diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..c58c27f
-Binary files /dev/null and b/(Victor)manipulating-test-cases.xlsx differ
-diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
-new file mode 100644
-index 0000000..7a8fda1
---- /dev/null
-+++ b/(Victor)manipulating-test.txt
-@@ -0,0 +1,28 @@
-+Type the 1st string (q - to quit):
-+mynameis
-+Type the 2nd string:
-+Mordi
-+Concatenated string is 'mynameisMordi'
-+Type the 1st string (q - to quit):
-+no
-+Type the 2nd string:
-+lmk
-+Concatenated string is 'no lmk'
-+Type the 1st string (q - to quit):
-+CPR.   
-+Type the 2nd string:
-+PROJECT
-+Concatenated string is 'CPR.   PROJECT'
-+Type the 1st string (q - to quit):
-+Iphone          
-+Type the 2nd string:
-+is my fav
-+Concatenated string is 'Iphone is my fav'
-+Type the 1st string (q - to quit):
-+CP R
-+Type the 2nd string:
-+Cp r
-+Concatenated string is 'CP RCp r'
-+Type the 1st string (q - to quit):
-+q
-+*** End of Concatenating Strings Demo ***
-diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..f6356d1
-Binary files /dev/null and b/(saksham)manipulating-test-cases.xlsx differ
-diff --git a/.DS_Store b/.DS_Store
-new file mode 100644
-index 0000000..019d636
-Binary files /dev/null and b/.DS_Store differ
-diff --git a/Final-Project-Plan (1).xlsx b/Final-Project-Plan (1).xlsx
-new file mode 100644
-index 0000000..32132b1
-Binary files /dev/null and b/Final-Project-Plan (1).xlsx differ
-diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
-new file mode 100644
-index 0000000..22c04b3
-Binary files /dev/null and b/converting-test-cases.xlsx differ
-diff --git a/converting-test.txt b/converting-test.txt
-new file mode 100644
-index 0000000..c000d00
---- /dev/null
-+++ b/converting-test.txt
-@@ -0,0 +1,21 @@
-+Type an int numeric string (q - to quit):
-+5
-+Converted number is 5
-+Type an int numeric string (q - to quit):
-+8910
-+Converted number is 8910
-+Type an int numeric string (q - to quit):
-+apple
-+Converted number is 0
-+Type an int numeric string (q - to quit):
-+I_LOVE_CPR
-+Converted number is 0
-+Type an int numeric string (q - to quit):
-+200
-+Converted number is 200
-+Type an int numeric string (q - to quit):
-+19 23
-+Converted number is 19
-+Type an int numeric string (q - to quit):
-+
-+
-\ No newline at end of file
-diff --git a/converting.c b/converting.c
-new file mode 100644
-index 0000000..8e417a1
---- /dev/null
-+++ b/converting.c
-@@ -0,0 +1,57 @@
-+// Version 1
-+
-+// This line  `#define _CRT_SECURE_NO_WARNINGS` is to disable certain warnings related to standard library functions in Windows.
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Defining the size of the buffer to be used for storing the input string.
-+#define BUFFER_SIZE 80
-+
-+// Including the header file `converting.h`, which likely contains function prototypes needed for the `converting` function.
-+#include "converting.h"
-+
-+// Commenting indicating the relation of the `converting` function to the VI (Version 1) of the code.
-+// VI
-+
-+// Defining the function `converting`, which takes no arguments and returns nothing (`void`).
-+void converting(void) {
-+    // Printing a message indicating the start of the demonstration for converting strings to integers.
-+    printf("*** Start of Converting Strings to int Demo ***\n");
-+
-+    // Declaring an array of characters named `intString` with a size defined by the macro `BUFFER_SIZE`.
-+    char intString[BUFFER_SIZE];
-+
-+    // Declaring an integer variable `intNumber` which will hold the converted integer value.
-+    int intNumber;
-+
-+    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {
-+        // Prompting the user to type an integer numeric string.
-+        printf("Type an int numeric string (q - to quit):\n"); 
-+
-+        // Reading the input string from the standard input and store it in `intString`.
-+        fgets(intString, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of the input string.
-+        intString[strlen(intString) - 1] = '\0';
-+
-+        // Converting the string `intString` to an integer using the `atoi` function and store the result in `intNumber`.
-+        if (strcmp(intString, "q") != 0) {
-+            intNumber = atoi(intString);
-+            printf("Converted number is %d\n", intNumber);
-+        }
-+    } while (strcmp(intString, "q") != 0);
-+
-+    // Printing a message indicating the end of the demonstration for converting strings to integers.
-+    printf("*** End of Converting Strings to int Demo ***\n\n");
-+}
-+
-+
-+/* Version 2 */
-+
-+
-+
-+/* Version 3 */
-+
-+
-+
-+
-diff --git a/converting.h b/converting.h
-new file mode 100644
-index 0000000..e229834
---- /dev/null
-+++ b/converting.h
-@@ -0,0 +1,15 @@
-+// CONVERTING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _CONVERTING_H_
-+#define _CONVERTING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h> 
-+#include <string.h> 
-+#include <stdlib.h>
-+
-+// Function prototype for the converting function.
-+void converting(void);
-+
-+#endif // End of header guard
-diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
-new file mode 100644
-index 0000000..8447936
-Binary files /dev/null and b/fundamentals-test-cases.xlsx differ
-diff --git a/fundamentals-test.txt b/fundamentals-test.txt
-new file mode 100644
-index 0000000..d43c9c0
---- /dev/null
-+++ b/fundamentals-test.txt
-@@ -0,0 +1,29 @@
-+Type not empty string (q- to quit):
-+hello guys
-+Type the character position within the string: 
-+2
-+The character found at 2 position is 'l'
-+Type not empty string (q- to quit):
-+BeAlright       
-+Type the character position within the string: 
-+6
-+The character found at 6 position is 'g'
-+Type not empty string (q- to quit):
-+lllllllll
-+Type the character position within the string: 
-+20
-+Too big... Position reduced to max. available
-+The character found at 8 position is 'l'
-+Type not empty string (q- to quit):
-+q
-+*** End of Indexing Strings Demo ***
-+Type not empty string (q- to quit):
-+sjncsa/';';
-+Type the character position within the string: 
-+8
-+The character found at 8 position is ';'
-+Type not empty string (q- to quit):
-+12345LAB
-+Type the character position within the string: 
-+2
-+The character found at 2 position is '3'
-diff --git a/fundamentals.c b/fundamentals.c
-new file mode 100644
-index 0000000..86d67c0
---- /dev/null
-+++ b/fundamentals.c
-@@ -0,0 +1,71 @@
-+#include "fundamentals.h"
-+
-+// Disable certain warnings related to standard library functions in Windows
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Define buffer size for storing strings
-+#define BUFFER_SIZE 80 
-+
-+// Define size for input buffer storing numeric inputs
-+#define NUM_INPUT_SIZE 10
-+
-+// Include the header file again to access its functionality
-+#include "fundamentals.h"
-+
-+// Define the function `fundamentals`
-+void fundamentals (void) {
-+    // Start of the indexing strings demonstration
-+    printf("*** Start of Indexing Strings Demo ***\n");
-+
-+    // Declare a buffer to store the input string
-+    char buffer1 [BUFFER_SIZE];
-+
-+    // Declare a buffer to store numeric input
-+    char numInput [NUM_INPUT_SIZE];
-+
-+    // Declare a variable to store the position of the character
-+    size_t position;
-+
-+    // Start a loop for user interaction
-+    do
-+    {
-+        // Prompt the user to input a non-empty string
-+        printf("Type not empty string (q- to quit):\n");
-+        
-+        // Read the input string from the user
-+        fgets (buffer1, BUFFER_SIZE, stdin);
-+
-+        // Remove the newline character from the input string
-+        buffer1 [strlen(buffer1) - 1] = '\0';
-+
-+        // If the input is not "q", proceed with character position input
-+        if (strcmp (buffer1, "q") != 0) {
-+            // Prompt the user to input the character position within the string
-+            printf(("Type the character position within the string: \n"));
-+            
-+            // Read the numeric input for character position
-+            fgets (numInput, NUM_INPUT_SIZE, stdin) ;
-+            
-+            // Remove the newline character from the numeric input
-+            numInput [strlen (numInput)- 1] = '\0';
-+            
-+            // Convert the numeric input to an integer
-+            position = atoi(numInput);
-+            
-+            // If the position is greater than or equal to the length of the string, adjust it
-+            if (position >= strlen(buffer1))
-+            {
-+                position = strlen(buffer1) - 1;
-+                printf("Too big... Position reduced to max. available\n");
-+            }
-+            
-+            // Print the character found at the specified position within the string
-+            printf ("The character found at %d position is \'%c'\n", (int)position, buffer1[position]);
-+        }
-+    } while (strcmp (buffer1, "q") != 0); // Continue looping until the user inputs "q"
-+
-+    // End of the indexing strings demonstration
-+    printf("*** End of Indexing Strings Demo ***\n\n");
-+
-+    // Version 2 and Version 3 are left empty for future implementations
-+}
-diff --git a/fundamentals.h b/fundamentals.h
-new file mode 100644
-index 0000000..f49fe48
---- /dev/null
-+++ b/fundamentals.h
-@@ -0,0 +1,13 @@
-+// FUNDAMENTALS MODULE HEADER
-+#ifndef _FUNDAMENTALS_H_
-+#define _FUNDAMENTALS_H_
-+
-+// Include necessary standard library headers
-+#include <stdio.h> // For input/output operations
-+#include <string.h> // For string manipulation functions
-+#include <stdlib.h> // For functions like `atoi()` used for string to integer conversion
-+
-+// Declare the fundamentals function prototype
-+void fundamentals (void);
-+
-+#endif // End of header guard
-diff --git a/main.c b/main.c
-new file mode 100644
-index 0000000..43a0e6f
---- /dev/null
-+++ b/main.c
-@@ -0,0 +1,46 @@
-+// Including header files for the different modules
-+#include "fundamentals.h" // For the fundamentals module
-+#include "manipulating.h" // For the manipulating module
-+#include "converting.h"   // For the converting module
-+#include "tokenizing.h"   // For the tokenizing module
-+
-+// Main function of the program
-+int main(void) { 
-+    char buff[10]; // Buffer to store user input
-+    
-+    // Loop to display menu and handle user input
-+    do {
-+        // Displaying menu options
-+        printf("1 - Fundamentals\n");
-+        printf("2 - Manipulation\n");
-+        printf("3 - Converting\n");
-+        printf("4 - Tokenizing\n");
-+        printf("0 - Exit\n");
-+        printf("Which module to run? \n");
-+        
-+        // Reading user input
-+        fgets(buff, 10, stdin);
-+        
-+        // Switch case to handle user choice
-+        switch (buff[0]) {
-+            // If user chooses option 1
-+            case '1': 
-+                fundamentals(); // Call fundamentals function
-+                break;
-+            // If user chooses option 2
-+            case '2': 
-+                manipulating(); // Call manipulating function
-+                break;
-+            // If user chooses option 3
-+            case '3': 
-+                converting(); // Call converting function
-+                break;
-+            // If user chooses option 4
-+            case '4': 
-+                tokenizing(); // Call tokenizing function
-+                break;
-+        }
-+    } while (buff[0] != '0'); // Loop until user chooses to exit
-+    
-+    return 0; // Return 0 to indicate successful execution
-+}
-diff --git a/manipulating.c b/manipulating.c
-new file mode 100644
-index 0000000..e2bab7e
---- /dev/null
-+++ b/manipulating.c
-@@ -0,0 +1,55 @@
-+/* Version 1 */
-+
-+// Including necessary standard library headers.
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+#include "manipulating.h"
-+
-+// Function definition for the manipulating function.
-+void manipulating(void) {
-+    // Printing a message indicating the start of the demonstration for converting strings.
-+    printf("*** Start of Converting Strings Demo ***\n");
-+
-+    // Declaring character arrays `string1` and `string2` to store user input strings.
-+    char string1[BUFFER_SIZE];
-+    char string2[BUFFER_SIZE];
-+
-+    // Start a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {
-+        // Prompting the user to type the 1st string.
-+        printf("Type the 1st string (q - to quit):\n"); 
-+
-+        // Reading the 1st string from the standard input and storing it in `string1`.
-+        fgets(string1, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of `string1`.
-+        string1[strlen(string1) - 1] = '\0';
-+    
-+        // Checking if `string1` is not equal to "q".
-+        if ((strcmp(string1, "q") != 0)) {
-+            // Prompting the user to type the 2nd string.
-+            printf("Type the 2nd string:\n");
-+            
-+            // Reading the 2nd string from the standard input and storing it in `string2`.
-+            fgets(string2, BUFFER_SIZE, stdin);
-+            
-+            // Removing the newline character from the end of `string2`.
-+            string2[strlen(string2) - 1] = '\0';
-+            
-+            // Concatenating `string2` to `string1`.
-+            strcat(string1, string2);
-+            
-+            // Printing the concatenated string.
-+            printf("Concatenated string is '%s'\n", string1);
-+        } 
-+    } while (strcmp(string1, "q") != 0); // Loop continues until `string1` is "q".
-+
-+    // Printing a message indicating the end of the demonstration for concatenating strings.
-+    printf("*** End of Concatenating Strings Demo ***\n\n");
-+
-+    /* Version 2 */
-+
-+    /* Version 3 */
-+}
-+
-+
-diff --git a/manipulating.h b/manipulating.h
-new file mode 100644
-index 0000000..de24853
---- /dev/null
-+++ b/manipulating.h
-@@ -0,0 +1,14 @@
-+// MANIPULATING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _MANIPULATING_H_
-+#define _MANIPULATING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h>
-+#include <string.h>
-+
-+// Function prototype for the manipulating function.
-+void manipulating(void);
-+
-+#endif // End of header guard
-diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
-new file mode 100644
-index 0000000..3c5e9e2
-Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
-diff --git a/tokenizing-test.txt b/tokenizing-test.txt
-new file mode 100644
-index 0000000..c5a2949
---- /dev/null
-+++ b/tokenizing-test.txt
-@@ -0,0 +1 @@
-+Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
-\ No newline at end of file
-diff --git a/tokenizing.c b/tokenizing.c
-new file mode 100644
-index 0000000..daa8647
---- /dev/null
-+++ b/tokenizing.c
-@@ -0,0 +1,61 @@
-+// Defining the macro `_CRT_SECURE_NO_WARNINGS` to disable certain warnings related to standard library functions in Windows.
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Defining the size of the buffer to be used for storing words.
-+#define BUFFER_SIZE 300
-+
-+// Including the header file `tokenizing.h`, which likely contains function prototypes needed for the `tokenizing` function.
-+#include "tokenizing.h"
-+
-+// Defining the function `tokenizing`, which takes no arguments and returns nothing (`void`).
-+void tokenizing(void) {
-+    /* Version 1 */
-+    // Printing a message indicating the start of the tokenizing words demonstration.
-+    printf("*** Start of Tokenizing Words Demo ***\n");
-+
-+    // Declaring an array of characters named `words` with a size defined by the macro `BUFFER_SIZE`.
-+    char words[BUFFER_SIZE];
-+
-+    // Declaring a pointer to a character named `nextWord`, initially set to NULL.
-+    char* nextWord = NULL;
-+
-+    // Declaring an integer variable `wordsCounter` to keep track of the number of words.
-+    int wordsCounter;
-+
-+    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {   
-+        // Prompting the user to type a few words separated by space.
-+        printf("Type a few words separated by space (q - to quit): \n");
-+
-+        // Reading the input string from the standard input and store it in `words`.
-+        fgets(words, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of the input string.
-+        words[strlen(words) - 1] = '\0';
-+
-+        // If the input string is not "q", tokenize the words using strtok function and print each word.
-+        if (strcmp(words, "q") != 0) {
-+            // Tokenizing the input string `words` using space as the delimiter.
-+            nextWord = strtok(words, " ");
-+
-+            // Initializing `wordsCounter` to 1.
-+            wordsCounter = 1;
-+
-+            // Looping through each token (word) obtained by strtok until NULL is returned.
-+            while (nextWord) {
-+                // Printing the current word along with its index.
-+                printf("Word #%d is '%s'\n", wordsCounter++, nextWord);
-+
-+                // Getting the next token (word).
-+                nextWord = strtok(NULL, " ");
-+            }
-+        }
-+    } while (strcmp(words, "q") != 0); // Loop until the input string is "q".
-+
-+    // Printing a message indicating the end of the tokenizing words demonstration.
-+    printf("*** End of Tokenizing Words Demo ***\n\n");
-+
-+    /* Version 2 */
-+
-+    /* Version 3 */
-+}
-diff --git a/tokenizing.h b/tokenizing.h
-new file mode 100644
-index 0000000..c452778
---- /dev/null
-+++ b/tokenizing.h
-@@ -0,0 +1,14 @@
-+// TOKENIZING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _TOKENIZING_H_
-+#define _TOKENIZING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h> 
-+#include <string.h> 
-+
-+// Function prototype for the tokenizing function.
-+void tokenizing(void);
-+
-+#endif // End of header guard
diff --git a/converting-test.txt b/converting-test.txt
index 47e38ed..09ed91d 100644
--- a/converting-test.txt
+++ b/converting-test.txt
@@ -39,4 +39,24 @@ Converted number is 0.000000
 Type the double numeric string (q - to quit):
 99.9876
 Converted number is 99.987600
-
\ No newline at end of file
+
+
+*** Start of Converting Strings to long Demo ***
+Typing the long numeric string (q - to quit): 
+1234567890
+Printing the converted number: 1234567890
+Typing the long numeric string (q - to quit): 
+183484082488307
+Printing the converted number: 183484082488307
+Typing the long numeric string (q - to quit): 
+33483340840 
+Printing the converted number: 33483340840
+Typing the long numeric string (q - to quit): 
+2348932477729847.0
+Printing the converted number: 2348932477729847
+Typing the long numeric string (q - to quit): 
+llliubbhk
+Printing the converted number: 0
+Typing the long numeric string (q - to quit): 
+q
+*** End of Converting Strings to long Demo ***
\ No newline at end of file
diff --git a/converting.c b/converting.c
index 210c4e2..4e84138 100644
--- a/converting.c
+++ b/converting.c
@@ -71,6 +71,38 @@ void converting(void) {
 
 /* Version 3 */
 
+// Printing the start message of the converting strings to long demo
+    printf("*** Start of Converting Strings to long Demo ***\n");
+
+    // Declaring variables for storing the input string and the converted long number
+    char longString[BUFFER_SIZE];
+    long longNumber;
+
+    // Starting a loop to continuously prompt the user for input
+    do {
+        // Prompting the user to type a long numeric string
+        printf("Typing the long numeric string (q - to quit): \n");
+        
+        // Reading the input string from the user
+        fgets(longString, BUFFER_SIZE, stdin);
+        
+        // Removing the newline character from the end of the input string
+        longString[strlen(longString) - 1] = '\0'; 
+
+        // Checking if the user wants to quit
+        if (strcmp(longString, "q") != 0) {
+            // Converting the input string to a long number
+            longNumber = atol(longString);
+            
+            // Printing the converted long number
+            printf("Printing the converted number: %ld\n", longNumber);
+        }
+    // Continuing the loop until the user decides to quit
+    } while (strcmp(longString, "q") != 0);
+
+    // Printing the end message of the converting strings to long demo
+    printf("*** End of Converting Strings to long Demo ***\n\n");
+
 
 }
 
diff --git a/fundamental-git-log.txt b/fundamental-git-log.txt
deleted file mode 100644
index 6710fa8..0000000
--- a/fundamental-git-log.txt
+++ /dev/null
@@ -1,1091 +0,0 @@
-commit 3eb879866a61a73875208acf712a4631ba61ec7c
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Mon Apr 8 15:28:18 2024 -0400
-
-    adding fundamentals for version 2
-
-diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
-index 8447936..df0c4ea 100644
-Binary files a/fundamentals-test-cases.xlsx and b/fundamentals-test-cases.xlsx differ
-diff --git a/fundamentals-test.txt b/fundamentals-test.txt
-index d43c9c0..568a325 100644
---- a/fundamentals-test.txt
-+++ b/fundamentals-test.txt
-@@ -1,3 +1,4 @@
-+*** Start of Indexing Strings Demo ***
- Type not empty string (q- to quit):
- hello guys
- Type the character position within the string: 
-@@ -26,4 +27,26 @@ Type not empty string (q- to quit):
- 12345LAB
- Type the character position within the string: 
- 2
--The character found at 2 position is '3'
-+The character found at 2 position is '3'
-+
-+
-+*** Start of Measuring Strings Demo ***
-+Type a string (q - to quit):
-+hello
-+The length of 'hello' is 5 characters
-+Type a string (q - to quit):
-+ihaveacat
-+The length of 'ihaveacat' is 9 characters
-+Type a string (q - to quit):
-+ilovemango
-+The length of 'ilovemango' is 10 characters
-+Type a string (q - to quit):
-+0909898987766
-+The length of '0909898987766' is 13 characters
-+Type a string (q - to quit):
-+mycatsnameisKenzo
-+The length of 'mycatsnameisKenzo' is 17 characters
-+Type a string (q - to quit):
-+q
-+*** End of Measuring Strings Demo ***
-+
-diff --git a/fundamentals.c b/fundamentals.c
-index 86d67c0..a1a8aa7 100644
---- a/fundamentals.c
-+++ b/fundamentals.c
-@@ -67,5 +67,34 @@ void fundamentals (void) {
-     // End of the indexing strings demonstration
-     printf("*** End of Indexing Strings Demo ***\n\n");
- 
--    // Version 2 and Version 3 are left empty for future implementations
-+    // Version 2 
-+    // Printing the start message for the Measuring Strings Demo
-+    printf("*** Start of Measuring Strings Demo ***\n");
-+
-+    // Initializing buffer for storing user input
-+    char buffer[BUFFER_SIZE];
-+
-+    // Loop for continuously receiving user input strings until 'q' is entered
-+    do {
-+        // Prompting the user to type a string
-+        printf("Type a string (q - to quit):\n");
-+
-+        // Getting input string from the user
-+        fgets(buffer, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the input string
-+        buffer[strlen(buffer) - 1] = '\0';
-+
-+        // Checking if the entered string is not 'q'
-+        if (strcmp(buffer, "q") != 0) {
-+            // Printing the length of the entered string
-+            printf("The length of '%s' is %d characters\n", buffer, (int)strlen(buffer));
-+        }
-+    } while (strcmp(buffer, "q") != 0);  // Loop continuation condition
-+
-+    // Printing the end message for the Measuring Strings Demo
-+    printf("*** End of Measuring Strings Demo ***\n");
-+
-+
-+
- }
-
-commit 3543cd66023846f76f43572d9f8384895851122f
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Mon Apr 8 14:43:14 2024 -0400
-
-    manipulating(vicotr) eddited for version 2
-
-diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
-index c58c27f..4e2538e 100644
-Binary files a/(Victor)manipulating-test-cases.xlsx and b/(Victor)manipulating-test-cases.xlsx differ
-diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
-index 7a8fda1..3e9e441 100644
---- a/(Victor)manipulating-test.txt
-+++ b/(Victor)manipulating-test.txt
-@@ -1,3 +1,4 @@
-+*** Start of Converting Strings Demo ***
- Type the 1st string (q - to quit):
- mynameis
- Type the 2nd string:
-@@ -26,3 +27,34 @@ Concatenated string is 'CP RCp r'
- Type the 1st string (q - to quit):
- q
- *** End of Concatenating Strings Demo ***
-+
-+
-+*** Start of Comparing Strings Demo ***
-+Type the 1st string to compare (q - to quit): 
-+icanfly
-+Type the 2nd string to compare: 
-+icantfly
-+'icanfly' string is less than 'icantfly'
-+Type the 1st string to compare (q - to quit): 
-+superman or spiderman
-+Type the 2nd string to compare: 
-+superman or spiderman
-+'superman or spiderman' string is equal to 'superman or spiderman'
-+Type the 1st string to compare (q - to quit): 
-+cpr is fun
-+Type the 2nd string to compare: 
-+cpr is hard
-+'cpr is fun' string is less than 'cpr is hard'
-+Type the 1st string to compare (q - to quit): 
-+i am learning c 
-+Type the 2nd string to compare: 
-+i am learnin  c
-+'i am learning c ' string is greater than 'i am learnin  c'
-+Type the 1st string to compare (q - to quit): 
-+color
-+Type the 2nd string to compare: 
-+colour
-+'color' string is less than 'colour'
-+Type the 1st string to compare (q - to quit): 
-+q
-+*** End of Comparing strings Demo ***
-
-commit eaf26a4848793b8227b8738b2d33c382775aaa50
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Mon Apr 8 13:53:21 2024 -0400
-
-    manipulating(Saksham)
-
-diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
-index 0bbf16d..e395afb 100644
---- a/(Saksham)manipulting-test.txt
-+++ b/(Saksham)manipulting-test.txt
-@@ -1,3 +1,4 @@
-+*** Start of Converting Strings Demo ***
- Type the 1st string (q - to quit):
- Hello
- Type the 2nd string:
-@@ -25,4 +26,34 @@ Type the 1st string (q - to quit):
- No
- Type the 2nd string:
- guilt
--Concatenated string is 'Noguilt'
-+Concatenated string is 'Noguilt'
-+
-+*** Start of Comparing Strings Demo ***
-+Type the 1st string to compare (q - to quit): 
-+iamnoone
-+Type the 2nd string to compare: 
-+iamnoone
-+'iamnoone' string is equal to 'iamnoone'
-+Type the 1st string to compare (q - to quit): 
-+get ready 1
-+Type the 2nd string to compare: 
-+getready 1
-+'get ready 1' string is less than 'getready 1'
-+Type the 1st string to compare (q - to quit): 
-+lemon juice is healthy
-+Type the 2nd string to compare: 
-+apple juice is healthy
-+'lemon juice is healthy' string is greater than 'apple juice is healthy'
-+Type the 1st string to compare (q - to quit): 
-+i_am a programmer
-+Type the 2nd string to compare: 
-+i_am a programmer
-+'i_am a programmer' string is equal to 'i_am a programmer'
-+Type the 1st string to compare (q - to quit): 
-+1234 
-+Type the 2nd string to compare: 
-+2345
-+'1234' string is less than '2345'
-+Type the 1st string to compare (q - to quit): 
-+q
-+*** End of Comparing strings Demo ***
-diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
-index f6356d1..072b43e 100644
-Binary files a/(saksham)manipulating-test-cases.xlsx and b/(saksham)manipulating-test-cases.xlsx differ
-diff --git a/manipulating.c b/manipulating.c
-index e2bab7e..fc824ed 100644
---- a/manipulating.c
-+++ b/manipulating.c
-@@ -49,6 +49,55 @@ void manipulating(void) {
- 
-     /* Version 2 */
- 
-+    // Printing start message
-+    printf("*** Start of Comparing Strings Demo ***\n");
-+
-+    // Declaring variables for storing input strings and result
-+    char compare1[BUFFER_SIZE]; 
-+    char compare2[BUFFER_SIZE];
-+    int result;
-+
-+    // Starting loop for input and comparison
-+    do {
-+        // Prompting user for the 1st string to compare
-+        printf("Type the 1st string to compare (q - to quit): \n"); 
-+        
-+        // Getting input for the 1st string
-+        fgets(compare1, BUFFER_SIZE, stdin);
-+        
-+        // Replacing newline character with null terminator
-+        compare1[strlen(compare1) - 1] = '\0';
-+        
-+        // Checking if the input is not 'q'
-+        if (strcmp(compare1, "q") != 0) {
-+            
-+            // Prompting user for the 2nd string to compare
-+            printf("Type the 2nd string to compare: \n"); 
-+            
-+            // Getting input for the 2nd string
-+            fgets(compare2, BUFFER_SIZE, stdin);
-+            
-+            // Replacing newline character with null terminator
-+            compare2[strlen(compare2) - 1] = '\0';
-+            
-+            // Comparing the strings and storing the result
-+            result = strcmp(compare1, compare2);
-+            
-+            // Checking the result of comparison
-+            if (result < 0) 
-+                printf("'%s' string is less than '%s'\n", compare1, compare2);
-+            else if (result == 0)
-+                printf("'%s' string is equal to '%s'\n", compare1, compare2);
-+            else
-+                printf("'%s' string is greater than '%s'\n", compare1, compare2);
-+        }
-+    // Continuing loop until input is not 'q'
-+    } while (strcmp(compare1, "q") != 0);
-+
-+    // Printing end message
-+    printf("*** End of Comparing strings Demo ***\n\n");
-+
-+
-     /* Version 3 */
- }
- 
-diff --git a/tokenizing.c b/tokenizing.c
-index 6409077..01dc441 100644
---- a/tokenizing.c
-+++ b/tokenizing.c
-@@ -57,33 +57,52 @@ void tokenizing(void) {
- 
-     /* Version 2 */
- 
-+    // Initiating the Tokenizing Phrases Demo
-     printf("*** Start of Tokenizing Phrases Demo ***\n");
- 
-+    // Declaring a character array to store phrases and initializing variables
-     char phrases[BUFFER_SIZE];
-     char *nextPhrase = NULL;
-     int phrasesCounter;
- 
--
-+    // Starting a loop for inputting phrases
-     do
-     {
--        printf("Type a few phrases separated by comma (q - to quit): \n"); 
-+        // Prompting the user to type phrases separated by commas
-+        printf("Typing a few phrases separated by commas (q - to quit): \n");
-+        
-+        // Reading input from the user
-         fgets(phrases, BUFFER_SIZE, stdin);
-+        
-+        // Removing the newline character from the input
-         phrases[strlen(phrases) - 1] = '\0';
- 
-+        // Checking if the input is not equal to 'q' (to quit)
-         if (strcmp(phrases, "q") != 0) {
-+            
-+            // Tokenizing the input string using strtok function
-             nextPhrase = strtok(phrases, ",");
-+            
-+            // Initializing phrasesCounter variable to 1
-             phrasesCounter = 1;
- 
-+            // Looping through each tokenized phrase
-             while (nextPhrase) {
-+                
-+                // Printing the phrase number and the tokenized phrase
-                 printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
-+                
-+                // Getting the next tokenized phrase
-                 nextPhrase = strtok(NULL, ",");
-             }
-         }
-     } while (strcmp(phrases, "q") != 0);
- 
--
-+    // Printing the end of the Tokenizing phrases Demo
-     printf("*** End of Tokenizing phrases Demo ***\n\n");
- 
- 
-+
-+
-     /* Version 3 */
- }
-
-commit 3184b4025493b76a325542a7995ce146328f5ca3
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Sun Apr 7 21:50:51 2024 -0400
-
-    Tokenizing version 2 added with updated test case excel file and text file
-
-diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
-index 3c5e9e2..21e4d7c 100644
-Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
-diff --git a/tokenizing-test.txt b/tokenizing-test.txt
-index c5a2949..e935389 100644
---- a/tokenizing-test.txt
-+++ b/tokenizing-test.txt
-@@ -1 +1,27 @@
--Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
-\ No newline at end of file
-+*** Start of Tokenizing Words Demo ***
-+Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'*** Start of Tokenizing Phrases Demo ***
-+Type a few phrases separated by comma (q - to quit): 
-+hi, there
-+Phrase #1 is 'hi'
-+Phrase #2 is ' there'
-+Type a few phrases separated by comma (q - to quit): 
-+like, and subscribe, to my, channel
-+Phrase #1 is 'like'
-+Phrase #2 is ' and subscribe'
-+Phrase #3 is ' to my'
-+Phrase #4 is ' channel'
-+Type a few phrases separated by comma (q - to quit): 
-+how, are, you, 
-+Phrase #1 is 'how'
-+Phrase #2 is ' are'
-+Phrase #3 is ' you'
-+Phrase #4 is ' '
-+Type a few phrases separated by comma (q - to quit): 
-+my name is yyz
-+Phrase #1 is 'my name is yyz'
-+Type a few phrases separated by comma (q - to quit): 
-+012
-+Phrase #1 is '012'
-+Type a few phrases separated by comma (q - to quit): 
-+q
-+*** End of Tokenizing phrases Demo ***
-\ No newline at end of file
-diff --git a/tokenizing.c b/tokenizing.c
-index daa8647..6409077 100644
---- a/tokenizing.c
-+++ b/tokenizing.c
-@@ -57,5 +57,33 @@ void tokenizing(void) {
- 
-     /* Version 2 */
- 
-+    printf("*** Start of Tokenizing Phrases Demo ***\n");
-+
-+    char phrases[BUFFER_SIZE];
-+    char *nextPhrase = NULL;
-+    int phrasesCounter;
-+
-+
-+    do
-+    {
-+        printf("Type a few phrases separated by comma (q - to quit): \n"); 
-+        fgets(phrases, BUFFER_SIZE, stdin);
-+        phrases[strlen(phrases) - 1] = '\0';
-+
-+        if (strcmp(phrases, "q") != 0) {
-+            nextPhrase = strtok(phrases, ",");
-+            phrasesCounter = 1;
-+
-+            while (nextPhrase) {
-+                printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
-+                nextPhrase = strtok(NULL, ",");
-+            }
-+        }
-+    } while (strcmp(phrases, "q") != 0);
-+
-+
-+    printf("*** End of Tokenizing phrases Demo ***\n\n");
-+
-+
-     /* Version 3 */
- }
-
-commit e49b5f4e1ac07c3430183b620507c8860e016ddc
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Sun Apr 7 21:13:48 2024 -0400
-
-    Added Version 2 code, test cases, testing log, and git log
-
-diff --git a/Final-Project-Test-Cases.xlsx b/Final-Project-Test-Cases.xlsx
-new file mode 100644
-index 0000000..8c7d6ed
-Binary files /dev/null and b/Final-Project-Test-Cases.xlsx differ
-diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
-index 22c04b3..cdb93cc 100644
-Binary files a/converting-test-cases.xlsx and b/converting-test-cases.xlsx differ
-diff --git a/converting-test.txt b/converting-test.txt
-index c000d00..47e38ed 100644
---- a/converting-test.txt
-+++ b/converting-test.txt
-@@ -1,3 +1,4 @@
-+*** Start of Converting Strings to int Demo ***
- Type an int numeric string (q - to quit):
- 5
- Converted number is 5
-@@ -18,4 +19,24 @@ Type an int numeric string (q - to quit):
- Converted number is 19
- Type an int numeric string (q - to quit):
- 
-+
-+*** Start of Converting Strings to double Demo ***
-+Type the double numeric string (q - to quit):
-+5.32
-+Converted number is 5.320000
-+Type the double numeric string (q - to quit):
-+600.99
-+Converted number is 600.990000
-+Type the double numeric string (q - to quit):
-+12.222
-+Converted number is 12.222000
-+Type the double numeric string (q - to quit):
-+lol
-+Converted number is 0.000000
-+Type the double numeric string (q - to quit):
-+no way
-+Converted number is 0.000000
-+Type the double numeric string (q - to quit):
-+99.9876
-+Converted number is 99.987600
- 
-\ No newline at end of file
-diff --git a/converting.c b/converting.c
-index 8e417a1..210c4e2 100644
---- a/converting.c
-+++ b/converting.c
-@@ -43,15 +43,34 @@ void converting(void) {
- 
-     // Printing a message indicating the end of the demonstration for converting strings to integers.
-     printf("*** End of Converting Strings to int Demo ***\n\n");
--}
-+
- 
- 
- /* Version 2 */
-+    printf("*** Start of Converting Strings to double Demo ***\n"); // Printing a start message
- 
-+    char doubleString[BUFFER_SIZE]; // Declaring a character array to store the input string
-+    double doubleNumber; // Declaring a variable to store the converted double number
- 
-+    do { // Starting a do-while loop
-+        printf("Type the double numeric string (q - to quit):\n"); // Prompting the user to input a double numeric string
-+        fgets(doubleString, BUFFER_SIZE, stdin); // Reading the input string from the user
-+        doubleString[strlen(doubleString) -1] = '\0'; // Removing the trailing newline character from the input string
-+
-+        if ((strcmp(doubleString, "q") != 0)) { // Checking if the input string is not equal to "q"
-+            doubleNumber = atof(doubleString); // Converting the input string to a double number
-+            printf("Converted number is %f\n", doubleNumber); // Printing the converted double number with two decimal places
-+        }
-+    } while (strcmp(doubleString, "q") != 0); // Continuing the loop until the input string is "q"
-+
-+    printf("*** End of Converting Strings to double Demo ***\n\n"); // Printing an end message
- 
--/* Version 3 */
- 
- 
- 
- 
-+/* Version 3 */
-+
-+
-+}
-+
-diff --git a/my_program b/my_program
-new file mode 100755
-index 0000000..2768dbe
-Binary files /dev/null and b/my_program differ
-diff --git a/~$(saksham)manipulating-test-cases.xlsx b/~$(saksham)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..68f7efc
-Binary files /dev/null and b/~$(saksham)manipulating-test-cases.xlsx differ
-
-commit 9023f3f6d405e49d6fcbfd416f200b3b5cf7678d
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 17:03:24 2024 -0400
-
-    delete file
-     Please enter the commit message for your changes. Lines starting
-
-diff --git a/newfile.txt b/newfile.txt
-deleted file mode 100644
-index e69de29..0000000
-
-commit 93294306b9f549715f946d2d3447c5ab4e7d0265
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 17:02:02 2024 -0400
-
-    random file
-
-diff --git a/newfile.txt b/newfile.txt
-new file mode 100644
-index 0000000..e69de29
-
-commit 5d2165e5901182b801e35a3329c56fd3cdfc4314
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 16:46:18 2024 -0400
-
-    First commit
-
-diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
-new file mode 100644
-index 0000000..0bbf16d
---- /dev/null
-+++ b/(Saksham)manipulting-test.txt
-@@ -0,0 +1,28 @@
-+Type the 1st string (q - to quit):
-+Hello
-+Type the 2nd string:
-+ Saksham
-+Concatenated string is 'Hello Saksham'
-+Type the 1st string (q - to quit):
-+Hi
-+Type the 2nd string:
-+There
-+Concatenated string is 'HiThere'
-+Type the 1st string (q - to quit):
-+my
-+Type the 2nd string:
-+q
-+Concatenated string is 'myq'
-+Type the 1st string (q - to quit):
-+q
-+*** End of Concatenating Strings Demo ***
-+Type the 1st string (q - to quit):
-+BE A HERO NOT A COWARD
-+Type the 2nd string:
-+NOT A COWARD
-+Concatenated string is 'BE A HERO NOT A COWARDNoguilt'
-+Type the 1st string (q - to quit):
-+No
-+Type the 2nd string:
-+guilt
-+Concatenated string is 'Noguilt'
-diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..c58c27f
-Binary files /dev/null and b/(Victor)manipulating-test-cases.xlsx differ
-diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
-new file mode 100644
-index 0000000..7a8fda1
---- /dev/null
-+++ b/(Victor)manipulating-test.txt
-@@ -0,0 +1,28 @@
-+Type the 1st string (q - to quit):
-+mynameis
-+Type the 2nd string:
-+Mordi
-+Concatenated string is 'mynameisMordi'
-+Type the 1st string (q - to quit):
-+no
-+Type the 2nd string:
-+lmk
-+Concatenated string is 'no lmk'
-+Type the 1st string (q - to quit):
-+CPR.   
-+Type the 2nd string:
-+PROJECT
-+Concatenated string is 'CPR.   PROJECT'
-+Type the 1st string (q - to quit):
-+Iphone          
-+Type the 2nd string:
-+is my fav
-+Concatenated string is 'Iphone is my fav'
-+Type the 1st string (q - to quit):
-+CP R
-+Type the 2nd string:
-+Cp r
-+Concatenated string is 'CP RCp r'
-+Type the 1st string (q - to quit):
-+q
-+*** End of Concatenating Strings Demo ***
-diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..f6356d1
-Binary files /dev/null and b/(saksham)manipulating-test-cases.xlsx differ
-diff --git a/.DS_Store b/.DS_Store
-new file mode 100644
-index 0000000..019d636
-Binary files /dev/null and b/.DS_Store differ
-diff --git a/Final-Project-Plan (1).xlsx b/Final-Project-Plan (1).xlsx
-new file mode 100644
-index 0000000..32132b1
-Binary files /dev/null and b/Final-Project-Plan (1).xlsx differ
-diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
-new file mode 100644
-index 0000000..22c04b3
-Binary files /dev/null and b/converting-test-cases.xlsx differ
-diff --git a/converting-test.txt b/converting-test.txt
-new file mode 100644
-index 0000000..c000d00
---- /dev/null
-+++ b/converting-test.txt
-@@ -0,0 +1,21 @@
-+Type an int numeric string (q - to quit):
-+5
-+Converted number is 5
-+Type an int numeric string (q - to quit):
-+8910
-+Converted number is 8910
-+Type an int numeric string (q - to quit):
-+apple
-+Converted number is 0
-+Type an int numeric string (q - to quit):
-+I_LOVE_CPR
-+Converted number is 0
-+Type an int numeric string (q - to quit):
-+200
-+Converted number is 200
-+Type an int numeric string (q - to quit):
-+19 23
-+Converted number is 19
-+Type an int numeric string (q - to quit):
-+
-+
-\ No newline at end of file
-diff --git a/converting.c b/converting.c
-new file mode 100644
-index 0000000..8e417a1
---- /dev/null
-+++ b/converting.c
-@@ -0,0 +1,57 @@
-+// Version 1
-+
-+// This line  `#define _CRT_SECURE_NO_WARNINGS` is to disable certain warnings related to standard library functions in Windows.
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Defining the size of the buffer to be used for storing the input string.
-+#define BUFFER_SIZE 80
-+
-+// Including the header file `converting.h`, which likely contains function prototypes needed for the `converting` function.
-+#include "converting.h"
-+
-+// Commenting indicating the relation of the `converting` function to the VI (Version 1) of the code.
-+// VI
-+
-+// Defining the function `converting`, which takes no arguments and returns nothing (`void`).
-+void converting(void) {
-+    // Printing a message indicating the start of the demonstration for converting strings to integers.
-+    printf("*** Start of Converting Strings to int Demo ***\n");
-+
-+    // Declaring an array of characters named `intString` with a size defined by the macro `BUFFER_SIZE`.
-+    char intString[BUFFER_SIZE];
-+
-+    // Declaring an integer variable `intNumber` which will hold the converted integer value.
-+    int intNumber;
-+
-+    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {
-+        // Prompting the user to type an integer numeric string.
-+        printf("Type an int numeric string (q - to quit):\n"); 
-+
-+        // Reading the input string from the standard input and store it in `intString`.
-+        fgets(intString, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of the input string.
-+        intString[strlen(intString) - 1] = '\0';
-+
-+        // Converting the string `intString` to an integer using the `atoi` function and store the result in `intNumber`.
-+        if (strcmp(intString, "q") != 0) {
-+            intNumber = atoi(intString);
-+            printf("Converted number is %d\n", intNumber);
-+        }
-+    } while (strcmp(intString, "q") != 0);
-+
-+    // Printing a message indicating the end of the demonstration for converting strings to integers.
-+    printf("*** End of Converting Strings to int Demo ***\n\n");
-+}
-+
-+
-+/* Version 2 */
-+
-+
-+
-+/* Version 3 */
-+
-+
-+
-+
-diff --git a/converting.h b/converting.h
-new file mode 100644
-index 0000000..e229834
---- /dev/null
-+++ b/converting.h
-@@ -0,0 +1,15 @@
-+// CONVERTING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _CONVERTING_H_
-+#define _CONVERTING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h> 
-+#include <string.h> 
-+#include <stdlib.h>
-+
-+// Function prototype for the converting function.
-+void converting(void);
-+
-+#endif // End of header guard
-diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
-new file mode 100644
-index 0000000..8447936
-Binary files /dev/null and b/fundamentals-test-cases.xlsx differ
-diff --git a/fundamentals-test.txt b/fundamentals-test.txt
-new file mode 100644
-index 0000000..d43c9c0
---- /dev/null
-+++ b/fundamentals-test.txt
-@@ -0,0 +1,29 @@
-+Type not empty string (q- to quit):
-+hello guys
-+Type the character position within the string: 
-+2
-+The character found at 2 position is 'l'
-+Type not empty string (q- to quit):
-+BeAlright       
-+Type the character position within the string: 
-+6
-+The character found at 6 position is 'g'
-+Type not empty string (q- to quit):
-+lllllllll
-+Type the character position within the string: 
-+20
-+Too big... Position reduced to max. available
-+The character found at 8 position is 'l'
-+Type not empty string (q- to quit):
-+q
-+*** End of Indexing Strings Demo ***
-+Type not empty string (q- to quit):
-+sjncsa/';';
-+Type the character position within the string: 
-+8
-+The character found at 8 position is ';'
-+Type not empty string (q- to quit):
-+12345LAB
-+Type the character position within the string: 
-+2
-+The character found at 2 position is '3'
-diff --git a/fundamentals.c b/fundamentals.c
-new file mode 100644
-index 0000000..86d67c0
---- /dev/null
-+++ b/fundamentals.c
-@@ -0,0 +1,71 @@
-+#include "fundamentals.h"
-+
-+// Disable certain warnings related to standard library functions in Windows
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Define buffer size for storing strings
-+#define BUFFER_SIZE 80 
-+
-+// Define size for input buffer storing numeric inputs
-+#define NUM_INPUT_SIZE 10
-+
-+// Include the header file again to access its functionality
-+#include "fundamentals.h"
-+
-+// Define the function `fundamentals`
-+void fundamentals (void) {
-+    // Start of the indexing strings demonstration
-+    printf("*** Start of Indexing Strings Demo ***\n");
-+
-+    // Declare a buffer to store the input string
-+    char buffer1 [BUFFER_SIZE];
-+
-+    // Declare a buffer to store numeric input
-+    char numInput [NUM_INPUT_SIZE];
-+
-+    // Declare a variable to store the position of the character
-+    size_t position;
-+
-+    // Start a loop for user interaction
-+    do
-+    {
-+        // Prompt the user to input a non-empty string
-+        printf("Type not empty string (q- to quit):\n");
-+        
-+        // Read the input string from the user
-+        fgets (buffer1, BUFFER_SIZE, stdin);
-+
-+        // Remove the newline character from the input string
-+        buffer1 [strlen(buffer1) - 1] = '\0';
-+
-+        // If the input is not "q", proceed with character position input
-+        if (strcmp (buffer1, "q") != 0) {
-+            // Prompt the user to input the character position within the string
-+            printf(("Type the character position within the string: \n"));
-+            
-+            // Read the numeric input for character position
-+            fgets (numInput, NUM_INPUT_SIZE, stdin) ;
-+            
-+            // Remove the newline character from the numeric input
-+            numInput [strlen (numInput)- 1] = '\0';
-+            
-+            // Convert the numeric input to an integer
-+            position = atoi(numInput);
-+            
-+            // If the position is greater than or equal to the length of the string, adjust it
-+            if (position >= strlen(buffer1))
-+            {
-+                position = strlen(buffer1) - 1;
-+                printf("Too big... Position reduced to max. available\n");
-+            }
-+            
-+            // Print the character found at the specified position within the string
-+            printf ("The character found at %d position is \'%c'\n", (int)position, buffer1[position]);
-+        }
-+    } while (strcmp (buffer1, "q") != 0); // Continue looping until the user inputs "q"
-+
-+    // End of the indexing strings demonstration
-+    printf("*** End of Indexing Strings Demo ***\n\n");
-+
-+    // Version 2 and Version 3 are left empty for future implementations
-+}
-diff --git a/fundamentals.h b/fundamentals.h
-new file mode 100644
-index 0000000..f49fe48
---- /dev/null
-+++ b/fundamentals.h
-@@ -0,0 +1,13 @@
-+// FUNDAMENTALS MODULE HEADER
-+#ifndef _FUNDAMENTALS_H_
-+#define _FUNDAMENTALS_H_
-+
-+// Include necessary standard library headers
-+#include <stdio.h> // For input/output operations
-+#include <string.h> // For string manipulation functions
-+#include <stdlib.h> // For functions like `atoi()` used for string to integer conversion
-+
-+// Declare the fundamentals function prototype
-+void fundamentals (void);
-+
-+#endif // End of header guard
-diff --git a/main.c b/main.c
-new file mode 100644
-index 0000000..43a0e6f
---- /dev/null
-+++ b/main.c
-@@ -0,0 +1,46 @@
-+// Including header files for the different modules
-+#include "fundamentals.h" // For the fundamentals module
-+#include "manipulating.h" // For the manipulating module
-+#include "converting.h"   // For the converting module
-+#include "tokenizing.h"   // For the tokenizing module
-+
-+// Main function of the program
-+int main(void) { 
-+    char buff[10]; // Buffer to store user input
-+    
-+    // Loop to display menu and handle user input
-+    do {
-+        // Displaying menu options
-+        printf("1 - Fundamentals\n");
-+        printf("2 - Manipulation\n");
-+        printf("3 - Converting\n");
-+        printf("4 - Tokenizing\n");
-+        printf("0 - Exit\n");
-+        printf("Which module to run? \n");
-+        
-+        // Reading user input
-+        fgets(buff, 10, stdin);
-+        
-+        // Switch case to handle user choice
-+        switch (buff[0]) {
-+            // If user chooses option 1
-+            case '1': 
-+                fundamentals(); // Call fundamentals function
-+                break;
-+            // If user chooses option 2
-+            case '2': 
-+                manipulating(); // Call manipulating function
-+                break;
-+            // If user chooses option 3
-+            case '3': 
-+                converting(); // Call converting function
-+                break;
-+            // If user chooses option 4
-+            case '4': 
-+                tokenizing(); // Call tokenizing function
-+                break;
-+        }
-+    } while (buff[0] != '0'); // Loop until user chooses to exit
-+    
-+    return 0; // Return 0 to indicate successful execution
-+}
-diff --git a/manipulating.c b/manipulating.c
-new file mode 100644
-index 0000000..e2bab7e
---- /dev/null
-+++ b/manipulating.c
-@@ -0,0 +1,55 @@
-+/* Version 1 */
-+
-+// Including necessary standard library headers.
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+#include "manipulating.h"
-+
-+// Function definition for the manipulating function.
-+void manipulating(void) {
-+    // Printing a message indicating the start of the demonstration for converting strings.
-+    printf("*** Start of Converting Strings Demo ***\n");
-+
-+    // Declaring character arrays `string1` and `string2` to store user input strings.
-+    char string1[BUFFER_SIZE];
-+    char string2[BUFFER_SIZE];
-+
-+    // Start a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {
-+        // Prompting the user to type the 1st string.
-+        printf("Type the 1st string (q - to quit):\n"); 
-+
-+        // Reading the 1st string from the standard input and storing it in `string1`.
-+        fgets(string1, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of `string1`.
-+        string1[strlen(string1) - 1] = '\0';
-+    
-+        // Checking if `string1` is not equal to "q".
-+        if ((strcmp(string1, "q") != 0)) {
-+            // Prompting the user to type the 2nd string.
-+            printf("Type the 2nd string:\n");
-+            
-+            // Reading the 2nd string from the standard input and storing it in `string2`.
-+            fgets(string2, BUFFER_SIZE, stdin);
-+            
-+            // Removing the newline character from the end of `string2`.
-+            string2[strlen(string2) - 1] = '\0';
-+            
-+            // Concatenating `string2` to `string1`.
-+            strcat(string1, string2);
-+            
-+            // Printing the concatenated string.
-+            printf("Concatenated string is '%s'\n", string1);
-+        } 
-+    } while (strcmp(string1, "q") != 0); // Loop continues until `string1` is "q".
-+
-+    // Printing a message indicating the end of the demonstration for concatenating strings.
-+    printf("*** End of Concatenating Strings Demo ***\n\n");
-+
-+    /* Version 2 */
-+
-+    /* Version 3 */
-+}
-+
-+
-diff --git a/manipulating.h b/manipulating.h
-new file mode 100644
-index 0000000..de24853
---- /dev/null
-+++ b/manipulating.h
-@@ -0,0 +1,14 @@
-+// MANIPULATING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _MANIPULATING_H_
-+#define _MANIPULATING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h>
-+#include <string.h>
-+
-+// Function prototype for the manipulating function.
-+void manipulating(void);
-+
-+#endif // End of header guard
-diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
-new file mode 100644
-index 0000000..3c5e9e2
-Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
-diff --git a/tokenizing-test.txt b/tokenizing-test.txt
-new file mode 100644
-index 0000000..c5a2949
---- /dev/null
-+++ b/tokenizing-test.txt
-@@ -0,0 +1 @@
-+Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
-\ No newline at end of file
-diff --git a/tokenizing.c b/tokenizing.c
-new file mode 100644
-index 0000000..daa8647
---- /dev/null
-+++ b/tokenizing.c
-@@ -0,0 +1,61 @@
-+// Defining the macro `_CRT_SECURE_NO_WARNINGS` to disable certain warnings related to standard library functions in Windows.
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Defining the size of the buffer to be used for storing words.
-+#define BUFFER_SIZE 300
-+
-+// Including the header file `tokenizing.h`, which likely contains function prototypes needed for the `tokenizing` function.
-+#include "tokenizing.h"
-+
-+// Defining the function `tokenizing`, which takes no arguments and returns nothing (`void`).
-+void tokenizing(void) {
-+    /* Version 1 */
-+    // Printing a message indicating the start of the tokenizing words demonstration.
-+    printf("*** Start of Tokenizing Words Demo ***\n");
-+
-+    // Declaring an array of characters named `words` with a size defined by the macro `BUFFER_SIZE`.
-+    char words[BUFFER_SIZE];
-+
-+    // Declaring a pointer to a character named `nextWord`, initially set to NULL.
-+    char* nextWord = NULL;
-+
-+    // Declaring an integer variable `wordsCounter` to keep track of the number of words.
-+    int wordsCounter;
-+
-+    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {   
-+        // Prompting the user to type a few words separated by space.
-+        printf("Type a few words separated by space (q - to quit): \n");
-+
-+        // Reading the input string from the standard input and store it in `words`.
-+        fgets(words, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of the input string.
-+        words[strlen(words) - 1] = '\0';
-+
-+        // If the input string is not "q", tokenize the words using strtok function and print each word.
-+        if (strcmp(words, "q") != 0) {
-+            // Tokenizing the input string `words` using space as the delimiter.
-+            nextWord = strtok(words, " ");
-+
-+            // Initializing `wordsCounter` to 1.
-+            wordsCounter = 1;
-+
-+            // Looping through each token (word) obtained by strtok until NULL is returned.
-+            while (nextWord) {
-+                // Printing the current word along with its index.
-+                printf("Word #%d is '%s'\n", wordsCounter++, nextWord);
-+
-+                // Getting the next token (word).
-+                nextWord = strtok(NULL, " ");
-+            }
-+        }
-+    } while (strcmp(words, "q") != 0); // Loop until the input string is "q".
-+
-+    // Printing a message indicating the end of the tokenizing words demonstration.
-+    printf("*** End of Tokenizing Words Demo ***\n\n");
-+
-+    /* Version 2 */
-+
-+    /* Version 3 */
-+}
-diff --git a/tokenizing.h b/tokenizing.h
-new file mode 100644
-index 0000000..c452778
---- /dev/null
-+++ b/tokenizing.h
-@@ -0,0 +1,14 @@
-+// TOKENIZING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _TOKENIZING_H_
-+#define _TOKENIZING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h> 
-+#include <string.h> 
-+
-+// Function prototype for the tokenizing function.
-+void tokenizing(void);
-+
-+#endif // End of header guard
diff --git a/fundamentals-test.txt b/fundamentals-test.txt
index 568a325..0d1d1b3 100644
--- a/fundamentals-test.txt
+++ b/fundamentals-test.txt
@@ -1,4 +1,4 @@
-*** Start of Indexing Strings Demo ***
+*** Start of Indexing Strings Demo ***
 Type not empty string (q- to quit):
 hello guys
 Type the character position within the string: 
@@ -27,26 +27,48 @@ Type not empty string (q- to quit):
 12345LAB
 Type the character position within the string: 
 2
-The character found at 2 position is '3'
-
-
-*** Start of Measuring Strings Demo ***
-Type a string (q - to quit):
-hello
-The length of 'hello' is 5 characters
-Type a string (q - to quit):
-ihaveacat
-The length of 'ihaveacat' is 9 characters
-Type a string (q - to quit):
-ilovemango
-The length of 'ilovemango' is 10 characters
-Type a string (q - to quit):
-0909898987766
-The length of '0909898987766' is 13 characters
-Type a string (q - to quit):
-mycatsnameisKenzo
-The length of 'mycatsnameisKenzo' is 17 characters
-Type a string (q - to quit):
-q
-*** End of Measuring Strings Demo ***
+The character found at 2 position is '3'
 
+
+*** Start of Measuring Strings Demo ***
+Type a string (q - to quit):
+hello
+The length of 'hello' is 5 characters
+Type a string (q - to quit):
+ihaveacat
+The length of 'ihaveacat' is 9 characters
+Type a string (q - to quit):
+ilovemango
+The length of 'ilovemango' is 10 characters
+Type a string (q - to quit):
+0909898987766
+The length of '0909898987766' is 13 characters
+Type a string (q - to quit):
+mycatsnameisKenzo
+The length of 'mycatsnameisKenzo' is 17 characters
+Type a string (q - to quit):
+q
+*** End of Measuring Strings Demo ***
+
+
+*** Start of Copying Strings Demo ***
+Destination string is reset to empty
+Type the source string (q - to quit):
+IWanrToByACar
+New destination string is 'IWanrToByACar'
+Destination string is reset to empty
+Type the source string (q - to quit):
+I Love Myself    
+New destination string is 'I Love Myself'
+Destination string is reset to empty
+Type the source string (q - to quit):
+everyone_has*flaws
+New destination string is 'everyone_has*flaws'
+Destination string is reset to empty
+Type the source string (q - to quit):
+muscletech___helps__us__to__build__mass
+New destination string is 'muscletech___helps__us__to__build__mass'
+Destination string is reset to empty
+Type the source string (q - to quit):
+q
+*** End of Copying Strings Demo ***
\ No newline at end of file
diff --git a/fundamentals.c b/fundamentals.c
index a1a8aa7..d18a2d2 100644
--- a/fundamentals.c
+++ b/fundamentals.c
@@ -93,7 +93,32 @@ void fundamentals (void) {
     } while (strcmp(buffer, "q") != 0);  // Loop continuation condition
 
     // Printing the end message for the Measuring Strings Demo
-    printf("*** End of Measuring Strings Demo ***\n");
+    printf("*** End of Measuring Strings Demo ***\n\n");
+
+    // Version 3
+
+    printf("*** Start of Copying Strings Demo ***\n"); // Printing the start of the copying strings demo.
+
+    char destination[BUFFER_SIZE]; // Declaring the destination string buffer.
+    char source[BUFFER_SIZE]; // Declaring the source string buffer.
+
+    do {
+        destination[0] = '\0'; // Setting the first character of the destination string to null, resetting it to empty.
+        printf("Destination string is reset to empty\n"); // Printing a message indicating that the destination string is reset to empty.
+        printf("Type the source string (q - to quit):\n"); // Prompting the user to type the source string.
+
+        fgets(source, BUFFER_SIZE, stdin); // Getting input from the user and storing it in the source string.
+        source[strlen(source) - 1] = '\0'; // Removing the newline character at the end of the source string.
+
+        if (strcmp(source, "q") != 0) { // Checking if the user entered "q" to quit.
+            strcpy(destination, source); // Copying the contents of the source string to the destination string.
+            printf("New destination string is '%s'\n", destination); // Printing the new destination string.
+        }
+
+    } while (strcmp(source, "q") != 0); // Continuing the loop until the user enters "q" to quit.
+
+    printf("*** End of Copying Strings Demo ***\n"); // Printing the end of the copying strings demo.
+
 
 
 
diff --git a/manipulating(Saksham)-git-log.txt b/manipulating(Saksham)-git-log.txt
deleted file mode 100644
index c3ae226..0000000
--- a/manipulating(Saksham)-git-log.txt
+++ /dev/null
@@ -1,950 +0,0 @@
-commit eaf26a4848793b8227b8738b2d33c382775aaa50
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Mon Apr 8 13:53:21 2024 -0400
-
-    manipulating(Saksham)
-
-diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
-index 0bbf16d..e395afb 100644
---- a/(Saksham)manipulting-test.txt
-+++ b/(Saksham)manipulting-test.txt
-@@ -1,3 +1,4 @@
-+*** Start of Converting Strings Demo ***
- Type the 1st string (q - to quit):
- Hello
- Type the 2nd string:
-@@ -25,4 +26,34 @@ Type the 1st string (q - to quit):
- No
- Type the 2nd string:
- guilt
--Concatenated string is 'Noguilt'
-+Concatenated string is 'Noguilt'
-+
-+*** Start of Comparing Strings Demo ***
-+Type the 1st string to compare (q - to quit): 
-+iamnoone
-+Type the 2nd string to compare: 
-+iamnoone
-+'iamnoone' string is equal to 'iamnoone'
-+Type the 1st string to compare (q - to quit): 
-+get ready 1
-+Type the 2nd string to compare: 
-+getready 1
-+'get ready 1' string is less than 'getready 1'
-+Type the 1st string to compare (q - to quit): 
-+lemon juice is healthy
-+Type the 2nd string to compare: 
-+apple juice is healthy
-+'lemon juice is healthy' string is greater than 'apple juice is healthy'
-+Type the 1st string to compare (q - to quit): 
-+i_am a programmer
-+Type the 2nd string to compare: 
-+i_am a programmer
-+'i_am a programmer' string is equal to 'i_am a programmer'
-+Type the 1st string to compare (q - to quit): 
-+1234 
-+Type the 2nd string to compare: 
-+2345
-+'1234' string is less than '2345'
-+Type the 1st string to compare (q - to quit): 
-+q
-+*** End of Comparing strings Demo ***
-diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
-index f6356d1..072b43e 100644
-Binary files a/(saksham)manipulating-test-cases.xlsx and b/(saksham)manipulating-test-cases.xlsx differ
-diff --git a/manipulating.c b/manipulating.c
-index e2bab7e..fc824ed 100644
---- a/manipulating.c
-+++ b/manipulating.c
-@@ -49,6 +49,55 @@ void manipulating(void) {
- 
-     /* Version 2 */
- 
-+    // Printing start message
-+    printf("*** Start of Comparing Strings Demo ***\n");
-+
-+    // Declaring variables for storing input strings and result
-+    char compare1[BUFFER_SIZE]; 
-+    char compare2[BUFFER_SIZE];
-+    int result;
-+
-+    // Starting loop for input and comparison
-+    do {
-+        // Prompting user for the 1st string to compare
-+        printf("Type the 1st string to compare (q - to quit): \n"); 
-+        
-+        // Getting input for the 1st string
-+        fgets(compare1, BUFFER_SIZE, stdin);
-+        
-+        // Replacing newline character with null terminator
-+        compare1[strlen(compare1) - 1] = '\0';
-+        
-+        // Checking if the input is not 'q'
-+        if (strcmp(compare1, "q") != 0) {
-+            
-+            // Prompting user for the 2nd string to compare
-+            printf("Type the 2nd string to compare: \n"); 
-+            
-+            // Getting input for the 2nd string
-+            fgets(compare2, BUFFER_SIZE, stdin);
-+            
-+            // Replacing newline character with null terminator
-+            compare2[strlen(compare2) - 1] = '\0';
-+            
-+            // Comparing the strings and storing the result
-+            result = strcmp(compare1, compare2);
-+            
-+            // Checking the result of comparison
-+            if (result < 0) 
-+                printf("'%s' string is less than '%s'\n", compare1, compare2);
-+            else if (result == 0)
-+                printf("'%s' string is equal to '%s'\n", compare1, compare2);
-+            else
-+                printf("'%s' string is greater than '%s'\n", compare1, compare2);
-+        }
-+    // Continuing loop until input is not 'q'
-+    } while (strcmp(compare1, "q") != 0);
-+
-+    // Printing end message
-+    printf("*** End of Comparing strings Demo ***\n\n");
-+
-+
-     /* Version 3 */
- }
- 
-diff --git a/tokenizing.c b/tokenizing.c
-index 6409077..01dc441 100644
---- a/tokenizing.c
-+++ b/tokenizing.c
-@@ -57,33 +57,52 @@ void tokenizing(void) {
- 
-     /* Version 2 */
- 
-+    // Initiating the Tokenizing Phrases Demo
-     printf("*** Start of Tokenizing Phrases Demo ***\n");
- 
-+    // Declaring a character array to store phrases and initializing variables
-     char phrases[BUFFER_SIZE];
-     char *nextPhrase = NULL;
-     int phrasesCounter;
- 
--
-+    // Starting a loop for inputting phrases
-     do
-     {
--        printf("Type a few phrases separated by comma (q - to quit): \n"); 
-+        // Prompting the user to type phrases separated by commas
-+        printf("Typing a few phrases separated by commas (q - to quit): \n");
-+        
-+        // Reading input from the user
-         fgets(phrases, BUFFER_SIZE, stdin);
-+        
-+        // Removing the newline character from the input
-         phrases[strlen(phrases) - 1] = '\0';
- 
-+        // Checking if the input is not equal to 'q' (to quit)
-         if (strcmp(phrases, "q") != 0) {
-+            
-+            // Tokenizing the input string using strtok function
-             nextPhrase = strtok(phrases, ",");
-+            
-+            // Initializing phrasesCounter variable to 1
-             phrasesCounter = 1;
- 
-+            // Looping through each tokenized phrase
-             while (nextPhrase) {
-+                
-+                // Printing the phrase number and the tokenized phrase
-                 printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
-+                
-+                // Getting the next tokenized phrase
-                 nextPhrase = strtok(NULL, ",");
-             }
-         }
-     } while (strcmp(phrases, "q") != 0);
- 
--
-+    // Printing the end of the Tokenizing phrases Demo
-     printf("*** End of Tokenizing phrases Demo ***\n\n");
- 
- 
-+
-+
-     /* Version 3 */
- }
-
-commit 3184b4025493b76a325542a7995ce146328f5ca3
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Sun Apr 7 21:50:51 2024 -0400
-
-    Tokenizing version 2 added with updated test case excel file and text file
-
-diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
-index 3c5e9e2..21e4d7c 100644
-Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
-diff --git a/tokenizing-test.txt b/tokenizing-test.txt
-index c5a2949..e935389 100644
---- a/tokenizing-test.txt
-+++ b/tokenizing-test.txt
-@@ -1 +1,27 @@
--Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
-\ No newline at end of file
-+*** Start of Tokenizing Words Demo ***
-+Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'*** Start of Tokenizing Phrases Demo ***
-+Type a few phrases separated by comma (q - to quit): 
-+hi, there
-+Phrase #1 is 'hi'
-+Phrase #2 is ' there'
-+Type a few phrases separated by comma (q - to quit): 
-+like, and subscribe, to my, channel
-+Phrase #1 is 'like'
-+Phrase #2 is ' and subscribe'
-+Phrase #3 is ' to my'
-+Phrase #4 is ' channel'
-+Type a few phrases separated by comma (q - to quit): 
-+how, are, you, 
-+Phrase #1 is 'how'
-+Phrase #2 is ' are'
-+Phrase #3 is ' you'
-+Phrase #4 is ' '
-+Type a few phrases separated by comma (q - to quit): 
-+my name is yyz
-+Phrase #1 is 'my name is yyz'
-+Type a few phrases separated by comma (q - to quit): 
-+012
-+Phrase #1 is '012'
-+Type a few phrases separated by comma (q - to quit): 
-+q
-+*** End of Tokenizing phrases Demo ***
-\ No newline at end of file
-diff --git a/tokenizing.c b/tokenizing.c
-index daa8647..6409077 100644
---- a/tokenizing.c
-+++ b/tokenizing.c
-@@ -57,5 +57,33 @@ void tokenizing(void) {
- 
-     /* Version 2 */
- 
-+    printf("*** Start of Tokenizing Phrases Demo ***\n");
-+
-+    char phrases[BUFFER_SIZE];
-+    char *nextPhrase = NULL;
-+    int phrasesCounter;
-+
-+
-+    do
-+    {
-+        printf("Type a few phrases separated by comma (q - to quit): \n"); 
-+        fgets(phrases, BUFFER_SIZE, stdin);
-+        phrases[strlen(phrases) - 1] = '\0';
-+
-+        if (strcmp(phrases, "q") != 0) {
-+            nextPhrase = strtok(phrases, ",");
-+            phrasesCounter = 1;
-+
-+            while (nextPhrase) {
-+                printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
-+                nextPhrase = strtok(NULL, ",");
-+            }
-+        }
-+    } while (strcmp(phrases, "q") != 0);
-+
-+
-+    printf("*** End of Tokenizing phrases Demo ***\n\n");
-+
-+
-     /* Version 3 */
- }
-
-commit e49b5f4e1ac07c3430183b620507c8860e016ddc
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Sun Apr 7 21:13:48 2024 -0400
-
-    Added Version 2 code, test cases, testing log, and git log
-
-diff --git a/Final-Project-Test-Cases.xlsx b/Final-Project-Test-Cases.xlsx
-new file mode 100644
-index 0000000..8c7d6ed
-Binary files /dev/null and b/Final-Project-Test-Cases.xlsx differ
-diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
-index 22c04b3..cdb93cc 100644
-Binary files a/converting-test-cases.xlsx and b/converting-test-cases.xlsx differ
-diff --git a/converting-test.txt b/converting-test.txt
-index c000d00..47e38ed 100644
---- a/converting-test.txt
-+++ b/converting-test.txt
-@@ -1,3 +1,4 @@
-+*** Start of Converting Strings to int Demo ***
- Type an int numeric string (q - to quit):
- 5
- Converted number is 5
-@@ -18,4 +19,24 @@ Type an int numeric string (q - to quit):
- Converted number is 19
- Type an int numeric string (q - to quit):
- 
-+
-+*** Start of Converting Strings to double Demo ***
-+Type the double numeric string (q - to quit):
-+5.32
-+Converted number is 5.320000
-+Type the double numeric string (q - to quit):
-+600.99
-+Converted number is 600.990000
-+Type the double numeric string (q - to quit):
-+12.222
-+Converted number is 12.222000
-+Type the double numeric string (q - to quit):
-+lol
-+Converted number is 0.000000
-+Type the double numeric string (q - to quit):
-+no way
-+Converted number is 0.000000
-+Type the double numeric string (q - to quit):
-+99.9876
-+Converted number is 99.987600
- 
-\ No newline at end of file
-diff --git a/converting.c b/converting.c
-index 8e417a1..210c4e2 100644
---- a/converting.c
-+++ b/converting.c
-@@ -43,15 +43,34 @@ void converting(void) {
- 
-     // Printing a message indicating the end of the demonstration for converting strings to integers.
-     printf("*** End of Converting Strings to int Demo ***\n\n");
--}
-+
- 
- 
- /* Version 2 */
-+    printf("*** Start of Converting Strings to double Demo ***\n"); // Printing a start message
- 
-+    char doubleString[BUFFER_SIZE]; // Declaring a character array to store the input string
-+    double doubleNumber; // Declaring a variable to store the converted double number
- 
-+    do { // Starting a do-while loop
-+        printf("Type the double numeric string (q - to quit):\n"); // Prompting the user to input a double numeric string
-+        fgets(doubleString, BUFFER_SIZE, stdin); // Reading the input string from the user
-+        doubleString[strlen(doubleString) -1] = '\0'; // Removing the trailing newline character from the input string
-+
-+        if ((strcmp(doubleString, "q") != 0)) { // Checking if the input string is not equal to "q"
-+            doubleNumber = atof(doubleString); // Converting the input string to a double number
-+            printf("Converted number is %f\n", doubleNumber); // Printing the converted double number with two decimal places
-+        }
-+    } while (strcmp(doubleString, "q") != 0); // Continuing the loop until the input string is "q"
-+
-+    printf("*** End of Converting Strings to double Demo ***\n\n"); // Printing an end message
- 
--/* Version 3 */
- 
- 
- 
- 
-+/* Version 3 */
-+
-+
-+}
-+
-diff --git a/my_program b/my_program
-new file mode 100755
-index 0000000..2768dbe
-Binary files /dev/null and b/my_program differ
-diff --git a/~$(saksham)manipulating-test-cases.xlsx b/~$(saksham)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..68f7efc
-Binary files /dev/null and b/~$(saksham)manipulating-test-cases.xlsx differ
-
-commit 9023f3f6d405e49d6fcbfd416f200b3b5cf7678d
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 17:03:24 2024 -0400
-
-    delete file
-     Please enter the commit message for your changes. Lines starting
-
-diff --git a/newfile.txt b/newfile.txt
-deleted file mode 100644
-index e69de29..0000000
-
-commit 93294306b9f549715f946d2d3447c5ab4e7d0265
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 17:02:02 2024 -0400
-
-    random file
-
-diff --git a/newfile.txt b/newfile.txt
-new file mode 100644
-index 0000000..e69de29
-
-commit 5d2165e5901182b801e35a3329c56fd3cdfc4314
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 16:46:18 2024 -0400
-
-    First commit
-
-diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
-new file mode 100644
-index 0000000..0bbf16d
---- /dev/null
-+++ b/(Saksham)manipulting-test.txt
-@@ -0,0 +1,28 @@
-+Type the 1st string (q - to quit):
-+Hello
-+Type the 2nd string:
-+ Saksham
-+Concatenated string is 'Hello Saksham'
-+Type the 1st string (q - to quit):
-+Hi
-+Type the 2nd string:
-+There
-+Concatenated string is 'HiThere'
-+Type the 1st string (q - to quit):
-+my
-+Type the 2nd string:
-+q
-+Concatenated string is 'myq'
-+Type the 1st string (q - to quit):
-+q
-+*** End of Concatenating Strings Demo ***
-+Type the 1st string (q - to quit):
-+BE A HERO NOT A COWARD
-+Type the 2nd string:
-+NOT A COWARD
-+Concatenated string is 'BE A HERO NOT A COWARDNoguilt'
-+Type the 1st string (q - to quit):
-+No
-+Type the 2nd string:
-+guilt
-+Concatenated string is 'Noguilt'
-diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..c58c27f
-Binary files /dev/null and b/(Victor)manipulating-test-cases.xlsx differ
-diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
-new file mode 100644
-index 0000000..7a8fda1
---- /dev/null
-+++ b/(Victor)manipulating-test.txt
-@@ -0,0 +1,28 @@
-+Type the 1st string (q - to quit):
-+mynameis
-+Type the 2nd string:
-+Mordi
-+Concatenated string is 'mynameisMordi'
-+Type the 1st string (q - to quit):
-+no
-+Type the 2nd string:
-+lmk
-+Concatenated string is 'no lmk'
-+Type the 1st string (q - to quit):
-+CPR.   
-+Type the 2nd string:
-+PROJECT
-+Concatenated string is 'CPR.   PROJECT'
-+Type the 1st string (q - to quit):
-+Iphone          
-+Type the 2nd string:
-+is my fav
-+Concatenated string is 'Iphone is my fav'
-+Type the 1st string (q - to quit):
-+CP R
-+Type the 2nd string:
-+Cp r
-+Concatenated string is 'CP RCp r'
-+Type the 1st string (q - to quit):
-+q
-+*** End of Concatenating Strings Demo ***
-diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..f6356d1
-Binary files /dev/null and b/(saksham)manipulating-test-cases.xlsx differ
-diff --git a/.DS_Store b/.DS_Store
-new file mode 100644
-index 0000000..019d636
-Binary files /dev/null and b/.DS_Store differ
-diff --git a/Final-Project-Plan (1).xlsx b/Final-Project-Plan (1).xlsx
-new file mode 100644
-index 0000000..32132b1
-Binary files /dev/null and b/Final-Project-Plan (1).xlsx differ
-diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
-new file mode 100644
-index 0000000..22c04b3
-Binary files /dev/null and b/converting-test-cases.xlsx differ
-diff --git a/converting-test.txt b/converting-test.txt
-new file mode 100644
-index 0000000..c000d00
---- /dev/null
-+++ b/converting-test.txt
-@@ -0,0 +1,21 @@
-+Type an int numeric string (q - to quit):
-+5
-+Converted number is 5
-+Type an int numeric string (q - to quit):
-+8910
-+Converted number is 8910
-+Type an int numeric string (q - to quit):
-+apple
-+Converted number is 0
-+Type an int numeric string (q - to quit):
-+I_LOVE_CPR
-+Converted number is 0
-+Type an int numeric string (q - to quit):
-+200
-+Converted number is 200
-+Type an int numeric string (q - to quit):
-+19 23
-+Converted number is 19
-+Type an int numeric string (q - to quit):
-+
-+
-\ No newline at end of file
-diff --git a/converting.c b/converting.c
-new file mode 100644
-index 0000000..8e417a1
---- /dev/null
-+++ b/converting.c
-@@ -0,0 +1,57 @@
-+// Version 1
-+
-+// This line  `#define _CRT_SECURE_NO_WARNINGS` is to disable certain warnings related to standard library functions in Windows.
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Defining the size of the buffer to be used for storing the input string.
-+#define BUFFER_SIZE 80
-+
-+// Including the header file `converting.h`, which likely contains function prototypes needed for the `converting` function.
-+#include "converting.h"
-+
-+// Commenting indicating the relation of the `converting` function to the VI (Version 1) of the code.
-+// VI
-+
-+// Defining the function `converting`, which takes no arguments and returns nothing (`void`).
-+void converting(void) {
-+    // Printing a message indicating the start of the demonstration for converting strings to integers.
-+    printf("*** Start of Converting Strings to int Demo ***\n");
-+
-+    // Declaring an array of characters named `intString` with a size defined by the macro `BUFFER_SIZE`.
-+    char intString[BUFFER_SIZE];
-+
-+    // Declaring an integer variable `intNumber` which will hold the converted integer value.
-+    int intNumber;
-+
-+    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {
-+        // Prompting the user to type an integer numeric string.
-+        printf("Type an int numeric string (q - to quit):\n"); 
-+
-+        // Reading the input string from the standard input and store it in `intString`.
-+        fgets(intString, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of the input string.
-+        intString[strlen(intString) - 1] = '\0';
-+
-+        // Converting the string `intString` to an integer using the `atoi` function and store the result in `intNumber`.
-+        if (strcmp(intString, "q") != 0) {
-+            intNumber = atoi(intString);
-+            printf("Converted number is %d\n", intNumber);
-+        }
-+    } while (strcmp(intString, "q") != 0);
-+
-+    // Printing a message indicating the end of the demonstration for converting strings to integers.
-+    printf("*** End of Converting Strings to int Demo ***\n\n");
-+}
-+
-+
-+/* Version 2 */
-+
-+
-+
-+/* Version 3 */
-+
-+
-+
-+
-diff --git a/converting.h b/converting.h
-new file mode 100644
-index 0000000..e229834
---- /dev/null
-+++ b/converting.h
-@@ -0,0 +1,15 @@
-+// CONVERTING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _CONVERTING_H_
-+#define _CONVERTING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h> 
-+#include <string.h> 
-+#include <stdlib.h>
-+
-+// Function prototype for the converting function.
-+void converting(void);
-+
-+#endif // End of header guard
-diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
-new file mode 100644
-index 0000000..8447936
-Binary files /dev/null and b/fundamentals-test-cases.xlsx differ
-diff --git a/fundamentals-test.txt b/fundamentals-test.txt
-new file mode 100644
-index 0000000..d43c9c0
---- /dev/null
-+++ b/fundamentals-test.txt
-@@ -0,0 +1,29 @@
-+Type not empty string (q- to quit):
-+hello guys
-+Type the character position within the string: 
-+2
-+The character found at 2 position is 'l'
-+Type not empty string (q- to quit):
-+BeAlright       
-+Type the character position within the string: 
-+6
-+The character found at 6 position is 'g'
-+Type not empty string (q- to quit):
-+lllllllll
-+Type the character position within the string: 
-+20
-+Too big... Position reduced to max. available
-+The character found at 8 position is 'l'
-+Type not empty string (q- to quit):
-+q
-+*** End of Indexing Strings Demo ***
-+Type not empty string (q- to quit):
-+sjncsa/';';
-+Type the character position within the string: 
-+8
-+The character found at 8 position is ';'
-+Type not empty string (q- to quit):
-+12345LAB
-+Type the character position within the string: 
-+2
-+The character found at 2 position is '3'
-diff --git a/fundamentals.c b/fundamentals.c
-new file mode 100644
-index 0000000..86d67c0
---- /dev/null
-+++ b/fundamentals.c
-@@ -0,0 +1,71 @@
-+#include "fundamentals.h"
-+
-+// Disable certain warnings related to standard library functions in Windows
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Define buffer size for storing strings
-+#define BUFFER_SIZE 80 
-+
-+// Define size for input buffer storing numeric inputs
-+#define NUM_INPUT_SIZE 10
-+
-+// Include the header file again to access its functionality
-+#include "fundamentals.h"
-+
-+// Define the function `fundamentals`
-+void fundamentals (void) {
-+    // Start of the indexing strings demonstration
-+    printf("*** Start of Indexing Strings Demo ***\n");
-+
-+    // Declare a buffer to store the input string
-+    char buffer1 [BUFFER_SIZE];
-+
-+    // Declare a buffer to store numeric input
-+    char numInput [NUM_INPUT_SIZE];
-+
-+    // Declare a variable to store the position of the character
-+    size_t position;
-+
-+    // Start a loop for user interaction
-+    do
-+    {
-+        // Prompt the user to input a non-empty string
-+        printf("Type not empty string (q- to quit):\n");
-+        
-+        // Read the input string from the user
-+        fgets (buffer1, BUFFER_SIZE, stdin);
-+
-+        // Remove the newline character from the input string
-+        buffer1 [strlen(buffer1) - 1] = '\0';
-+
-+        // If the input is not "q", proceed with character position input
-+        if (strcmp (buffer1, "q") != 0) {
-+            // Prompt the user to input the character position within the string
-+            printf(("Type the character position within the string: \n"));
-+            
-+            // Read the numeric input for character position
-+            fgets (numInput, NUM_INPUT_SIZE, stdin) ;
-+            
-+            // Remove the newline character from the numeric input
-+            numInput [strlen (numInput)- 1] = '\0';
-+            
-+            // Convert the numeric input to an integer
-+            position = atoi(numInput);
-+            
-+            // If the position is greater than or equal to the length of the string, adjust it
-+            if (position >= strlen(buffer1))
-+            {
-+                position = strlen(buffer1) - 1;
-+                printf("Too big... Position reduced to max. available\n");
-+            }
-+            
-+            // Print the character found at the specified position within the string
-+            printf ("The character found at %d position is \'%c'\n", (int)position, buffer1[position]);
-+        }
-+    } while (strcmp (buffer1, "q") != 0); // Continue looping until the user inputs "q"
-+
-+    // End of the indexing strings demonstration
-+    printf("*** End of Indexing Strings Demo ***\n\n");
-+
-+    // Version 2 and Version 3 are left empty for future implementations
-+}
-diff --git a/fundamentals.h b/fundamentals.h
-new file mode 100644
-index 0000000..f49fe48
---- /dev/null
-+++ b/fundamentals.h
-@@ -0,0 +1,13 @@
-+// FUNDAMENTALS MODULE HEADER
-+#ifndef _FUNDAMENTALS_H_
-+#define _FUNDAMENTALS_H_
-+
-+// Include necessary standard library headers
-+#include <stdio.h> // For input/output operations
-+#include <string.h> // For string manipulation functions
-+#include <stdlib.h> // For functions like `atoi()` used for string to integer conversion
-+
-+// Declare the fundamentals function prototype
-+void fundamentals (void);
-+
-+#endif // End of header guard
-diff --git a/main.c b/main.c
-new file mode 100644
-index 0000000..43a0e6f
---- /dev/null
-+++ b/main.c
-@@ -0,0 +1,46 @@
-+// Including header files for the different modules
-+#include "fundamentals.h" // For the fundamentals module
-+#include "manipulating.h" // For the manipulating module
-+#include "converting.h"   // For the converting module
-+#include "tokenizing.h"   // For the tokenizing module
-+
-+// Main function of the program
-+int main(void) { 
-+    char buff[10]; // Buffer to store user input
-+    
-+    // Loop to display menu and handle user input
-+    do {
-+        // Displaying menu options
-+        printf("1 - Fundamentals\n");
-+        printf("2 - Manipulation\n");
-+        printf("3 - Converting\n");
-+        printf("4 - Tokenizing\n");
-+        printf("0 - Exit\n");
-+        printf("Which module to run? \n");
-+        
-+        // Reading user input
-+        fgets(buff, 10, stdin);
-+        
-+        // Switch case to handle user choice
-+        switch (buff[0]) {
-+            // If user chooses option 1
-+            case '1': 
-+                fundamentals(); // Call fundamentals function
-+                break;
-+            // If user chooses option 2
-+            case '2': 
-+                manipulating(); // Call manipulating function
-+                break;
-+            // If user chooses option 3
-+            case '3': 
-+                converting(); // Call converting function
-+                break;
-+            // If user chooses option 4
-+            case '4': 
-+                tokenizing(); // Call tokenizing function
-+                break;
-+        }
-+    } while (buff[0] != '0'); // Loop until user chooses to exit
-+    
-+    return 0; // Return 0 to indicate successful execution
-+}
-diff --git a/manipulating.c b/manipulating.c
-new file mode 100644
-index 0000000..e2bab7e
---- /dev/null
-+++ b/manipulating.c
-@@ -0,0 +1,55 @@
-+/* Version 1 */
-+
-+// Including necessary standard library headers.
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+#include "manipulating.h"
-+
-+// Function definition for the manipulating function.
-+void manipulating(void) {
-+    // Printing a message indicating the start of the demonstration for converting strings.
-+    printf("*** Start of Converting Strings Demo ***\n");
-+
-+    // Declaring character arrays `string1` and `string2` to store user input strings.
-+    char string1[BUFFER_SIZE];
-+    char string2[BUFFER_SIZE];
-+
-+    // Start a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {
-+        // Prompting the user to type the 1st string.
-+        printf("Type the 1st string (q - to quit):\n"); 
-+
-+        // Reading the 1st string from the standard input and storing it in `string1`.
-+        fgets(string1, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of `string1`.
-+        string1[strlen(string1) - 1] = '\0';
-+    
-+        // Checking if `string1` is not equal to "q".
-+        if ((strcmp(string1, "q") != 0)) {
-+            // Prompting the user to type the 2nd string.
-+            printf("Type the 2nd string:\n");
-+            
-+            // Reading the 2nd string from the standard input and storing it in `string2`.
-+            fgets(string2, BUFFER_SIZE, stdin);
-+            
-+            // Removing the newline character from the end of `string2`.
-+            string2[strlen(string2) - 1] = '\0';
-+            
-+            // Concatenating `string2` to `string1`.
-+            strcat(string1, string2);
-+            
-+            // Printing the concatenated string.
-+            printf("Concatenated string is '%s'\n", string1);
-+        } 
-+    } while (strcmp(string1, "q") != 0); // Loop continues until `string1` is "q".
-+
-+    // Printing a message indicating the end of the demonstration for concatenating strings.
-+    printf("*** End of Concatenating Strings Demo ***\n\n");
-+
-+    /* Version 2 */
-+
-+    /* Version 3 */
-+}
-+
-+
-diff --git a/manipulating.h b/manipulating.h
-new file mode 100644
-index 0000000..de24853
---- /dev/null
-+++ b/manipulating.h
-@@ -0,0 +1,14 @@
-+// MANIPULATING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _MANIPULATING_H_
-+#define _MANIPULATING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h>
-+#include <string.h>
-+
-+// Function prototype for the manipulating function.
-+void manipulating(void);
-+
-+#endif // End of header guard
-diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
-new file mode 100644
-index 0000000..3c5e9e2
-Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
-diff --git a/tokenizing-test.txt b/tokenizing-test.txt
-new file mode 100644
-index 0000000..c5a2949
---- /dev/null
-+++ b/tokenizing-test.txt
-@@ -0,0 +1 @@
-+Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
-\ No newline at end of file
-diff --git a/tokenizing.c b/tokenizing.c
-new file mode 100644
-index 0000000..daa8647
---- /dev/null
-+++ b/tokenizing.c
-@@ -0,0 +1,61 @@
-+// Defining the macro `_CRT_SECURE_NO_WARNINGS` to disable certain warnings related to standard library functions in Windows.
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Defining the size of the buffer to be used for storing words.
-+#define BUFFER_SIZE 300
-+
-+// Including the header file `tokenizing.h`, which likely contains function prototypes needed for the `tokenizing` function.
-+#include "tokenizing.h"
-+
-+// Defining the function `tokenizing`, which takes no arguments and returns nothing (`void`).
-+void tokenizing(void) {
-+    /* Version 1 */
-+    // Printing a message indicating the start of the tokenizing words demonstration.
-+    printf("*** Start of Tokenizing Words Demo ***\n");
-+
-+    // Declaring an array of characters named `words` with a size defined by the macro `BUFFER_SIZE`.
-+    char words[BUFFER_SIZE];
-+
-+    // Declaring a pointer to a character named `nextWord`, initially set to NULL.
-+    char* nextWord = NULL;
-+
-+    // Declaring an integer variable `wordsCounter` to keep track of the number of words.
-+    int wordsCounter;
-+
-+    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {   
-+        // Prompting the user to type a few words separated by space.
-+        printf("Type a few words separated by space (q - to quit): \n");
-+
-+        // Reading the input string from the standard input and store it in `words`.
-+        fgets(words, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of the input string.
-+        words[strlen(words) - 1] = '\0';
-+
-+        // If the input string is not "q", tokenize the words using strtok function and print each word.
-+        if (strcmp(words, "q") != 0) {
-+            // Tokenizing the input string `words` using space as the delimiter.
-+            nextWord = strtok(words, " ");
-+
-+            // Initializing `wordsCounter` to 1.
-+            wordsCounter = 1;
-+
-+            // Looping through each token (word) obtained by strtok until NULL is returned.
-+            while (nextWord) {
-+                // Printing the current word along with its index.
-+                printf("Word #%d is '%s'\n", wordsCounter++, nextWord);
-+
-+                // Getting the next token (word).
-+                nextWord = strtok(NULL, " ");
-+            }
-+        }
-+    } while (strcmp(words, "q") != 0); // Loop until the input string is "q".
-+
-+    // Printing a message indicating the end of the tokenizing words demonstration.
-+    printf("*** End of Tokenizing Words Demo ***\n\n");
-+
-+    /* Version 2 */
-+
-+    /* Version 3 */
-+}
-diff --git a/tokenizing.h b/tokenizing.h
-new file mode 100644
-index 0000000..c452778
---- /dev/null
-+++ b/tokenizing.h
-@@ -0,0 +1,14 @@
-+// TOKENIZING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _TOKENIZING_H_
-+#define _TOKENIZING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h> 
-+#include <string.h> 
-+
-+// Function prototype for the tokenizing function.
-+void tokenizing(void);
-+
-+#endif // End of header guard
diff --git a/manipulating(Victor)-git-log.txt b/manipulating(Victor)-git-log.txt
deleted file mode 100644
index 8decb3d..0000000
--- a/manipulating(Victor)-git-log.txt
+++ /dev/null
@@ -1,1004 +0,0 @@
-commit 3543cd66023846f76f43572d9f8384895851122f
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Mon Apr 8 14:43:14 2024 -0400
-
-    manipulating(vicotr) eddited for version 2
-
-diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
-index c58c27f..4e2538e 100644
-Binary files a/(Victor)manipulating-test-cases.xlsx and b/(Victor)manipulating-test-cases.xlsx differ
-diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
-index 7a8fda1..3e9e441 100644
---- a/(Victor)manipulating-test.txt
-+++ b/(Victor)manipulating-test.txt
-@@ -1,3 +1,4 @@
-+*** Start of Converting Strings Demo ***
- Type the 1st string (q - to quit):
- mynameis
- Type the 2nd string:
-@@ -26,3 +27,34 @@ Concatenated string is 'CP RCp r'
- Type the 1st string (q - to quit):
- q
- *** End of Concatenating Strings Demo ***
-+
-+
-+*** Start of Comparing Strings Demo ***
-+Type the 1st string to compare (q - to quit): 
-+icanfly
-+Type the 2nd string to compare: 
-+icantfly
-+'icanfly' string is less than 'icantfly'
-+Type the 1st string to compare (q - to quit): 
-+superman or spiderman
-+Type the 2nd string to compare: 
-+superman or spiderman
-+'superman or spiderman' string is equal to 'superman or spiderman'
-+Type the 1st string to compare (q - to quit): 
-+cpr is fun
-+Type the 2nd string to compare: 
-+cpr is hard
-+'cpr is fun' string is less than 'cpr is hard'
-+Type the 1st string to compare (q - to quit): 
-+i am learning c 
-+Type the 2nd string to compare: 
-+i am learnin  c
-+'i am learning c ' string is greater than 'i am learnin  c'
-+Type the 1st string to compare (q - to quit): 
-+color
-+Type the 2nd string to compare: 
-+colour
-+'color' string is less than 'colour'
-+Type the 1st string to compare (q - to quit): 
-+q
-+*** End of Comparing strings Demo ***
-
-commit eaf26a4848793b8227b8738b2d33c382775aaa50
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Mon Apr 8 13:53:21 2024 -0400
-
-    manipulating(Saksham)
-
-diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
-index 0bbf16d..e395afb 100644
---- a/(Saksham)manipulting-test.txt
-+++ b/(Saksham)manipulting-test.txt
-@@ -1,3 +1,4 @@
-+*** Start of Converting Strings Demo ***
- Type the 1st string (q - to quit):
- Hello
- Type the 2nd string:
-@@ -25,4 +26,34 @@ Type the 1st string (q - to quit):
- No
- Type the 2nd string:
- guilt
--Concatenated string is 'Noguilt'
-+Concatenated string is 'Noguilt'
-+
-+*** Start of Comparing Strings Demo ***
-+Type the 1st string to compare (q - to quit): 
-+iamnoone
-+Type the 2nd string to compare: 
-+iamnoone
-+'iamnoone' string is equal to 'iamnoone'
-+Type the 1st string to compare (q - to quit): 
-+get ready 1
-+Type the 2nd string to compare: 
-+getready 1
-+'get ready 1' string is less than 'getready 1'
-+Type the 1st string to compare (q - to quit): 
-+lemon juice is healthy
-+Type the 2nd string to compare: 
-+apple juice is healthy
-+'lemon juice is healthy' string is greater than 'apple juice is healthy'
-+Type the 1st string to compare (q - to quit): 
-+i_am a programmer
-+Type the 2nd string to compare: 
-+i_am a programmer
-+'i_am a programmer' string is equal to 'i_am a programmer'
-+Type the 1st string to compare (q - to quit): 
-+1234 
-+Type the 2nd string to compare: 
-+2345
-+'1234' string is less than '2345'
-+Type the 1st string to compare (q - to quit): 
-+q
-+*** End of Comparing strings Demo ***
-diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
-index f6356d1..072b43e 100644
-Binary files a/(saksham)manipulating-test-cases.xlsx and b/(saksham)manipulating-test-cases.xlsx differ
-diff --git a/manipulating.c b/manipulating.c
-index e2bab7e..fc824ed 100644
---- a/manipulating.c
-+++ b/manipulating.c
-@@ -49,6 +49,55 @@ void manipulating(void) {
- 
-     /* Version 2 */
- 
-+    // Printing start message
-+    printf("*** Start of Comparing Strings Demo ***\n");
-+
-+    // Declaring variables for storing input strings and result
-+    char compare1[BUFFER_SIZE]; 
-+    char compare2[BUFFER_SIZE];
-+    int result;
-+
-+    // Starting loop for input and comparison
-+    do {
-+        // Prompting user for the 1st string to compare
-+        printf("Type the 1st string to compare (q - to quit): \n"); 
-+        
-+        // Getting input for the 1st string
-+        fgets(compare1, BUFFER_SIZE, stdin);
-+        
-+        // Replacing newline character with null terminator
-+        compare1[strlen(compare1) - 1] = '\0';
-+        
-+        // Checking if the input is not 'q'
-+        if (strcmp(compare1, "q") != 0) {
-+            
-+            // Prompting user for the 2nd string to compare
-+            printf("Type the 2nd string to compare: \n"); 
-+            
-+            // Getting input for the 2nd string
-+            fgets(compare2, BUFFER_SIZE, stdin);
-+            
-+            // Replacing newline character with null terminator
-+            compare2[strlen(compare2) - 1] = '\0';
-+            
-+            // Comparing the strings and storing the result
-+            result = strcmp(compare1, compare2);
-+            
-+            // Checking the result of comparison
-+            if (result < 0) 
-+                printf("'%s' string is less than '%s'\n", compare1, compare2);
-+            else if (result == 0)
-+                printf("'%s' string is equal to '%s'\n", compare1, compare2);
-+            else
-+                printf("'%s' string is greater than '%s'\n", compare1, compare2);
-+        }
-+    // Continuing loop until input is not 'q'
-+    } while (strcmp(compare1, "q") != 0);
-+
-+    // Printing end message
-+    printf("*** End of Comparing strings Demo ***\n\n");
-+
-+
-     /* Version 3 */
- }
- 
-diff --git a/tokenizing.c b/tokenizing.c
-index 6409077..01dc441 100644
---- a/tokenizing.c
-+++ b/tokenizing.c
-@@ -57,33 +57,52 @@ void tokenizing(void) {
- 
-     /* Version 2 */
- 
-+    // Initiating the Tokenizing Phrases Demo
-     printf("*** Start of Tokenizing Phrases Demo ***\n");
- 
-+    // Declaring a character array to store phrases and initializing variables
-     char phrases[BUFFER_SIZE];
-     char *nextPhrase = NULL;
-     int phrasesCounter;
- 
--
-+    // Starting a loop for inputting phrases
-     do
-     {
--        printf("Type a few phrases separated by comma (q - to quit): \n"); 
-+        // Prompting the user to type phrases separated by commas
-+        printf("Typing a few phrases separated by commas (q - to quit): \n");
-+        
-+        // Reading input from the user
-         fgets(phrases, BUFFER_SIZE, stdin);
-+        
-+        // Removing the newline character from the input
-         phrases[strlen(phrases) - 1] = '\0';
- 
-+        // Checking if the input is not equal to 'q' (to quit)
-         if (strcmp(phrases, "q") != 0) {
-+            
-+            // Tokenizing the input string using strtok function
-             nextPhrase = strtok(phrases, ",");
-+            
-+            // Initializing phrasesCounter variable to 1
-             phrasesCounter = 1;
- 
-+            // Looping through each tokenized phrase
-             while (nextPhrase) {
-+                
-+                // Printing the phrase number and the tokenized phrase
-                 printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
-+                
-+                // Getting the next tokenized phrase
-                 nextPhrase = strtok(NULL, ",");
-             }
-         }
-     } while (strcmp(phrases, "q") != 0);
- 
--
-+    // Printing the end of the Tokenizing phrases Demo
-     printf("*** End of Tokenizing phrases Demo ***\n\n");
- 
- 
-+
-+
-     /* Version 3 */
- }
-
-commit 3184b4025493b76a325542a7995ce146328f5ca3
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Sun Apr 7 21:50:51 2024 -0400
-
-    Tokenizing version 2 added with updated test case excel file and text file
-
-diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
-index 3c5e9e2..21e4d7c 100644
-Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
-diff --git a/tokenizing-test.txt b/tokenizing-test.txt
-index c5a2949..e935389 100644
---- a/tokenizing-test.txt
-+++ b/tokenizing-test.txt
-@@ -1 +1,27 @@
--Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
-\ No newline at end of file
-+*** Start of Tokenizing Words Demo ***
-+Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'*** Start of Tokenizing Phrases Demo ***
-+Type a few phrases separated by comma (q - to quit): 
-+hi, there
-+Phrase #1 is 'hi'
-+Phrase #2 is ' there'
-+Type a few phrases separated by comma (q - to quit): 
-+like, and subscribe, to my, channel
-+Phrase #1 is 'like'
-+Phrase #2 is ' and subscribe'
-+Phrase #3 is ' to my'
-+Phrase #4 is ' channel'
-+Type a few phrases separated by comma (q - to quit): 
-+how, are, you, 
-+Phrase #1 is 'how'
-+Phrase #2 is ' are'
-+Phrase #3 is ' you'
-+Phrase #4 is ' '
-+Type a few phrases separated by comma (q - to quit): 
-+my name is yyz
-+Phrase #1 is 'my name is yyz'
-+Type a few phrases separated by comma (q - to quit): 
-+012
-+Phrase #1 is '012'
-+Type a few phrases separated by comma (q - to quit): 
-+q
-+*** End of Tokenizing phrases Demo ***
-\ No newline at end of file
-diff --git a/tokenizing.c b/tokenizing.c
-index daa8647..6409077 100644
---- a/tokenizing.c
-+++ b/tokenizing.c
-@@ -57,5 +57,33 @@ void tokenizing(void) {
- 
-     /* Version 2 */
- 
-+    printf("*** Start of Tokenizing Phrases Demo ***\n");
-+
-+    char phrases[BUFFER_SIZE];
-+    char *nextPhrase = NULL;
-+    int phrasesCounter;
-+
-+
-+    do
-+    {
-+        printf("Type a few phrases separated by comma (q - to quit): \n"); 
-+        fgets(phrases, BUFFER_SIZE, stdin);
-+        phrases[strlen(phrases) - 1] = '\0';
-+
-+        if (strcmp(phrases, "q") != 0) {
-+            nextPhrase = strtok(phrases, ",");
-+            phrasesCounter = 1;
-+
-+            while (nextPhrase) {
-+                printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
-+                nextPhrase = strtok(NULL, ",");
-+            }
-+        }
-+    } while (strcmp(phrases, "q") != 0);
-+
-+
-+    printf("*** End of Tokenizing phrases Demo ***\n\n");
-+
-+
-     /* Version 3 */
- }
-
-commit e49b5f4e1ac07c3430183b620507c8860e016ddc
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Sun Apr 7 21:13:48 2024 -0400
-
-    Added Version 2 code, test cases, testing log, and git log
-
-diff --git a/Final-Project-Test-Cases.xlsx b/Final-Project-Test-Cases.xlsx
-new file mode 100644
-index 0000000..8c7d6ed
-Binary files /dev/null and b/Final-Project-Test-Cases.xlsx differ
-diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
-index 22c04b3..cdb93cc 100644
-Binary files a/converting-test-cases.xlsx and b/converting-test-cases.xlsx differ
-diff --git a/converting-test.txt b/converting-test.txt
-index c000d00..47e38ed 100644
---- a/converting-test.txt
-+++ b/converting-test.txt
-@@ -1,3 +1,4 @@
-+*** Start of Converting Strings to int Demo ***
- Type an int numeric string (q - to quit):
- 5
- Converted number is 5
-@@ -18,4 +19,24 @@ Type an int numeric string (q - to quit):
- Converted number is 19
- Type an int numeric string (q - to quit):
- 
-+
-+*** Start of Converting Strings to double Demo ***
-+Type the double numeric string (q - to quit):
-+5.32
-+Converted number is 5.320000
-+Type the double numeric string (q - to quit):
-+600.99
-+Converted number is 600.990000
-+Type the double numeric string (q - to quit):
-+12.222
-+Converted number is 12.222000
-+Type the double numeric string (q - to quit):
-+lol
-+Converted number is 0.000000
-+Type the double numeric string (q - to quit):
-+no way
-+Converted number is 0.000000
-+Type the double numeric string (q - to quit):
-+99.9876
-+Converted number is 99.987600
- 
-\ No newline at end of file
-diff --git a/converting.c b/converting.c
-index 8e417a1..210c4e2 100644
---- a/converting.c
-+++ b/converting.c
-@@ -43,15 +43,34 @@ void converting(void) {
- 
-     // Printing a message indicating the end of the demonstration for converting strings to integers.
-     printf("*** End of Converting Strings to int Demo ***\n\n");
--}
-+
- 
- 
- /* Version 2 */
-+    printf("*** Start of Converting Strings to double Demo ***\n"); // Printing a start message
- 
-+    char doubleString[BUFFER_SIZE]; // Declaring a character array to store the input string
-+    double doubleNumber; // Declaring a variable to store the converted double number
- 
-+    do { // Starting a do-while loop
-+        printf("Type the double numeric string (q - to quit):\n"); // Prompting the user to input a double numeric string
-+        fgets(doubleString, BUFFER_SIZE, stdin); // Reading the input string from the user
-+        doubleString[strlen(doubleString) -1] = '\0'; // Removing the trailing newline character from the input string
-+
-+        if ((strcmp(doubleString, "q") != 0)) { // Checking if the input string is not equal to "q"
-+            doubleNumber = atof(doubleString); // Converting the input string to a double number
-+            printf("Converted number is %f\n", doubleNumber); // Printing the converted double number with two decimal places
-+        }
-+    } while (strcmp(doubleString, "q") != 0); // Continuing the loop until the input string is "q"
-+
-+    printf("*** End of Converting Strings to double Demo ***\n\n"); // Printing an end message
- 
--/* Version 3 */
- 
- 
- 
- 
-+/* Version 3 */
-+
-+
-+}
-+
-diff --git a/my_program b/my_program
-new file mode 100755
-index 0000000..2768dbe
-Binary files /dev/null and b/my_program differ
-diff --git a/~$(saksham)manipulating-test-cases.xlsx b/~$(saksham)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..68f7efc
-Binary files /dev/null and b/~$(saksham)manipulating-test-cases.xlsx differ
-
-commit 9023f3f6d405e49d6fcbfd416f200b3b5cf7678d
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 17:03:24 2024 -0400
-
-    delete file
-     Please enter the commit message for your changes. Lines starting
-
-diff --git a/newfile.txt b/newfile.txt
-deleted file mode 100644
-index e69de29..0000000
-
-commit 93294306b9f549715f946d2d3447c5ab4e7d0265
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 17:02:02 2024 -0400
-
-    random file
-
-diff --git a/newfile.txt b/newfile.txt
-new file mode 100644
-index 0000000..e69de29
-
-commit 5d2165e5901182b801e35a3329c56fd3cdfc4314
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 16:46:18 2024 -0400
-
-    First commit
-
-diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
-new file mode 100644
-index 0000000..0bbf16d
---- /dev/null
-+++ b/(Saksham)manipulting-test.txt
-@@ -0,0 +1,28 @@
-+Type the 1st string (q - to quit):
-+Hello
-+Type the 2nd string:
-+ Saksham
-+Concatenated string is 'Hello Saksham'
-+Type the 1st string (q - to quit):
-+Hi
-+Type the 2nd string:
-+There
-+Concatenated string is 'HiThere'
-+Type the 1st string (q - to quit):
-+my
-+Type the 2nd string:
-+q
-+Concatenated string is 'myq'
-+Type the 1st string (q - to quit):
-+q
-+*** End of Concatenating Strings Demo ***
-+Type the 1st string (q - to quit):
-+BE A HERO NOT A COWARD
-+Type the 2nd string:
-+NOT A COWARD
-+Concatenated string is 'BE A HERO NOT A COWARDNoguilt'
-+Type the 1st string (q - to quit):
-+No
-+Type the 2nd string:
-+guilt
-+Concatenated string is 'Noguilt'
-diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..c58c27f
-Binary files /dev/null and b/(Victor)manipulating-test-cases.xlsx differ
-diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
-new file mode 100644
-index 0000000..7a8fda1
---- /dev/null
-+++ b/(Victor)manipulating-test.txt
-@@ -0,0 +1,28 @@
-+Type the 1st string (q - to quit):
-+mynameis
-+Type the 2nd string:
-+Mordi
-+Concatenated string is 'mynameisMordi'
-+Type the 1st string (q - to quit):
-+no
-+Type the 2nd string:
-+lmk
-+Concatenated string is 'no lmk'
-+Type the 1st string (q - to quit):
-+CPR.   
-+Type the 2nd string:
-+PROJECT
-+Concatenated string is 'CPR.   PROJECT'
-+Type the 1st string (q - to quit):
-+Iphone          
-+Type the 2nd string:
-+is my fav
-+Concatenated string is 'Iphone is my fav'
-+Type the 1st string (q - to quit):
-+CP R
-+Type the 2nd string:
-+Cp r
-+Concatenated string is 'CP RCp r'
-+Type the 1st string (q - to quit):
-+q
-+*** End of Concatenating Strings Demo ***
-diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..f6356d1
-Binary files /dev/null and b/(saksham)manipulating-test-cases.xlsx differ
-diff --git a/.DS_Store b/.DS_Store
-new file mode 100644
-index 0000000..019d636
-Binary files /dev/null and b/.DS_Store differ
-diff --git a/Final-Project-Plan (1).xlsx b/Final-Project-Plan (1).xlsx
-new file mode 100644
-index 0000000..32132b1
-Binary files /dev/null and b/Final-Project-Plan (1).xlsx differ
-diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
-new file mode 100644
-index 0000000..22c04b3
-Binary files /dev/null and b/converting-test-cases.xlsx differ
-diff --git a/converting-test.txt b/converting-test.txt
-new file mode 100644
-index 0000000..c000d00
---- /dev/null
-+++ b/converting-test.txt
-@@ -0,0 +1,21 @@
-+Type an int numeric string (q - to quit):
-+5
-+Converted number is 5
-+Type an int numeric string (q - to quit):
-+8910
-+Converted number is 8910
-+Type an int numeric string (q - to quit):
-+apple
-+Converted number is 0
-+Type an int numeric string (q - to quit):
-+I_LOVE_CPR
-+Converted number is 0
-+Type an int numeric string (q - to quit):
-+200
-+Converted number is 200
-+Type an int numeric string (q - to quit):
-+19 23
-+Converted number is 19
-+Type an int numeric string (q - to quit):
-+
-+
-\ No newline at end of file
-diff --git a/converting.c b/converting.c
-new file mode 100644
-index 0000000..8e417a1
---- /dev/null
-+++ b/converting.c
-@@ -0,0 +1,57 @@
-+// Version 1
-+
-+// This line  `#define _CRT_SECURE_NO_WARNINGS` is to disable certain warnings related to standard library functions in Windows.
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Defining the size of the buffer to be used for storing the input string.
-+#define BUFFER_SIZE 80
-+
-+// Including the header file `converting.h`, which likely contains function prototypes needed for the `converting` function.
-+#include "converting.h"
-+
-+// Commenting indicating the relation of the `converting` function to the VI (Version 1) of the code.
-+// VI
-+
-+// Defining the function `converting`, which takes no arguments and returns nothing (`void`).
-+void converting(void) {
-+    // Printing a message indicating the start of the demonstration for converting strings to integers.
-+    printf("*** Start of Converting Strings to int Demo ***\n");
-+
-+    // Declaring an array of characters named `intString` with a size defined by the macro `BUFFER_SIZE`.
-+    char intString[BUFFER_SIZE];
-+
-+    // Declaring an integer variable `intNumber` which will hold the converted integer value.
-+    int intNumber;
-+
-+    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {
-+        // Prompting the user to type an integer numeric string.
-+        printf("Type an int numeric string (q - to quit):\n"); 
-+
-+        // Reading the input string from the standard input and store it in `intString`.
-+        fgets(intString, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of the input string.
-+        intString[strlen(intString) - 1] = '\0';
-+
-+        // Converting the string `intString` to an integer using the `atoi` function and store the result in `intNumber`.
-+        if (strcmp(intString, "q") != 0) {
-+            intNumber = atoi(intString);
-+            printf("Converted number is %d\n", intNumber);
-+        }
-+    } while (strcmp(intString, "q") != 0);
-+
-+    // Printing a message indicating the end of the demonstration for converting strings to integers.
-+    printf("*** End of Converting Strings to int Demo ***\n\n");
-+}
-+
-+
-+/* Version 2 */
-+
-+
-+
-+/* Version 3 */
-+
-+
-+
-+
-diff --git a/converting.h b/converting.h
-new file mode 100644
-index 0000000..e229834
---- /dev/null
-+++ b/converting.h
-@@ -0,0 +1,15 @@
-+// CONVERTING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _CONVERTING_H_
-+#define _CONVERTING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h> 
-+#include <string.h> 
-+#include <stdlib.h>
-+
-+// Function prototype for the converting function.
-+void converting(void);
-+
-+#endif // End of header guard
-diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
-new file mode 100644
-index 0000000..8447936
-Binary files /dev/null and b/fundamentals-test-cases.xlsx differ
-diff --git a/fundamentals-test.txt b/fundamentals-test.txt
-new file mode 100644
-index 0000000..d43c9c0
---- /dev/null
-+++ b/fundamentals-test.txt
-@@ -0,0 +1,29 @@
-+Type not empty string (q- to quit):
-+hello guys
-+Type the character position within the string: 
-+2
-+The character found at 2 position is 'l'
-+Type not empty string (q- to quit):
-+BeAlright       
-+Type the character position within the string: 
-+6
-+The character found at 6 position is 'g'
-+Type not empty string (q- to quit):
-+lllllllll
-+Type the character position within the string: 
-+20
-+Too big... Position reduced to max. available
-+The character found at 8 position is 'l'
-+Type not empty string (q- to quit):
-+q
-+*** End of Indexing Strings Demo ***
-+Type not empty string (q- to quit):
-+sjncsa/';';
-+Type the character position within the string: 
-+8
-+The character found at 8 position is ';'
-+Type not empty string (q- to quit):
-+12345LAB
-+Type the character position within the string: 
-+2
-+The character found at 2 position is '3'
-diff --git a/fundamentals.c b/fundamentals.c
-new file mode 100644
-index 0000000..86d67c0
---- /dev/null
-+++ b/fundamentals.c
-@@ -0,0 +1,71 @@
-+#include "fundamentals.h"
-+
-+// Disable certain warnings related to standard library functions in Windows
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Define buffer size for storing strings
-+#define BUFFER_SIZE 80 
-+
-+// Define size for input buffer storing numeric inputs
-+#define NUM_INPUT_SIZE 10
-+
-+// Include the header file again to access its functionality
-+#include "fundamentals.h"
-+
-+// Define the function `fundamentals`
-+void fundamentals (void) {
-+    // Start of the indexing strings demonstration
-+    printf("*** Start of Indexing Strings Demo ***\n");
-+
-+    // Declare a buffer to store the input string
-+    char buffer1 [BUFFER_SIZE];
-+
-+    // Declare a buffer to store numeric input
-+    char numInput [NUM_INPUT_SIZE];
-+
-+    // Declare a variable to store the position of the character
-+    size_t position;
-+
-+    // Start a loop for user interaction
-+    do
-+    {
-+        // Prompt the user to input a non-empty string
-+        printf("Type not empty string (q- to quit):\n");
-+        
-+        // Read the input string from the user
-+        fgets (buffer1, BUFFER_SIZE, stdin);
-+
-+        // Remove the newline character from the input string
-+        buffer1 [strlen(buffer1) - 1] = '\0';
-+
-+        // If the input is not "q", proceed with character position input
-+        if (strcmp (buffer1, "q") != 0) {
-+            // Prompt the user to input the character position within the string
-+            printf(("Type the character position within the string: \n"));
-+            
-+            // Read the numeric input for character position
-+            fgets (numInput, NUM_INPUT_SIZE, stdin) ;
-+            
-+            // Remove the newline character from the numeric input
-+            numInput [strlen (numInput)- 1] = '\0';
-+            
-+            // Convert the numeric input to an integer
-+            position = atoi(numInput);
-+            
-+            // If the position is greater than or equal to the length of the string, adjust it
-+            if (position >= strlen(buffer1))
-+            {
-+                position = strlen(buffer1) - 1;
-+                printf("Too big... Position reduced to max. available\n");
-+            }
-+            
-+            // Print the character found at the specified position within the string
-+            printf ("The character found at %d position is \'%c'\n", (int)position, buffer1[position]);
-+        }
-+    } while (strcmp (buffer1, "q") != 0); // Continue looping until the user inputs "q"
-+
-+    // End of the indexing strings demonstration
-+    printf("*** End of Indexing Strings Demo ***\n\n");
-+
-+    // Version 2 and Version 3 are left empty for future implementations
-+}
-diff --git a/fundamentals.h b/fundamentals.h
-new file mode 100644
-index 0000000..f49fe48
---- /dev/null
-+++ b/fundamentals.h
-@@ -0,0 +1,13 @@
-+// FUNDAMENTALS MODULE HEADER
-+#ifndef _FUNDAMENTALS_H_
-+#define _FUNDAMENTALS_H_
-+
-+// Include necessary standard library headers
-+#include <stdio.h> // For input/output operations
-+#include <string.h> // For string manipulation functions
-+#include <stdlib.h> // For functions like `atoi()` used for string to integer conversion
-+
-+// Declare the fundamentals function prototype
-+void fundamentals (void);
-+
-+#endif // End of header guard
-diff --git a/main.c b/main.c
-new file mode 100644
-index 0000000..43a0e6f
---- /dev/null
-+++ b/main.c
-@@ -0,0 +1,46 @@
-+// Including header files for the different modules
-+#include "fundamentals.h" // For the fundamentals module
-+#include "manipulating.h" // For the manipulating module
-+#include "converting.h"   // For the converting module
-+#include "tokenizing.h"   // For the tokenizing module
-+
-+// Main function of the program
-+int main(void) { 
-+    char buff[10]; // Buffer to store user input
-+    
-+    // Loop to display menu and handle user input
-+    do {
-+        // Displaying menu options
-+        printf("1 - Fundamentals\n");
-+        printf("2 - Manipulation\n");
-+        printf("3 - Converting\n");
-+        printf("4 - Tokenizing\n");
-+        printf("0 - Exit\n");
-+        printf("Which module to run? \n");
-+        
-+        // Reading user input
-+        fgets(buff, 10, stdin);
-+        
-+        // Switch case to handle user choice
-+        switch (buff[0]) {
-+            // If user chooses option 1
-+            case '1': 
-+                fundamentals(); // Call fundamentals function
-+                break;
-+            // If user chooses option 2
-+            case '2': 
-+                manipulating(); // Call manipulating function
-+                break;
-+            // If user chooses option 3
-+            case '3': 
-+                converting(); // Call converting function
-+                break;
-+            // If user chooses option 4
-+            case '4': 
-+                tokenizing(); // Call tokenizing function
-+                break;
-+        }
-+    } while (buff[0] != '0'); // Loop until user chooses to exit
-+    
-+    return 0; // Return 0 to indicate successful execution
-+}
-diff --git a/manipulating.c b/manipulating.c
-new file mode 100644
-index 0000000..e2bab7e
---- /dev/null
-+++ b/manipulating.c
-@@ -0,0 +1,55 @@
-+/* Version 1 */
-+
-+// Including necessary standard library headers.
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+#include "manipulating.h"
-+
-+// Function definition for the manipulating function.
-+void manipulating(void) {
-+    // Printing a message indicating the start of the demonstration for converting strings.
-+    printf("*** Start of Converting Strings Demo ***\n");
-+
-+    // Declaring character arrays `string1` and `string2` to store user input strings.
-+    char string1[BUFFER_SIZE];
-+    char string2[BUFFER_SIZE];
-+
-+    // Start a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {
-+        // Prompting the user to type the 1st string.
-+        printf("Type the 1st string (q - to quit):\n"); 
-+
-+        // Reading the 1st string from the standard input and storing it in `string1`.
-+        fgets(string1, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of `string1`.
-+        string1[strlen(string1) - 1] = '\0';
-+    
-+        // Checking if `string1` is not equal to "q".
-+        if ((strcmp(string1, "q") != 0)) {
-+            // Prompting the user to type the 2nd string.
-+            printf("Type the 2nd string:\n");
-+            
-+            // Reading the 2nd string from the standard input and storing it in `string2`.
-+            fgets(string2, BUFFER_SIZE, stdin);
-+            
-+            // Removing the newline character from the end of `string2`.
-+            string2[strlen(string2) - 1] = '\0';
-+            
-+            // Concatenating `string2` to `string1`.
-+            strcat(string1, string2);
-+            
-+            // Printing the concatenated string.
-+            printf("Concatenated string is '%s'\n", string1);
-+        } 
-+    } while (strcmp(string1, "q") != 0); // Loop continues until `string1` is "q".
-+
-+    // Printing a message indicating the end of the demonstration for concatenating strings.
-+    printf("*** End of Concatenating Strings Demo ***\n\n");
-+
-+    /* Version 2 */
-+
-+    /* Version 3 */
-+}
-+
-+
-diff --git a/manipulating.h b/manipulating.h
-new file mode 100644
-index 0000000..de24853
---- /dev/null
-+++ b/manipulating.h
-@@ -0,0 +1,14 @@
-+// MANIPULATING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _MANIPULATING_H_
-+#define _MANIPULATING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h>
-+#include <string.h>
-+
-+// Function prototype for the manipulating function.
-+void manipulating(void);
-+
-+#endif // End of header guard
-diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
-new file mode 100644
-index 0000000..3c5e9e2
-Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
-diff --git a/tokenizing-test.txt b/tokenizing-test.txt
-new file mode 100644
-index 0000000..c5a2949
---- /dev/null
-+++ b/tokenizing-test.txt
-@@ -0,0 +1 @@
-+Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
-\ No newline at end of file
-diff --git a/tokenizing.c b/tokenizing.c
-new file mode 100644
-index 0000000..daa8647
---- /dev/null
-+++ b/tokenizing.c
-@@ -0,0 +1,61 @@
-+// Defining the macro `_CRT_SECURE_NO_WARNINGS` to disable certain warnings related to standard library functions in Windows.
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Defining the size of the buffer to be used for storing words.
-+#define BUFFER_SIZE 300
-+
-+// Including the header file `tokenizing.h`, which likely contains function prototypes needed for the `tokenizing` function.
-+#include "tokenizing.h"
-+
-+// Defining the function `tokenizing`, which takes no arguments and returns nothing (`void`).
-+void tokenizing(void) {
-+    /* Version 1 */
-+    // Printing a message indicating the start of the tokenizing words demonstration.
-+    printf("*** Start of Tokenizing Words Demo ***\n");
-+
-+    // Declaring an array of characters named `words` with a size defined by the macro `BUFFER_SIZE`.
-+    char words[BUFFER_SIZE];
-+
-+    // Declaring a pointer to a character named `nextWord`, initially set to NULL.
-+    char* nextWord = NULL;
-+
-+    // Declaring an integer variable `wordsCounter` to keep track of the number of words.
-+    int wordsCounter;
-+
-+    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {   
-+        // Prompting the user to type a few words separated by space.
-+        printf("Type a few words separated by space (q - to quit): \n");
-+
-+        // Reading the input string from the standard input and store it in `words`.
-+        fgets(words, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of the input string.
-+        words[strlen(words) - 1] = '\0';
-+
-+        // If the input string is not "q", tokenize the words using strtok function and print each word.
-+        if (strcmp(words, "q") != 0) {
-+            // Tokenizing the input string `words` using space as the delimiter.
-+            nextWord = strtok(words, " ");
-+
-+            // Initializing `wordsCounter` to 1.
-+            wordsCounter = 1;
-+
-+            // Looping through each token (word) obtained by strtok until NULL is returned.
-+            while (nextWord) {
-+                // Printing the current word along with its index.
-+                printf("Word #%d is '%s'\n", wordsCounter++, nextWord);
-+
-+                // Getting the next token (word).
-+                nextWord = strtok(NULL, " ");
-+            }
-+        }
-+    } while (strcmp(words, "q") != 0); // Loop until the input string is "q".
-+
-+    // Printing a message indicating the end of the tokenizing words demonstration.
-+    printf("*** End of Tokenizing Words Demo ***\n\n");
-+
-+    /* Version 2 */
-+
-+    /* Version 3 */
-+}
-diff --git a/tokenizing.h b/tokenizing.h
-new file mode 100644
-index 0000000..c452778
---- /dev/null
-+++ b/tokenizing.h
-@@ -0,0 +1,14 @@
-+// TOKENIZING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _TOKENIZING_H_
-+#define _TOKENIZING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h> 
-+#include <string.h> 
-+
-+// Function prototype for the tokenizing function.
-+void tokenizing(void);
-+
-+#endif // End of header guard
diff --git a/manipulating.c b/manipulating.c
index fc824ed..5b05848 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -99,6 +99,36 @@ void manipulating(void) {
 
 
     /* Version 3 */
+
+    printf("*** Start of Searching Strings Demo ***\n"); // Printing the start of the searching strings demo.
+
+    char haystack[BUFFER_SIZE]; // Declaring the haystack string buffer.
+    char needle[BUFFER_SIZE]; // Declaring the needle string buffer.
+    char *occurrence = NULL; // Declaring a pointer for occurrence of the needle in the haystack.
+
+    do {
+        printf("Type the string (q - to quit):\n"); // Prompting the user to type the haystack string.
+        fgets(haystack, BUFFER_SIZE, stdin); // Getting input from the user and storing it in the haystack string.
+        haystack[strlen(haystack) - 1] = '\0'; // Removing the newline character at the end of the haystack string.
+
+        if (strcmp(haystack, "q") != 0) { // Checking if the user entered "q" to quit.
+            printf("Type the substring: \n"); // Prompting the user to type the needle substring.
+            fgets(needle, BUFFER_SIZE, stdin); // Getting input from the user and storing it in the needle string.
+            needle[strlen(needle) - 1] = '\0'; // Removing the newline character at the end of the needle string.
+
+            occurrence = strstr(haystack, needle); // Finding the occurrence of the needle in the haystack.
+
+            if (occurrence) // Checking if the needle was found in the haystack.
+                printf("'%s' found at %d position\n", needle, (int)(occurrence - haystack)); // Printing the position of the needle in the haystack.
+            else
+                printf("Not found\n"); // Printing a message indicating that the needle was not found in the haystack.
+        }
+
+    } while (strcmp(haystack, "q") != 0); // Continuing the loop until the user enters "q" to quit.
+
+    printf("*** End of Searching Strings Demo ***\n\n"); // Printing the end of the searching strings demo.
+
+
 }
 
 
diff --git a/tokenizing-git-log.txt b/tokenizing-git-log.txt
deleted file mode 100644
index 0da9092..0000000
--- a/tokenizing-git-log.txt
+++ /dev/null
@@ -1,775 +0,0 @@
-commit 3184b4025493b76a325542a7995ce146328f5ca3
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Sun Apr 7 21:50:51 2024 -0400
-
-    Tokenizing version 2 added with updated test case excel file and text file
-
-diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
-index 3c5e9e2..21e4d7c 100644
-Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
-diff --git a/tokenizing-test.txt b/tokenizing-test.txt
-index c5a2949..e935389 100644
---- a/tokenizing-test.txt
-+++ b/tokenizing-test.txt
-@@ -1 +1,27 @@
--Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
-\ No newline at end of file
-+*** Start of Tokenizing Words Demo ***
-+Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'*** Start of Tokenizing Phrases Demo ***
-+Type a few phrases separated by comma (q - to quit): 
-+hi, there
-+Phrase #1 is 'hi'
-+Phrase #2 is ' there'
-+Type a few phrases separated by comma (q - to quit): 
-+like, and subscribe, to my, channel
-+Phrase #1 is 'like'
-+Phrase #2 is ' and subscribe'
-+Phrase #3 is ' to my'
-+Phrase #4 is ' channel'
-+Type a few phrases separated by comma (q - to quit): 
-+how, are, you, 
-+Phrase #1 is 'how'
-+Phrase #2 is ' are'
-+Phrase #3 is ' you'
-+Phrase #4 is ' '
-+Type a few phrases separated by comma (q - to quit): 
-+my name is yyz
-+Phrase #1 is 'my name is yyz'
-+Type a few phrases separated by comma (q - to quit): 
-+012
-+Phrase #1 is '012'
-+Type a few phrases separated by comma (q - to quit): 
-+q
-+*** End of Tokenizing phrases Demo ***
-\ No newline at end of file
-diff --git a/tokenizing.c b/tokenizing.c
-index daa8647..6409077 100644
---- a/tokenizing.c
-+++ b/tokenizing.c
-@@ -57,5 +57,33 @@ void tokenizing(void) {
- 
-     /* Version 2 */
- 
-+    printf("*** Start of Tokenizing Phrases Demo ***\n");
-+
-+    char phrases[BUFFER_SIZE];
-+    char *nextPhrase = NULL;
-+    int phrasesCounter;
-+
-+
-+    do
-+    {
-+        printf("Type a few phrases separated by comma (q - to quit): \n"); 
-+        fgets(phrases, BUFFER_SIZE, stdin);
-+        phrases[strlen(phrases) - 1] = '\0';
-+
-+        if (strcmp(phrases, "q") != 0) {
-+            nextPhrase = strtok(phrases, ",");
-+            phrasesCounter = 1;
-+
-+            while (nextPhrase) {
-+                printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
-+                nextPhrase = strtok(NULL, ",");
-+            }
-+        }
-+    } while (strcmp(phrases, "q") != 0);
-+
-+
-+    printf("*** End of Tokenizing phrases Demo ***\n\n");
-+
-+
-     /* Version 3 */
- }
-
-commit e49b5f4e1ac07c3430183b620507c8860e016ddc
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Sun Apr 7 21:13:48 2024 -0400
-
-    Added Version 2 code, test cases, testing log, and git log
-
-diff --git a/Final-Project-Test-Cases.xlsx b/Final-Project-Test-Cases.xlsx
-new file mode 100644
-index 0000000..8c7d6ed
-Binary files /dev/null and b/Final-Project-Test-Cases.xlsx differ
-diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
-index 22c04b3..cdb93cc 100644
-Binary files a/converting-test-cases.xlsx and b/converting-test-cases.xlsx differ
-diff --git a/converting-test.txt b/converting-test.txt
-index c000d00..47e38ed 100644
---- a/converting-test.txt
-+++ b/converting-test.txt
-@@ -1,3 +1,4 @@
-+*** Start of Converting Strings to int Demo ***
- Type an int numeric string (q - to quit):
- 5
- Converted number is 5
-@@ -18,4 +19,24 @@ Type an int numeric string (q - to quit):
- Converted number is 19
- Type an int numeric string (q - to quit):
- 
-+
-+*** Start of Converting Strings to double Demo ***
-+Type the double numeric string (q - to quit):
-+5.32
-+Converted number is 5.320000
-+Type the double numeric string (q - to quit):
-+600.99
-+Converted number is 600.990000
-+Type the double numeric string (q - to quit):
-+12.222
-+Converted number is 12.222000
-+Type the double numeric string (q - to quit):
-+lol
-+Converted number is 0.000000
-+Type the double numeric string (q - to quit):
-+no way
-+Converted number is 0.000000
-+Type the double numeric string (q - to quit):
-+99.9876
-+Converted number is 99.987600
- 
-\ No newline at end of file
-diff --git a/converting.c b/converting.c
-index 8e417a1..210c4e2 100644
---- a/converting.c
-+++ b/converting.c
-@@ -43,15 +43,34 @@ void converting(void) {
- 
-     // Printing a message indicating the end of the demonstration for converting strings to integers.
-     printf("*** End of Converting Strings to int Demo ***\n\n");
--}
-+
- 
- 
- /* Version 2 */
-+    printf("*** Start of Converting Strings to double Demo ***\n"); // Printing a start message
- 
-+    char doubleString[BUFFER_SIZE]; // Declaring a character array to store the input string
-+    double doubleNumber; // Declaring a variable to store the converted double number
- 
-+    do { // Starting a do-while loop
-+        printf("Type the double numeric string (q - to quit):\n"); // Prompting the user to input a double numeric string
-+        fgets(doubleString, BUFFER_SIZE, stdin); // Reading the input string from the user
-+        doubleString[strlen(doubleString) -1] = '\0'; // Removing the trailing newline character from the input string
-+
-+        if ((strcmp(doubleString, "q") != 0)) { // Checking if the input string is not equal to "q"
-+            doubleNumber = atof(doubleString); // Converting the input string to a double number
-+            printf("Converted number is %f\n", doubleNumber); // Printing the converted double number with two decimal places
-+        }
-+    } while (strcmp(doubleString, "q") != 0); // Continuing the loop until the input string is "q"
-+
-+    printf("*** End of Converting Strings to double Demo ***\n\n"); // Printing an end message
- 
--/* Version 3 */
- 
- 
- 
- 
-+/* Version 3 */
-+
-+
-+}
-+
-diff --git a/my_program b/my_program
-new file mode 100755
-index 0000000..2768dbe
-Binary files /dev/null and b/my_program differ
-diff --git a/~$(saksham)manipulating-test-cases.xlsx b/~$(saksham)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..68f7efc
-Binary files /dev/null and b/~$(saksham)manipulating-test-cases.xlsx differ
-
-commit 9023f3f6d405e49d6fcbfd416f200b3b5cf7678d
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 17:03:24 2024 -0400
-
-    delete file
-     Please enter the commit message for your changes. Lines starting
-
-diff --git a/newfile.txt b/newfile.txt
-deleted file mode 100644
-index e69de29..0000000
-
-commit 93294306b9f549715f946d2d3447c5ab4e7d0265
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 17:02:02 2024 -0400
-
-    random file
-
-diff --git a/newfile.txt b/newfile.txt
-new file mode 100644
-index 0000000..e69de29
-
-commit 5d2165e5901182b801e35a3329c56fd3cdfc4314
-Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
-Date:   Wed Apr 3 16:46:18 2024 -0400
-
-    First commit
-
-diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
-new file mode 100644
-index 0000000..0bbf16d
---- /dev/null
-+++ b/(Saksham)manipulting-test.txt
-@@ -0,0 +1,28 @@
-+Type the 1st string (q - to quit):
-+Hello
-+Type the 2nd string:
-+ Saksham
-+Concatenated string is 'Hello Saksham'
-+Type the 1st string (q - to quit):
-+Hi
-+Type the 2nd string:
-+There
-+Concatenated string is 'HiThere'
-+Type the 1st string (q - to quit):
-+my
-+Type the 2nd string:
-+q
-+Concatenated string is 'myq'
-+Type the 1st string (q - to quit):
-+q
-+*** End of Concatenating Strings Demo ***
-+Type the 1st string (q - to quit):
-+BE A HERO NOT A COWARD
-+Type the 2nd string:
-+NOT A COWARD
-+Concatenated string is 'BE A HERO NOT A COWARDNoguilt'
-+Type the 1st string (q - to quit):
-+No
-+Type the 2nd string:
-+guilt
-+Concatenated string is 'Noguilt'
-diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..c58c27f
-Binary files /dev/null and b/(Victor)manipulating-test-cases.xlsx differ
-diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
-new file mode 100644
-index 0000000..7a8fda1
---- /dev/null
-+++ b/(Victor)manipulating-test.txt
-@@ -0,0 +1,28 @@
-+Type the 1st string (q - to quit):
-+mynameis
-+Type the 2nd string:
-+Mordi
-+Concatenated string is 'mynameisMordi'
-+Type the 1st string (q - to quit):
-+no
-+Type the 2nd string:
-+lmk
-+Concatenated string is 'no lmk'
-+Type the 1st string (q - to quit):
-+CPR.   
-+Type the 2nd string:
-+PROJECT
-+Concatenated string is 'CPR.   PROJECT'
-+Type the 1st string (q - to quit):
-+Iphone          
-+Type the 2nd string:
-+is my fav
-+Concatenated string is 'Iphone is my fav'
-+Type the 1st string (q - to quit):
-+CP R
-+Type the 2nd string:
-+Cp r
-+Concatenated string is 'CP RCp r'
-+Type the 1st string (q - to quit):
-+q
-+*** End of Concatenating Strings Demo ***
-diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..f6356d1
-Binary files /dev/null and b/(saksham)manipulating-test-cases.xlsx differ
-diff --git a/.DS_Store b/.DS_Store
-new file mode 100644
-index 0000000..019d636
-Binary files /dev/null and b/.DS_Store differ
-diff --git a/Final-Project-Plan (1).xlsx b/Final-Project-Plan (1).xlsx
-new file mode 100644
-index 0000000..32132b1
-Binary files /dev/null and b/Final-Project-Plan (1).xlsx differ
-diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
-new file mode 100644
-index 0000000..22c04b3
-Binary files /dev/null and b/converting-test-cases.xlsx differ
-diff --git a/converting-test.txt b/converting-test.txt
-new file mode 100644
-index 0000000..c000d00
---- /dev/null
-+++ b/converting-test.txt
-@@ -0,0 +1,21 @@
-+Type an int numeric string (q - to quit):
-+5
-+Converted number is 5
-+Type an int numeric string (q - to quit):
-+8910
-+Converted number is 8910
-+Type an int numeric string (q - to quit):
-+apple
-+Converted number is 0
-+Type an int numeric string (q - to quit):
-+I_LOVE_CPR
-+Converted number is 0
-+Type an int numeric string (q - to quit):
-+200
-+Converted number is 200
-+Type an int numeric string (q - to quit):
-+19 23
-+Converted number is 19
-+Type an int numeric string (q - to quit):
-+
-+
-\ No newline at end of file
-diff --git a/converting.c b/converting.c
-new file mode 100644
-index 0000000..8e417a1
---- /dev/null
-+++ b/converting.c
-@@ -0,0 +1,57 @@
-+// Version 1
-+
-+// This line  `#define _CRT_SECURE_NO_WARNINGS` is to disable certain warnings related to standard library functions in Windows.
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Defining the size of the buffer to be used for storing the input string.
-+#define BUFFER_SIZE 80
-+
-+// Including the header file `converting.h`, which likely contains function prototypes needed for the `converting` function.
-+#include "converting.h"
-+
-+// Commenting indicating the relation of the `converting` function to the VI (Version 1) of the code.
-+// VI
-+
-+// Defining the function `converting`, which takes no arguments and returns nothing (`void`).
-+void converting(void) {
-+    // Printing a message indicating the start of the demonstration for converting strings to integers.
-+    printf("*** Start of Converting Strings to int Demo ***\n");
-+
-+    // Declaring an array of characters named `intString` with a size defined by the macro `BUFFER_SIZE`.
-+    char intString[BUFFER_SIZE];
-+
-+    // Declaring an integer variable `intNumber` which will hold the converted integer value.
-+    int intNumber;
-+
-+    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {
-+        // Prompting the user to type an integer numeric string.
-+        printf("Type an int numeric string (q - to quit):\n"); 
-+
-+        // Reading the input string from the standard input and store it in `intString`.
-+        fgets(intString, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of the input string.
-+        intString[strlen(intString) - 1] = '\0';
-+
-+        // Converting the string `intString` to an integer using the `atoi` function and store the result in `intNumber`.
-+        if (strcmp(intString, "q") != 0) {
-+            intNumber = atoi(intString);
-+            printf("Converted number is %d\n", intNumber);
-+        }
-+    } while (strcmp(intString, "q") != 0);
-+
-+    // Printing a message indicating the end of the demonstration for converting strings to integers.
-+    printf("*** End of Converting Strings to int Demo ***\n\n");
-+}
-+
-+
-+/* Version 2 */
-+
-+
-+
-+/* Version 3 */
-+
-+
-+
-+
-diff --git a/converting.h b/converting.h
-new file mode 100644
-index 0000000..e229834
---- /dev/null
-+++ b/converting.h
-@@ -0,0 +1,15 @@
-+// CONVERTING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _CONVERTING_H_
-+#define _CONVERTING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h> 
-+#include <string.h> 
-+#include <stdlib.h>
-+
-+// Function prototype for the converting function.
-+void converting(void);
-+
-+#endif // End of header guard
-diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
-new file mode 100644
-index 0000000..8447936
-Binary files /dev/null and b/fundamentals-test-cases.xlsx differ
-diff --git a/fundamentals-test.txt b/fundamentals-test.txt
-new file mode 100644
-index 0000000..d43c9c0
---- /dev/null
-+++ b/fundamentals-test.txt
-@@ -0,0 +1,29 @@
-+Type not empty string (q- to quit):
-+hello guys
-+Type the character position within the string: 
-+2
-+The character found at 2 position is 'l'
-+Type not empty string (q- to quit):
-+BeAlright       
-+Type the character position within the string: 
-+6
-+The character found at 6 position is 'g'
-+Type not empty string (q- to quit):
-+lllllllll
-+Type the character position within the string: 
-+20
-+Too big... Position reduced to max. available
-+The character found at 8 position is 'l'
-+Type not empty string (q- to quit):
-+q
-+*** End of Indexing Strings Demo ***
-+Type not empty string (q- to quit):
-+sjncsa/';';
-+Type the character position within the string: 
-+8
-+The character found at 8 position is ';'
-+Type not empty string (q- to quit):
-+12345LAB
-+Type the character position within the string: 
-+2
-+The character found at 2 position is '3'
-diff --git a/fundamentals.c b/fundamentals.c
-new file mode 100644
-index 0000000..86d67c0
---- /dev/null
-+++ b/fundamentals.c
-@@ -0,0 +1,71 @@
-+#include "fundamentals.h"
-+
-+// Disable certain warnings related to standard library functions in Windows
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Define buffer size for storing strings
-+#define BUFFER_SIZE 80 
-+
-+// Define size for input buffer storing numeric inputs
-+#define NUM_INPUT_SIZE 10
-+
-+// Include the header file again to access its functionality
-+#include "fundamentals.h"
-+
-+// Define the function `fundamentals`
-+void fundamentals (void) {
-+    // Start of the indexing strings demonstration
-+    printf("*** Start of Indexing Strings Demo ***\n");
-+
-+    // Declare a buffer to store the input string
-+    char buffer1 [BUFFER_SIZE];
-+
-+    // Declare a buffer to store numeric input
-+    char numInput [NUM_INPUT_SIZE];
-+
-+    // Declare a variable to store the position of the character
-+    size_t position;
-+
-+    // Start a loop for user interaction
-+    do
-+    {
-+        // Prompt the user to input a non-empty string
-+        printf("Type not empty string (q- to quit):\n");
-+        
-+        // Read the input string from the user
-+        fgets (buffer1, BUFFER_SIZE, stdin);
-+
-+        // Remove the newline character from the input string
-+        buffer1 [strlen(buffer1) - 1] = '\0';
-+
-+        // If the input is not "q", proceed with character position input
-+        if (strcmp (buffer1, "q") != 0) {
-+            // Prompt the user to input the character position within the string
-+            printf(("Type the character position within the string: \n"));
-+            
-+            // Read the numeric input for character position
-+            fgets (numInput, NUM_INPUT_SIZE, stdin) ;
-+            
-+            // Remove the newline character from the numeric input
-+            numInput [strlen (numInput)- 1] = '\0';
-+            
-+            // Convert the numeric input to an integer
-+            position = atoi(numInput);
-+            
-+            // If the position is greater than or equal to the length of the string, adjust it
-+            if (position >= strlen(buffer1))
-+            {
-+                position = strlen(buffer1) - 1;
-+                printf("Too big... Position reduced to max. available\n");
-+            }
-+            
-+            // Print the character found at the specified position within the string
-+            printf ("The character found at %d position is \'%c'\n", (int)position, buffer1[position]);
-+        }
-+    } while (strcmp (buffer1, "q") != 0); // Continue looping until the user inputs "q"
-+
-+    // End of the indexing strings demonstration
-+    printf("*** End of Indexing Strings Demo ***\n\n");
-+
-+    // Version 2 and Version 3 are left empty for future implementations
-+}
-diff --git a/fundamentals.h b/fundamentals.h
-new file mode 100644
-index 0000000..f49fe48
---- /dev/null
-+++ b/fundamentals.h
-@@ -0,0 +1,13 @@
-+// FUNDAMENTALS MODULE HEADER
-+#ifndef _FUNDAMENTALS_H_
-+#define _FUNDAMENTALS_H_
-+
-+// Include necessary standard library headers
-+#include <stdio.h> // For input/output operations
-+#include <string.h> // For string manipulation functions
-+#include <stdlib.h> // For functions like `atoi()` used for string to integer conversion
-+
-+// Declare the fundamentals function prototype
-+void fundamentals (void);
-+
-+#endif // End of header guard
-diff --git a/main.c b/main.c
-new file mode 100644
-index 0000000..43a0e6f
---- /dev/null
-+++ b/main.c
-@@ -0,0 +1,46 @@
-+// Including header files for the different modules
-+#include "fundamentals.h" // For the fundamentals module
-+#include "manipulating.h" // For the manipulating module
-+#include "converting.h"   // For the converting module
-+#include "tokenizing.h"   // For the tokenizing module
-+
-+// Main function of the program
-+int main(void) { 
-+    char buff[10]; // Buffer to store user input
-+    
-+    // Loop to display menu and handle user input
-+    do {
-+        // Displaying menu options
-+        printf("1 - Fundamentals\n");
-+        printf("2 - Manipulation\n");
-+        printf("3 - Converting\n");
-+        printf("4 - Tokenizing\n");
-+        printf("0 - Exit\n");
-+        printf("Which module to run? \n");
-+        
-+        // Reading user input
-+        fgets(buff, 10, stdin);
-+        
-+        // Switch case to handle user choice
-+        switch (buff[0]) {
-+            // If user chooses option 1
-+            case '1': 
-+                fundamentals(); // Call fundamentals function
-+                break;
-+            // If user chooses option 2
-+            case '2': 
-+                manipulating(); // Call manipulating function
-+                break;
-+            // If user chooses option 3
-+            case '3': 
-+                converting(); // Call converting function
-+                break;
-+            // If user chooses option 4
-+            case '4': 
-+                tokenizing(); // Call tokenizing function
-+                break;
-+        }
-+    } while (buff[0] != '0'); // Loop until user chooses to exit
-+    
-+    return 0; // Return 0 to indicate successful execution
-+}
-diff --git a/manipulating.c b/manipulating.c
-new file mode 100644
-index 0000000..e2bab7e
---- /dev/null
-+++ b/manipulating.c
-@@ -0,0 +1,55 @@
-+/* Version 1 */
-+
-+// Including necessary standard library headers.
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+#include "manipulating.h"
-+
-+// Function definition for the manipulating function.
-+void manipulating(void) {
-+    // Printing a message indicating the start of the demonstration for converting strings.
-+    printf("*** Start of Converting Strings Demo ***\n");
-+
-+    // Declaring character arrays `string1` and `string2` to store user input strings.
-+    char string1[BUFFER_SIZE];
-+    char string2[BUFFER_SIZE];
-+
-+    // Start a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {
-+        // Prompting the user to type the 1st string.
-+        printf("Type the 1st string (q - to quit):\n"); 
-+
-+        // Reading the 1st string from the standard input and storing it in `string1`.
-+        fgets(string1, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of `string1`.
-+        string1[strlen(string1) - 1] = '\0';
-+    
-+        // Checking if `string1` is not equal to "q".
-+        if ((strcmp(string1, "q") != 0)) {
-+            // Prompting the user to type the 2nd string.
-+            printf("Type the 2nd string:\n");
-+            
-+            // Reading the 2nd string from the standard input and storing it in `string2`.
-+            fgets(string2, BUFFER_SIZE, stdin);
-+            
-+            // Removing the newline character from the end of `string2`.
-+            string2[strlen(string2) - 1] = '\0';
-+            
-+            // Concatenating `string2` to `string1`.
-+            strcat(string1, string2);
-+            
-+            // Printing the concatenated string.
-+            printf("Concatenated string is '%s'\n", string1);
-+        } 
-+    } while (strcmp(string1, "q") != 0); // Loop continues until `string1` is "q".
-+
-+    // Printing a message indicating the end of the demonstration for concatenating strings.
-+    printf("*** End of Concatenating Strings Demo ***\n\n");
-+
-+    /* Version 2 */
-+
-+    /* Version 3 */
-+}
-+
-+
-diff --git a/manipulating.h b/manipulating.h
-new file mode 100644
-index 0000000..de24853
---- /dev/null
-+++ b/manipulating.h
-@@ -0,0 +1,14 @@
-+// MANIPULATING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _MANIPULATING_H_
-+#define _MANIPULATING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h>
-+#include <string.h>
-+
-+// Function prototype for the manipulating function.
-+void manipulating(void);
-+
-+#endif // End of header guard
-diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
-new file mode 100644
-index 0000000..3c5e9e2
-Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
-diff --git a/tokenizing-test.txt b/tokenizing-test.txt
-new file mode 100644
-index 0000000..c5a2949
---- /dev/null
-+++ b/tokenizing-test.txt
-@@ -0,0 +1 @@
-+Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
-\ No newline at end of file
-diff --git a/tokenizing.c b/tokenizing.c
-new file mode 100644
-index 0000000..daa8647
---- /dev/null
-+++ b/tokenizing.c
-@@ -0,0 +1,61 @@
-+// Defining the macro `_CRT_SECURE_NO_WARNINGS` to disable certain warnings related to standard library functions in Windows.
-+#define _CRT_SECURE_NO_WARNINGS
-+
-+// Defining the size of the buffer to be used for storing words.
-+#define BUFFER_SIZE 300
-+
-+// Including the header file `tokenizing.h`, which likely contains function prototypes needed for the `tokenizing` function.
-+#include "tokenizing.h"
-+
-+// Defining the function `tokenizing`, which takes no arguments and returns nothing (`void`).
-+void tokenizing(void) {
-+    /* Version 1 */
-+    // Printing a message indicating the start of the tokenizing words demonstration.
-+    printf("*** Start of Tokenizing Words Demo ***\n");
-+
-+    // Declaring an array of characters named `words` with a size defined by the macro `BUFFER_SIZE`.
-+    char words[BUFFER_SIZE];
-+
-+    // Declaring a pointer to a character named `nextWord`, initially set to NULL.
-+    char* nextWord = NULL;
-+
-+    // Declaring an integer variable `wordsCounter` to keep track of the number of words.
-+    int wordsCounter;
-+
-+    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
-+    do {   
-+        // Prompting the user to type a few words separated by space.
-+        printf("Type a few words separated by space (q - to quit): \n");
-+
-+        // Reading the input string from the standard input and store it in `words`.
-+        fgets(words, BUFFER_SIZE, stdin);
-+
-+        // Removing the newline character from the end of the input string.
-+        words[strlen(words) - 1] = '\0';
-+
-+        // If the input string is not "q", tokenize the words using strtok function and print each word.
-+        if (strcmp(words, "q") != 0) {
-+            // Tokenizing the input string `words` using space as the delimiter.
-+            nextWord = strtok(words, " ");
-+
-+            // Initializing `wordsCounter` to 1.
-+            wordsCounter = 1;
-+
-+            // Looping through each token (word) obtained by strtok until NULL is returned.
-+            while (nextWord) {
-+                // Printing the current word along with its index.
-+                printf("Word #%d is '%s'\n", wordsCounter++, nextWord);
-+
-+                // Getting the next token (word).
-+                nextWord = strtok(NULL, " ");
-+            }
-+        }
-+    } while (strcmp(words, "q") != 0); // Loop until the input string is "q".
-+
-+    // Printing a message indicating the end of the tokenizing words demonstration.
-+    printf("*** End of Tokenizing Words Demo ***\n\n");
-+
-+    /* Version 2 */
-+
-+    /* Version 3 */
-+}
-diff --git a/tokenizing.h b/tokenizing.h
-new file mode 100644
-index 0000000..c452778
---- /dev/null
-+++ b/tokenizing.h
-@@ -0,0 +1,14 @@
-+// TOKENIZING MODULE HEADER
-+
-+// Header guards to prevent multiple inclusion of the header file.
-+#ifndef _TOKENIZING_H_
-+#define _TOKENIZING_H_
-+
-+// Include necessary standard library headers.
-+#include <stdio.h> 
-+#include <string.h> 
-+
-+// Function prototype for the tokenizing function.
-+void tokenizing(void);
-+
-+#endif // End of header guard
diff --git a/tokenizing-test.txt b/tokenizing-test.txt
index e935389..dec809d 100644
--- a/tokenizing-test.txt
+++ b/tokenizing-test.txt
@@ -24,4 +24,37 @@ Type a few phrases separated by comma (q - to quit):
 Phrase #1 is '012'
 Type a few phrases separated by comma (q - to quit): 
 q
-*** End of Tokenizing phrases Demo ***
\ No newline at end of file
+*** End of Tokenizing phrases Demo ***
+
+*** Start of Tokenizing Sentences Demo ***
+Type a few sentences separated by dot (q - to quit):
+hi.there
+Sentence #1 is 'hi'
+Sentence #2 is 'there'
+Type a few sentences separated by dot (q - to quit):
+hello.there.iam.noone
+Sentence #1 is 'hello'
+Sentence #2 is 'there'
+Sentence #3 is 'iam'
+Sentence #4 is 'noone'
+Type a few sentences separated by dot (q - to quit):
+i.want.to.buy.a.car
+Sentence #1 is 'i'
+Sentence #2 is 'want'
+Sentence #3 is 'to'
+Sentence #4 is 'buy'
+Sentence #5 is 'a'
+Sentence #6 is 'car'
+Type a few sentences separated by dot (q - to quit):
+LIFE...IS...BEAUTIFUL
+Sentence #1 is 'LIFE'
+Sentence #2 is 'IS'
+Sentence #3 is 'BEAUTIFUL'
+Type a few sentences separated by dot (q - to quit):
+1..2.3
+Sentence #1 is '1'
+Sentence #2 is '2'
+Sentence #3 is '3'
+Type a few sentences separated by dot (q - to quit):
+q
+*** End of Tokenizing Sentences Demo ***
\ No newline at end of file
diff --git a/tokenizing.c b/tokenizing.c
index 01dc441..810eff1 100644
--- a/tokenizing.c
+++ b/tokenizing.c
@@ -105,4 +105,30 @@ void tokenizing(void) {
 
 
     /* Version 3 */
+    printf("*** Start of Tokenizing Sentences Demo ***\n"); // Printing the start of the tokenizing sentences demo.
+
+    char sentences[BUFFER_SIZE]; // Declaring the sentences string buffer.
+    char *nextSentence = NULL; // Declaring a pointer for the next sentence token.
+    int sentencesCounter; // Declaring a counter for sentences.
+
+    do {
+        printf("Type a few sentences separated by dot (q - to quit):\n"); // Prompting the user to type sentences.
+        fgets(sentences, BUFFER_SIZE, stdin); // Getting input from the user and storing it in the sentences string.
+        sentences[strlen(sentences) - 1] = '\0'; // Removing the newline character at the end of the sentences string.
+
+        if (strcmp(sentences, "q") != 0) { // Checking if the user entered "q" to quit.
+            nextSentence = strtok(sentences, "."); // Tokenizing the sentences by splitting them at periods.
+            sentencesCounter = 1; // Initializing the sentences counter.
+
+            while (nextSentence) { // Looping through each tokenized sentence.
+                printf("Sentence #%d is '%s'\n", sentencesCounter++, nextSentence); // Printing the current sentence.
+                nextSentence = strtok(NULL, "."); // Getting the next sentence token.
+            }
+        }
+
+    } while (strcmp(sentences, "q") != 0); // Continuing the loop until the user enters "q" to quit.
+
+    printf("*** End of Tokenizing Sentences Demo ***\n\n"); // Printing the end of the tokenizing sentences demo.
+
+
 }

commit 27c8240d6aa87769fd68fc4de368f4dc31bd13a9
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Mon Apr 8 16:29:41 2024 -0400

    extra files deletation

diff --git a/.DS_Store b/.DS_Store
deleted file mode 100644
index 019d636..0000000
Binary files a/.DS_Store and /dev/null differ

commit eaf55f89199f9523b4b12fc906fffed270b4da8d
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Mon Apr 8 16:25:33 2024 -0400

    changing some files

diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
deleted file mode 100644
index 4e2538e..0000000
Binary files a/(Victor)manipulating-test-cases.xlsx and /dev/null differ
diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
deleted file mode 100644
index 072b43e..0000000
Binary files a/(saksham)manipulating-test-cases.xlsx and /dev/null differ
diff --git a/Final-Project-Plan (1).xlsx b/Final-Project-Plan (1).xlsx
index 32132b1..e931a70 100644
Binary files a/Final-Project-Plan (1).xlsx and b/Final-Project-Plan (1).xlsx differ
diff --git a/Final-Project-Test-Cases.xlsx b/Final-Project-Test-Cases.xlsx
index 8c7d6ed..ece34a0 100644
Binary files a/Final-Project-Test-Cases.xlsx and b/Final-Project-Test-Cases.xlsx differ
diff --git a/converting-git-log.txt b/converting-git-log.txt
new file mode 100644
index 0000000..4711040
--- /dev/null
+++ b/converting-git-log.txt
@@ -0,0 +1,692 @@
+commit e49b5f4e1ac07c3430183b620507c8860e016ddc
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Sun Apr 7 21:13:48 2024 -0400
+
+    Added Version 2 code, test cases, testing log, and git log
+
+diff --git a/Final-Project-Test-Cases.xlsx b/Final-Project-Test-Cases.xlsx
+new file mode 100644
+index 0000000..8c7d6ed
+Binary files /dev/null and b/Final-Project-Test-Cases.xlsx differ
+diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
+index 22c04b3..cdb93cc 100644
+Binary files a/converting-test-cases.xlsx and b/converting-test-cases.xlsx differ
+diff --git a/converting-test.txt b/converting-test.txt
+index c000d00..47e38ed 100644
+--- a/converting-test.txt
++++ b/converting-test.txt
+@@ -1,3 +1,4 @@
++*** Start of Converting Strings to int Demo ***
+ Type an int numeric string (q - to quit):
+ 5
+ Converted number is 5
+@@ -18,4 +19,24 @@ Type an int numeric string (q - to quit):
+ Converted number is 19
+ Type an int numeric string (q - to quit):
+ 
++
++*** Start of Converting Strings to double Demo ***
++Type the double numeric string (q - to quit):
++5.32
++Converted number is 5.320000
++Type the double numeric string (q - to quit):
++600.99
++Converted number is 600.990000
++Type the double numeric string (q - to quit):
++12.222
++Converted number is 12.222000
++Type the double numeric string (q - to quit):
++lol
++Converted number is 0.000000
++Type the double numeric string (q - to quit):
++no way
++Converted number is 0.000000
++Type the double numeric string (q - to quit):
++99.9876
++Converted number is 99.987600
+ 
+\ No newline at end of file
+diff --git a/converting.c b/converting.c
+index 8e417a1..210c4e2 100644
+--- a/converting.c
++++ b/converting.c
+@@ -43,15 +43,34 @@ void converting(void) {
+ 
+     // Printing a message indicating the end of the demonstration for converting strings to integers.
+     printf("*** End of Converting Strings to int Demo ***\n\n");
+-}
++
+ 
+ 
+ /* Version 2 */
++    printf("*** Start of Converting Strings to double Demo ***\n"); // Printing a start message
+ 
++    char doubleString[BUFFER_SIZE]; // Declaring a character array to store the input string
++    double doubleNumber; // Declaring a variable to store the converted double number
+ 
++    do { // Starting a do-while loop
++        printf("Type the double numeric string (q - to quit):\n"); // Prompting the user to input a double numeric string
++        fgets(doubleString, BUFFER_SIZE, stdin); // Reading the input string from the user
++        doubleString[strlen(doubleString) -1] = '\0'; // Removing the trailing newline character from the input string
++
++        if ((strcmp(doubleString, "q") != 0)) { // Checking if the input string is not equal to "q"
++            doubleNumber = atof(doubleString); // Converting the input string to a double number
++            printf("Converted number is %f\n", doubleNumber); // Printing the converted double number with two decimal places
++        }
++    } while (strcmp(doubleString, "q") != 0); // Continuing the loop until the input string is "q"
++
++    printf("*** End of Converting Strings to double Demo ***\n\n"); // Printing an end message
+ 
+-/* Version 3 */
+ 
+ 
+ 
+ 
++/* Version 3 */
++
++
++}
++
+diff --git a/my_program b/my_program
+new file mode 100755
+index 0000000..2768dbe
+Binary files /dev/null and b/my_program differ
+diff --git a/~$(saksham)manipulating-test-cases.xlsx b/~$(saksham)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..68f7efc
+Binary files /dev/null and b/~$(saksham)manipulating-test-cases.xlsx differ
+
+commit 9023f3f6d405e49d6fcbfd416f200b3b5cf7678d
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 17:03:24 2024 -0400
+
+    delete file
+     Please enter the commit message for your changes. Lines starting
+
+diff --git a/newfile.txt b/newfile.txt
+deleted file mode 100644
+index e69de29..0000000
+
+commit 93294306b9f549715f946d2d3447c5ab4e7d0265
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 17:02:02 2024 -0400
+
+    random file
+
+diff --git a/newfile.txt b/newfile.txt
+new file mode 100644
+index 0000000..e69de29
+
+commit 5d2165e5901182b801e35a3329c56fd3cdfc4314
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 16:46:18 2024 -0400
+
+    First commit
+
+diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
+new file mode 100644
+index 0000000..0bbf16d
+--- /dev/null
++++ b/(Saksham)manipulting-test.txt
+@@ -0,0 +1,28 @@
++Type the 1st string (q - to quit):
++Hello
++Type the 2nd string:
++ Saksham
++Concatenated string is 'Hello Saksham'
++Type the 1st string (q - to quit):
++Hi
++Type the 2nd string:
++There
++Concatenated string is 'HiThere'
++Type the 1st string (q - to quit):
++my
++Type the 2nd string:
++q
++Concatenated string is 'myq'
++Type the 1st string (q - to quit):
++q
++*** End of Concatenating Strings Demo ***
++Type the 1st string (q - to quit):
++BE A HERO NOT A COWARD
++Type the 2nd string:
++NOT A COWARD
++Concatenated string is 'BE A HERO NOT A COWARDNoguilt'
++Type the 1st string (q - to quit):
++No
++Type the 2nd string:
++guilt
++Concatenated string is 'Noguilt'
+diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..c58c27f
+Binary files /dev/null and b/(Victor)manipulating-test-cases.xlsx differ
+diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
+new file mode 100644
+index 0000000..7a8fda1
+--- /dev/null
++++ b/(Victor)manipulating-test.txt
+@@ -0,0 +1,28 @@
++Type the 1st string (q - to quit):
++mynameis
++Type the 2nd string:
++Mordi
++Concatenated string is 'mynameisMordi'
++Type the 1st string (q - to quit):
++no
++Type the 2nd string:
++lmk
++Concatenated string is 'no lmk'
++Type the 1st string (q - to quit):
++CPR.   
++Type the 2nd string:
++PROJECT
++Concatenated string is 'CPR.   PROJECT'
++Type the 1st string (q - to quit):
++Iphone          
++Type the 2nd string:
++is my fav
++Concatenated string is 'Iphone is my fav'
++Type the 1st string (q - to quit):
++CP R
++Type the 2nd string:
++Cp r
++Concatenated string is 'CP RCp r'
++Type the 1st string (q - to quit):
++q
++*** End of Concatenating Strings Demo ***
+diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..f6356d1
+Binary files /dev/null and b/(saksham)manipulating-test-cases.xlsx differ
+diff --git a/.DS_Store b/.DS_Store
+new file mode 100644
+index 0000000..019d636
+Binary files /dev/null and b/.DS_Store differ
+diff --git a/Final-Project-Plan (1).xlsx b/Final-Project-Plan (1).xlsx
+new file mode 100644
+index 0000000..32132b1
+Binary files /dev/null and b/Final-Project-Plan (1).xlsx differ
+diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
+new file mode 100644
+index 0000000..22c04b3
+Binary files /dev/null and b/converting-test-cases.xlsx differ
+diff --git a/converting-test.txt b/converting-test.txt
+new file mode 100644
+index 0000000..c000d00
+--- /dev/null
++++ b/converting-test.txt
+@@ -0,0 +1,21 @@
++Type an int numeric string (q - to quit):
++5
++Converted number is 5
++Type an int numeric string (q - to quit):
++8910
++Converted number is 8910
++Type an int numeric string (q - to quit):
++apple
++Converted number is 0
++Type an int numeric string (q - to quit):
++I_LOVE_CPR
++Converted number is 0
++Type an int numeric string (q - to quit):
++200
++Converted number is 200
++Type an int numeric string (q - to quit):
++19 23
++Converted number is 19
++Type an int numeric string (q - to quit):
++
++
+\ No newline at end of file
+diff --git a/converting.c b/converting.c
+new file mode 100644
+index 0000000..8e417a1
+--- /dev/null
++++ b/converting.c
+@@ -0,0 +1,57 @@
++// Version 1
++
++// This line  `#define _CRT_SECURE_NO_WARNINGS` is to disable certain warnings related to standard library functions in Windows.
++#define _CRT_SECURE_NO_WARNINGS
++
++// Defining the size of the buffer to be used for storing the input string.
++#define BUFFER_SIZE 80
++
++// Including the header file `converting.h`, which likely contains function prototypes needed for the `converting` function.
++#include "converting.h"
++
++// Commenting indicating the relation of the `converting` function to the VI (Version 1) of the code.
++// VI
++
++// Defining the function `converting`, which takes no arguments and returns nothing (`void`).
++void converting(void) {
++    // Printing a message indicating the start of the demonstration for converting strings to integers.
++    printf("*** Start of Converting Strings to int Demo ***\n");
++
++    // Declaring an array of characters named `intString` with a size defined by the macro `BUFFER_SIZE`.
++    char intString[BUFFER_SIZE];
++
++    // Declaring an integer variable `intNumber` which will hold the converted integer value.
++    int intNumber;
++
++    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {
++        // Prompting the user to type an integer numeric string.
++        printf("Type an int numeric string (q - to quit):\n"); 
++
++        // Reading the input string from the standard input and store it in `intString`.
++        fgets(intString, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of the input string.
++        intString[strlen(intString) - 1] = '\0';
++
++        // Converting the string `intString` to an integer using the `atoi` function and store the result in `intNumber`.
++        if (strcmp(intString, "q") != 0) {
++            intNumber = atoi(intString);
++            printf("Converted number is %d\n", intNumber);
++        }
++    } while (strcmp(intString, "q") != 0);
++
++    // Printing a message indicating the end of the demonstration for converting strings to integers.
++    printf("*** End of Converting Strings to int Demo ***\n\n");
++}
++
++
++/* Version 2 */
++
++
++
++/* Version 3 */
++
++
++
++
+diff --git a/converting.h b/converting.h
+new file mode 100644
+index 0000000..e229834
+--- /dev/null
++++ b/converting.h
+@@ -0,0 +1,15 @@
++// CONVERTING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h> 
++#include <string.h> 
++#include <stdlib.h>
++
++// Function prototype for the converting function.
++void converting(void);
++
++#endif // End of header guard
+diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
+new file mode 100644
+index 0000000..8447936
+Binary files /dev/null and b/fundamentals-test-cases.xlsx differ
+diff --git a/fundamentals-test.txt b/fundamentals-test.txt
+new file mode 100644
+index 0000000..d43c9c0
+--- /dev/null
++++ b/fundamentals-test.txt
+@@ -0,0 +1,29 @@
++Type not empty string (q- to quit):
++hello guys
++Type the character position within the string: 
++2
++The character found at 2 position is 'l'
++Type not empty string (q- to quit):
++BeAlright       
++Type the character position within the string: 
++6
++The character found at 6 position is 'g'
++Type not empty string (q- to quit):
++lllllllll
++Type the character position within the string: 
++20
++Too big... Position reduced to max. available
++The character found at 8 position is 'l'
++Type not empty string (q- to quit):
++q
++*** End of Indexing Strings Demo ***
++Type not empty string (q- to quit):
++sjncsa/';';
++Type the character position within the string: 
++8
++The character found at 8 position is ';'
++Type not empty string (q- to quit):
++12345LAB
++Type the character position within the string: 
++2
++The character found at 2 position is '3'
+diff --git a/fundamentals.c b/fundamentals.c
+new file mode 100644
+index 0000000..86d67c0
+--- /dev/null
++++ b/fundamentals.c
+@@ -0,0 +1,71 @@
++#include "fundamentals.h"
++
++// Disable certain warnings related to standard library functions in Windows
++#define _CRT_SECURE_NO_WARNINGS
++
++// Define buffer size for storing strings
++#define BUFFER_SIZE 80 
++
++// Define size for input buffer storing numeric inputs
++#define NUM_INPUT_SIZE 10
++
++// Include the header file again to access its functionality
++#include "fundamentals.h"
++
++// Define the function `fundamentals`
++void fundamentals (void) {
++    // Start of the indexing strings demonstration
++    printf("*** Start of Indexing Strings Demo ***\n");
++
++    // Declare a buffer to store the input string
++    char buffer1 [BUFFER_SIZE];
++
++    // Declare a buffer to store numeric input
++    char numInput [NUM_INPUT_SIZE];
++
++    // Declare a variable to store the position of the character
++    size_t position;
++
++    // Start a loop for user interaction
++    do
++    {
++        // Prompt the user to input a non-empty string
++        printf("Type not empty string (q- to quit):\n");
++        
++        // Read the input string from the user
++        fgets (buffer1, BUFFER_SIZE, stdin);
++
++        // Remove the newline character from the input string
++        buffer1 [strlen(buffer1) - 1] = '\0';
++
++        // If the input is not "q", proceed with character position input
++        if (strcmp (buffer1, "q") != 0) {
++            // Prompt the user to input the character position within the string
++            printf(("Type the character position within the string: \n"));
++            
++            // Read the numeric input for character position
++            fgets (numInput, NUM_INPUT_SIZE, stdin) ;
++            
++            // Remove the newline character from the numeric input
++            numInput [strlen (numInput)- 1] = '\0';
++            
++            // Convert the numeric input to an integer
++            position = atoi(numInput);
++            
++            // If the position is greater than or equal to the length of the string, adjust it
++            if (position >= strlen(buffer1))
++            {
++                position = strlen(buffer1) - 1;
++                printf("Too big... Position reduced to max. available\n");
++            }
++            
++            // Print the character found at the specified position within the string
++            printf ("The character found at %d position is \'%c'\n", (int)position, buffer1[position]);
++        }
++    } while (strcmp (buffer1, "q") != 0); // Continue looping until the user inputs "q"
++
++    // End of the indexing strings demonstration
++    printf("*** End of Indexing Strings Demo ***\n\n");
++
++    // Version 2 and Version 3 are left empty for future implementations
++}
+diff --git a/fundamentals.h b/fundamentals.h
+new file mode 100644
+index 0000000..f49fe48
+--- /dev/null
++++ b/fundamentals.h
+@@ -0,0 +1,13 @@
++// FUNDAMENTALS MODULE HEADER
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++// Include necessary standard library headers
++#include <stdio.h> // For input/output operations
++#include <string.h> // For string manipulation functions
++#include <stdlib.h> // For functions like `atoi()` used for string to integer conversion
++
++// Declare the fundamentals function prototype
++void fundamentals (void);
++
++#endif // End of header guard
+diff --git a/main.c b/main.c
+new file mode 100644
+index 0000000..43a0e6f
+--- /dev/null
++++ b/main.c
+@@ -0,0 +1,46 @@
++// Including header files for the different modules
++#include "fundamentals.h" // For the fundamentals module
++#include "manipulating.h" // For the manipulating module
++#include "converting.h"   // For the converting module
++#include "tokenizing.h"   // For the tokenizing module
++
++// Main function of the program
++int main(void) { 
++    char buff[10]; // Buffer to store user input
++    
++    // Loop to display menu and handle user input
++    do {
++        // Displaying menu options
++        printf("1 - Fundamentals\n");
++        printf("2 - Manipulation\n");
++        printf("3 - Converting\n");
++        printf("4 - Tokenizing\n");
++        printf("0 - Exit\n");
++        printf("Which module to run? \n");
++        
++        // Reading user input
++        fgets(buff, 10, stdin);
++        
++        // Switch case to handle user choice
++        switch (buff[0]) {
++            // If user chooses option 1
++            case '1': 
++                fundamentals(); // Call fundamentals function
++                break;
++            // If user chooses option 2
++            case '2': 
++                manipulating(); // Call manipulating function
++                break;
++            // If user chooses option 3
++            case '3': 
++                converting(); // Call converting function
++                break;
++            // If user chooses option 4
++            case '4': 
++                tokenizing(); // Call tokenizing function
++                break;
++        }
++    } while (buff[0] != '0'); // Loop until user chooses to exit
++    
++    return 0; // Return 0 to indicate successful execution
++}
+diff --git a/manipulating.c b/manipulating.c
+new file mode 100644
+index 0000000..e2bab7e
+--- /dev/null
++++ b/manipulating.c
+@@ -0,0 +1,55 @@
++/* Version 1 */
++
++// Including necessary standard library headers.
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// Function definition for the manipulating function.
++void manipulating(void) {
++    // Printing a message indicating the start of the demonstration for converting strings.
++    printf("*** Start of Converting Strings Demo ***\n");
++
++    // Declaring character arrays `string1` and `string2` to store user input strings.
++    char string1[BUFFER_SIZE];
++    char string2[BUFFER_SIZE];
++
++    // Start a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {
++        // Prompting the user to type the 1st string.
++        printf("Type the 1st string (q - to quit):\n"); 
++
++        // Reading the 1st string from the standard input and storing it in `string1`.
++        fgets(string1, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of `string1`.
++        string1[strlen(string1) - 1] = '\0';
++    
++        // Checking if `string1` is not equal to "q".
++        if ((strcmp(string1, "q") != 0)) {
++            // Prompting the user to type the 2nd string.
++            printf("Type the 2nd string:\n");
++            
++            // Reading the 2nd string from the standard input and storing it in `string2`.
++            fgets(string2, BUFFER_SIZE, stdin);
++            
++            // Removing the newline character from the end of `string2`.
++            string2[strlen(string2) - 1] = '\0';
++            
++            // Concatenating `string2` to `string1`.
++            strcat(string1, string2);
++            
++            // Printing the concatenated string.
++            printf("Concatenated string is '%s'\n", string1);
++        } 
++    } while (strcmp(string1, "q") != 0); // Loop continues until `string1` is "q".
++
++    // Printing a message indicating the end of the demonstration for concatenating strings.
++    printf("*** End of Concatenating Strings Demo ***\n\n");
++
++    /* Version 2 */
++
++    /* Version 3 */
++}
++
++
+diff --git a/manipulating.h b/manipulating.h
+new file mode 100644
+index 0000000..de24853
+--- /dev/null
++++ b/manipulating.h
+@@ -0,0 +1,14 @@
++// MANIPULATING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h>
++#include <string.h>
++
++// Function prototype for the manipulating function.
++void manipulating(void);
++
++#endif // End of header guard
+diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
+new file mode 100644
+index 0000000..3c5e9e2
+Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
+diff --git a/tokenizing-test.txt b/tokenizing-test.txt
+new file mode 100644
+index 0000000..c5a2949
+--- /dev/null
++++ b/tokenizing-test.txt
+@@ -0,0 +1 @@
++Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
+\ No newline at end of file
+diff --git a/tokenizing.c b/tokenizing.c
+new file mode 100644
+index 0000000..daa8647
+--- /dev/null
++++ b/tokenizing.c
+@@ -0,0 +1,61 @@
++// Defining the macro `_CRT_SECURE_NO_WARNINGS` to disable certain warnings related to standard library functions in Windows.
++#define _CRT_SECURE_NO_WARNINGS
++
++// Defining the size of the buffer to be used for storing words.
++#define BUFFER_SIZE 300
++
++// Including the header file `tokenizing.h`, which likely contains function prototypes needed for the `tokenizing` function.
++#include "tokenizing.h"
++
++// Defining the function `tokenizing`, which takes no arguments and returns nothing (`void`).
++void tokenizing(void) {
++    /* Version 1 */
++    // Printing a message indicating the start of the tokenizing words demonstration.
++    printf("*** Start of Tokenizing Words Demo ***\n");
++
++    // Declaring an array of characters named `words` with a size defined by the macro `BUFFER_SIZE`.
++    char words[BUFFER_SIZE];
++
++    // Declaring a pointer to a character named `nextWord`, initially set to NULL.
++    char* nextWord = NULL;
++
++    // Declaring an integer variable `wordsCounter` to keep track of the number of words.
++    int wordsCounter;
++
++    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {   
++        // Prompting the user to type a few words separated by space.
++        printf("Type a few words separated by space (q - to quit): \n");
++
++        // Reading the input string from the standard input and store it in `words`.
++        fgets(words, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of the input string.
++        words[strlen(words) - 1] = '\0';
++
++        // If the input string is not "q", tokenize the words using strtok function and print each word.
++        if (strcmp(words, "q") != 0) {
++            // Tokenizing the input string `words` using space as the delimiter.
++            nextWord = strtok(words, " ");
++
++            // Initializing `wordsCounter` to 1.
++            wordsCounter = 1;
++
++            // Looping through each token (word) obtained by strtok until NULL is returned.
++            while (nextWord) {
++                // Printing the current word along with its index.
++                printf("Word #%d is '%s'\n", wordsCounter++, nextWord);
++
++                // Getting the next token (word).
++                nextWord = strtok(NULL, " ");
++            }
++        }
++    } while (strcmp(words, "q") != 0); // Loop until the input string is "q".
++
++    // Printing a message indicating the end of the tokenizing words demonstration.
++    printf("*** End of Tokenizing Words Demo ***\n\n");
++
++    /* Version 2 */
++
++    /* Version 3 */
++}
+diff --git a/tokenizing.h b/tokenizing.h
+new file mode 100644
+index 0000000..c452778
+--- /dev/null
++++ b/tokenizing.h
+@@ -0,0 +1,14 @@
++// TOKENIZING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _TOKENIZING_H_
++#define _TOKENIZING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h> 
++#include <string.h> 
++
++// Function prototype for the tokenizing function.
++void tokenizing(void);
++
++#endif // End of header guard
diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
deleted file mode 100644
index cdb93cc..0000000
Binary files a/converting-test-cases.xlsx and /dev/null differ
diff --git a/fundamental-git-log.txt b/fundamental-git-log.txt
new file mode 100644
index 0000000..6710fa8
--- /dev/null
+++ b/fundamental-git-log.txt
@@ -0,0 +1,1091 @@
+commit 3eb879866a61a73875208acf712a4631ba61ec7c
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Mon Apr 8 15:28:18 2024 -0400
+
+    adding fundamentals for version 2
+
+diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
+index 8447936..df0c4ea 100644
+Binary files a/fundamentals-test-cases.xlsx and b/fundamentals-test-cases.xlsx differ
+diff --git a/fundamentals-test.txt b/fundamentals-test.txt
+index d43c9c0..568a325 100644
+--- a/fundamentals-test.txt
++++ b/fundamentals-test.txt
+@@ -1,3 +1,4 @@
++*** Start of Indexing Strings Demo ***
+ Type not empty string (q- to quit):
+ hello guys
+ Type the character position within the string: 
+@@ -26,4 +27,26 @@ Type not empty string (q- to quit):
+ 12345LAB
+ Type the character position within the string: 
+ 2
+-The character found at 2 position is '3'
++The character found at 2 position is '3'
++
++
++*** Start of Measuring Strings Demo ***
++Type a string (q - to quit):
++hello
++The length of 'hello' is 5 characters
++Type a string (q - to quit):
++ihaveacat
++The length of 'ihaveacat' is 9 characters
++Type a string (q - to quit):
++ilovemango
++The length of 'ilovemango' is 10 characters
++Type a string (q - to quit):
++0909898987766
++The length of '0909898987766' is 13 characters
++Type a string (q - to quit):
++mycatsnameisKenzo
++The length of 'mycatsnameisKenzo' is 17 characters
++Type a string (q - to quit):
++q
++*** End of Measuring Strings Demo ***
++
+diff --git a/fundamentals.c b/fundamentals.c
+index 86d67c0..a1a8aa7 100644
+--- a/fundamentals.c
++++ b/fundamentals.c
+@@ -67,5 +67,34 @@ void fundamentals (void) {
+     // End of the indexing strings demonstration
+     printf("*** End of Indexing Strings Demo ***\n\n");
+ 
+-    // Version 2 and Version 3 are left empty for future implementations
++    // Version 2 
++    // Printing the start message for the Measuring Strings Demo
++    printf("*** Start of Measuring Strings Demo ***\n");
++
++    // Initializing buffer for storing user input
++    char buffer[BUFFER_SIZE];
++
++    // Loop for continuously receiving user input strings until 'q' is entered
++    do {
++        // Prompting the user to type a string
++        printf("Type a string (q - to quit):\n");
++
++        // Getting input string from the user
++        fgets(buffer, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the input string
++        buffer[strlen(buffer) - 1] = '\0';
++
++        // Checking if the entered string is not 'q'
++        if (strcmp(buffer, "q") != 0) {
++            // Printing the length of the entered string
++            printf("The length of '%s' is %d characters\n", buffer, (int)strlen(buffer));
++        }
++    } while (strcmp(buffer, "q") != 0);  // Loop continuation condition
++
++    // Printing the end message for the Measuring Strings Demo
++    printf("*** End of Measuring Strings Demo ***\n");
++
++
++
+ }
+
+commit 3543cd66023846f76f43572d9f8384895851122f
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Mon Apr 8 14:43:14 2024 -0400
+
+    manipulating(vicotr) eddited for version 2
+
+diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
+index c58c27f..4e2538e 100644
+Binary files a/(Victor)manipulating-test-cases.xlsx and b/(Victor)manipulating-test-cases.xlsx differ
+diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
+index 7a8fda1..3e9e441 100644
+--- a/(Victor)manipulating-test.txt
++++ b/(Victor)manipulating-test.txt
+@@ -1,3 +1,4 @@
++*** Start of Converting Strings Demo ***
+ Type the 1st string (q - to quit):
+ mynameis
+ Type the 2nd string:
+@@ -26,3 +27,34 @@ Concatenated string is 'CP RCp r'
+ Type the 1st string (q - to quit):
+ q
+ *** End of Concatenating Strings Demo ***
++
++
++*** Start of Comparing Strings Demo ***
++Type the 1st string to compare (q - to quit): 
++icanfly
++Type the 2nd string to compare: 
++icantfly
++'icanfly' string is less than 'icantfly'
++Type the 1st string to compare (q - to quit): 
++superman or spiderman
++Type the 2nd string to compare: 
++superman or spiderman
++'superman or spiderman' string is equal to 'superman or spiderman'
++Type the 1st string to compare (q - to quit): 
++cpr is fun
++Type the 2nd string to compare: 
++cpr is hard
++'cpr is fun' string is less than 'cpr is hard'
++Type the 1st string to compare (q - to quit): 
++i am learning c 
++Type the 2nd string to compare: 
++i am learnin  c
++'i am learning c ' string is greater than 'i am learnin  c'
++Type the 1st string to compare (q - to quit): 
++color
++Type the 2nd string to compare: 
++colour
++'color' string is less than 'colour'
++Type the 1st string to compare (q - to quit): 
++q
++*** End of Comparing strings Demo ***
+
+commit eaf26a4848793b8227b8738b2d33c382775aaa50
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Mon Apr 8 13:53:21 2024 -0400
+
+    manipulating(Saksham)
+
+diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
+index 0bbf16d..e395afb 100644
+--- a/(Saksham)manipulting-test.txt
++++ b/(Saksham)manipulting-test.txt
+@@ -1,3 +1,4 @@
++*** Start of Converting Strings Demo ***
+ Type the 1st string (q - to quit):
+ Hello
+ Type the 2nd string:
+@@ -25,4 +26,34 @@ Type the 1st string (q - to quit):
+ No
+ Type the 2nd string:
+ guilt
+-Concatenated string is 'Noguilt'
++Concatenated string is 'Noguilt'
++
++*** Start of Comparing Strings Demo ***
++Type the 1st string to compare (q - to quit): 
++iamnoone
++Type the 2nd string to compare: 
++iamnoone
++'iamnoone' string is equal to 'iamnoone'
++Type the 1st string to compare (q - to quit): 
++get ready 1
++Type the 2nd string to compare: 
++getready 1
++'get ready 1' string is less than 'getready 1'
++Type the 1st string to compare (q - to quit): 
++lemon juice is healthy
++Type the 2nd string to compare: 
++apple juice is healthy
++'lemon juice is healthy' string is greater than 'apple juice is healthy'
++Type the 1st string to compare (q - to quit): 
++i_am a programmer
++Type the 2nd string to compare: 
++i_am a programmer
++'i_am a programmer' string is equal to 'i_am a programmer'
++Type the 1st string to compare (q - to quit): 
++1234 
++Type the 2nd string to compare: 
++2345
++'1234' string is less than '2345'
++Type the 1st string to compare (q - to quit): 
++q
++*** End of Comparing strings Demo ***
+diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
+index f6356d1..072b43e 100644
+Binary files a/(saksham)manipulating-test-cases.xlsx and b/(saksham)manipulating-test-cases.xlsx differ
+diff --git a/manipulating.c b/manipulating.c
+index e2bab7e..fc824ed 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -49,6 +49,55 @@ void manipulating(void) {
+ 
+     /* Version 2 */
+ 
++    // Printing start message
++    printf("*** Start of Comparing Strings Demo ***\n");
++
++    // Declaring variables for storing input strings and result
++    char compare1[BUFFER_SIZE]; 
++    char compare2[BUFFER_SIZE];
++    int result;
++
++    // Starting loop for input and comparison
++    do {
++        // Prompting user for the 1st string to compare
++        printf("Type the 1st string to compare (q - to quit): \n"); 
++        
++        // Getting input for the 1st string
++        fgets(compare1, BUFFER_SIZE, stdin);
++        
++        // Replacing newline character with null terminator
++        compare1[strlen(compare1) - 1] = '\0';
++        
++        // Checking if the input is not 'q'
++        if (strcmp(compare1, "q") != 0) {
++            
++            // Prompting user for the 2nd string to compare
++            printf("Type the 2nd string to compare: \n"); 
++            
++            // Getting input for the 2nd string
++            fgets(compare2, BUFFER_SIZE, stdin);
++            
++            // Replacing newline character with null terminator
++            compare2[strlen(compare2) - 1] = '\0';
++            
++            // Comparing the strings and storing the result
++            result = strcmp(compare1, compare2);
++            
++            // Checking the result of comparison
++            if (result < 0) 
++                printf("'%s' string is less than '%s'\n", compare1, compare2);
++            else if (result == 0)
++                printf("'%s' string is equal to '%s'\n", compare1, compare2);
++            else
++                printf("'%s' string is greater than '%s'\n", compare1, compare2);
++        }
++    // Continuing loop until input is not 'q'
++    } while (strcmp(compare1, "q") != 0);
++
++    // Printing end message
++    printf("*** End of Comparing strings Demo ***\n\n");
++
++
+     /* Version 3 */
+ }
+ 
+diff --git a/tokenizing.c b/tokenizing.c
+index 6409077..01dc441 100644
+--- a/tokenizing.c
++++ b/tokenizing.c
+@@ -57,33 +57,52 @@ void tokenizing(void) {
+ 
+     /* Version 2 */
+ 
++    // Initiating the Tokenizing Phrases Demo
+     printf("*** Start of Tokenizing Phrases Demo ***\n");
+ 
++    // Declaring a character array to store phrases and initializing variables
+     char phrases[BUFFER_SIZE];
+     char *nextPhrase = NULL;
+     int phrasesCounter;
+ 
+-
++    // Starting a loop for inputting phrases
+     do
+     {
+-        printf("Type a few phrases separated by comma (q - to quit): \n"); 
++        // Prompting the user to type phrases separated by commas
++        printf("Typing a few phrases separated by commas (q - to quit): \n");
++        
++        // Reading input from the user
+         fgets(phrases, BUFFER_SIZE, stdin);
++        
++        // Removing the newline character from the input
+         phrases[strlen(phrases) - 1] = '\0';
+ 
++        // Checking if the input is not equal to 'q' (to quit)
+         if (strcmp(phrases, "q") != 0) {
++            
++            // Tokenizing the input string using strtok function
+             nextPhrase = strtok(phrases, ",");
++            
++            // Initializing phrasesCounter variable to 1
+             phrasesCounter = 1;
+ 
++            // Looping through each tokenized phrase
+             while (nextPhrase) {
++                
++                // Printing the phrase number and the tokenized phrase
+                 printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
++                
++                // Getting the next tokenized phrase
+                 nextPhrase = strtok(NULL, ",");
+             }
+         }
+     } while (strcmp(phrases, "q") != 0);
+ 
+-
++    // Printing the end of the Tokenizing phrases Demo
+     printf("*** End of Tokenizing phrases Demo ***\n\n");
+ 
+ 
++
++
+     /* Version 3 */
+ }
+
+commit 3184b4025493b76a325542a7995ce146328f5ca3
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Sun Apr 7 21:50:51 2024 -0400
+
+    Tokenizing version 2 added with updated test case excel file and text file
+
+diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
+index 3c5e9e2..21e4d7c 100644
+Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
+diff --git a/tokenizing-test.txt b/tokenizing-test.txt
+index c5a2949..e935389 100644
+--- a/tokenizing-test.txt
++++ b/tokenizing-test.txt
+@@ -1 +1,27 @@
+-Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
+\ No newline at end of file
++*** Start of Tokenizing Words Demo ***
++Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'*** Start of Tokenizing Phrases Demo ***
++Type a few phrases separated by comma (q - to quit): 
++hi, there
++Phrase #1 is 'hi'
++Phrase #2 is ' there'
++Type a few phrases separated by comma (q - to quit): 
++like, and subscribe, to my, channel
++Phrase #1 is 'like'
++Phrase #2 is ' and subscribe'
++Phrase #3 is ' to my'
++Phrase #4 is ' channel'
++Type a few phrases separated by comma (q - to quit): 
++how, are, you, 
++Phrase #1 is 'how'
++Phrase #2 is ' are'
++Phrase #3 is ' you'
++Phrase #4 is ' '
++Type a few phrases separated by comma (q - to quit): 
++my name is yyz
++Phrase #1 is 'my name is yyz'
++Type a few phrases separated by comma (q - to quit): 
++012
++Phrase #1 is '012'
++Type a few phrases separated by comma (q - to quit): 
++q
++*** End of Tokenizing phrases Demo ***
+\ No newline at end of file
+diff --git a/tokenizing.c b/tokenizing.c
+index daa8647..6409077 100644
+--- a/tokenizing.c
++++ b/tokenizing.c
+@@ -57,5 +57,33 @@ void tokenizing(void) {
+ 
+     /* Version 2 */
+ 
++    printf("*** Start of Tokenizing Phrases Demo ***\n");
++
++    char phrases[BUFFER_SIZE];
++    char *nextPhrase = NULL;
++    int phrasesCounter;
++
++
++    do
++    {
++        printf("Type a few phrases separated by comma (q - to quit): \n"); 
++        fgets(phrases, BUFFER_SIZE, stdin);
++        phrases[strlen(phrases) - 1] = '\0';
++
++        if (strcmp(phrases, "q") != 0) {
++            nextPhrase = strtok(phrases, ",");
++            phrasesCounter = 1;
++
++            while (nextPhrase) {
++                printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
++                nextPhrase = strtok(NULL, ",");
++            }
++        }
++    } while (strcmp(phrases, "q") != 0);
++
++
++    printf("*** End of Tokenizing phrases Demo ***\n\n");
++
++
+     /* Version 3 */
+ }
+
+commit e49b5f4e1ac07c3430183b620507c8860e016ddc
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Sun Apr 7 21:13:48 2024 -0400
+
+    Added Version 2 code, test cases, testing log, and git log
+
+diff --git a/Final-Project-Test-Cases.xlsx b/Final-Project-Test-Cases.xlsx
+new file mode 100644
+index 0000000..8c7d6ed
+Binary files /dev/null and b/Final-Project-Test-Cases.xlsx differ
+diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
+index 22c04b3..cdb93cc 100644
+Binary files a/converting-test-cases.xlsx and b/converting-test-cases.xlsx differ
+diff --git a/converting-test.txt b/converting-test.txt
+index c000d00..47e38ed 100644
+--- a/converting-test.txt
++++ b/converting-test.txt
+@@ -1,3 +1,4 @@
++*** Start of Converting Strings to int Demo ***
+ Type an int numeric string (q - to quit):
+ 5
+ Converted number is 5
+@@ -18,4 +19,24 @@ Type an int numeric string (q - to quit):
+ Converted number is 19
+ Type an int numeric string (q - to quit):
+ 
++
++*** Start of Converting Strings to double Demo ***
++Type the double numeric string (q - to quit):
++5.32
++Converted number is 5.320000
++Type the double numeric string (q - to quit):
++600.99
++Converted number is 600.990000
++Type the double numeric string (q - to quit):
++12.222
++Converted number is 12.222000
++Type the double numeric string (q - to quit):
++lol
++Converted number is 0.000000
++Type the double numeric string (q - to quit):
++no way
++Converted number is 0.000000
++Type the double numeric string (q - to quit):
++99.9876
++Converted number is 99.987600
+ 
+\ No newline at end of file
+diff --git a/converting.c b/converting.c
+index 8e417a1..210c4e2 100644
+--- a/converting.c
++++ b/converting.c
+@@ -43,15 +43,34 @@ void converting(void) {
+ 
+     // Printing a message indicating the end of the demonstration for converting strings to integers.
+     printf("*** End of Converting Strings to int Demo ***\n\n");
+-}
++
+ 
+ 
+ /* Version 2 */
++    printf("*** Start of Converting Strings to double Demo ***\n"); // Printing a start message
+ 
++    char doubleString[BUFFER_SIZE]; // Declaring a character array to store the input string
++    double doubleNumber; // Declaring a variable to store the converted double number
+ 
++    do { // Starting a do-while loop
++        printf("Type the double numeric string (q - to quit):\n"); // Prompting the user to input a double numeric string
++        fgets(doubleString, BUFFER_SIZE, stdin); // Reading the input string from the user
++        doubleString[strlen(doubleString) -1] = '\0'; // Removing the trailing newline character from the input string
++
++        if ((strcmp(doubleString, "q") != 0)) { // Checking if the input string is not equal to "q"
++            doubleNumber = atof(doubleString); // Converting the input string to a double number
++            printf("Converted number is %f\n", doubleNumber); // Printing the converted double number with two decimal places
++        }
++    } while (strcmp(doubleString, "q") != 0); // Continuing the loop until the input string is "q"
++
++    printf("*** End of Converting Strings to double Demo ***\n\n"); // Printing an end message
+ 
+-/* Version 3 */
+ 
+ 
+ 
+ 
++/* Version 3 */
++
++
++}
++
+diff --git a/my_program b/my_program
+new file mode 100755
+index 0000000..2768dbe
+Binary files /dev/null and b/my_program differ
+diff --git a/~$(saksham)manipulating-test-cases.xlsx b/~$(saksham)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..68f7efc
+Binary files /dev/null and b/~$(saksham)manipulating-test-cases.xlsx differ
+
+commit 9023f3f6d405e49d6fcbfd416f200b3b5cf7678d
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 17:03:24 2024 -0400
+
+    delete file
+     Please enter the commit message for your changes. Lines starting
+
+diff --git a/newfile.txt b/newfile.txt
+deleted file mode 100644
+index e69de29..0000000
+
+commit 93294306b9f549715f946d2d3447c5ab4e7d0265
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 17:02:02 2024 -0400
+
+    random file
+
+diff --git a/newfile.txt b/newfile.txt
+new file mode 100644
+index 0000000..e69de29
+
+commit 5d2165e5901182b801e35a3329c56fd3cdfc4314
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 16:46:18 2024 -0400
+
+    First commit
+
+diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
+new file mode 100644
+index 0000000..0bbf16d
+--- /dev/null
++++ b/(Saksham)manipulting-test.txt
+@@ -0,0 +1,28 @@
++Type the 1st string (q - to quit):
++Hello
++Type the 2nd string:
++ Saksham
++Concatenated string is 'Hello Saksham'
++Type the 1st string (q - to quit):
++Hi
++Type the 2nd string:
++There
++Concatenated string is 'HiThere'
++Type the 1st string (q - to quit):
++my
++Type the 2nd string:
++q
++Concatenated string is 'myq'
++Type the 1st string (q - to quit):
++q
++*** End of Concatenating Strings Demo ***
++Type the 1st string (q - to quit):
++BE A HERO NOT A COWARD
++Type the 2nd string:
++NOT A COWARD
++Concatenated string is 'BE A HERO NOT A COWARDNoguilt'
++Type the 1st string (q - to quit):
++No
++Type the 2nd string:
++guilt
++Concatenated string is 'Noguilt'
+diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..c58c27f
+Binary files /dev/null and b/(Victor)manipulating-test-cases.xlsx differ
+diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
+new file mode 100644
+index 0000000..7a8fda1
+--- /dev/null
++++ b/(Victor)manipulating-test.txt
+@@ -0,0 +1,28 @@
++Type the 1st string (q - to quit):
++mynameis
++Type the 2nd string:
++Mordi
++Concatenated string is 'mynameisMordi'
++Type the 1st string (q - to quit):
++no
++Type the 2nd string:
++lmk
++Concatenated string is 'no lmk'
++Type the 1st string (q - to quit):
++CPR.   
++Type the 2nd string:
++PROJECT
++Concatenated string is 'CPR.   PROJECT'
++Type the 1st string (q - to quit):
++Iphone          
++Type the 2nd string:
++is my fav
++Concatenated string is 'Iphone is my fav'
++Type the 1st string (q - to quit):
++CP R
++Type the 2nd string:
++Cp r
++Concatenated string is 'CP RCp r'
++Type the 1st string (q - to quit):
++q
++*** End of Concatenating Strings Demo ***
+diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..f6356d1
+Binary files /dev/null and b/(saksham)manipulating-test-cases.xlsx differ
+diff --git a/.DS_Store b/.DS_Store
+new file mode 100644
+index 0000000..019d636
+Binary files /dev/null and b/.DS_Store differ
+diff --git a/Final-Project-Plan (1).xlsx b/Final-Project-Plan (1).xlsx
+new file mode 100644
+index 0000000..32132b1
+Binary files /dev/null and b/Final-Project-Plan (1).xlsx differ
+diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
+new file mode 100644
+index 0000000..22c04b3
+Binary files /dev/null and b/converting-test-cases.xlsx differ
+diff --git a/converting-test.txt b/converting-test.txt
+new file mode 100644
+index 0000000..c000d00
+--- /dev/null
++++ b/converting-test.txt
+@@ -0,0 +1,21 @@
++Type an int numeric string (q - to quit):
++5
++Converted number is 5
++Type an int numeric string (q - to quit):
++8910
++Converted number is 8910
++Type an int numeric string (q - to quit):
++apple
++Converted number is 0
++Type an int numeric string (q - to quit):
++I_LOVE_CPR
++Converted number is 0
++Type an int numeric string (q - to quit):
++200
++Converted number is 200
++Type an int numeric string (q - to quit):
++19 23
++Converted number is 19
++Type an int numeric string (q - to quit):
++
++
+\ No newline at end of file
+diff --git a/converting.c b/converting.c
+new file mode 100644
+index 0000000..8e417a1
+--- /dev/null
++++ b/converting.c
+@@ -0,0 +1,57 @@
++// Version 1
++
++// This line  `#define _CRT_SECURE_NO_WARNINGS` is to disable certain warnings related to standard library functions in Windows.
++#define _CRT_SECURE_NO_WARNINGS
++
++// Defining the size of the buffer to be used for storing the input string.
++#define BUFFER_SIZE 80
++
++// Including the header file `converting.h`, which likely contains function prototypes needed for the `converting` function.
++#include "converting.h"
++
++// Commenting indicating the relation of the `converting` function to the VI (Version 1) of the code.
++// VI
++
++// Defining the function `converting`, which takes no arguments and returns nothing (`void`).
++void converting(void) {
++    // Printing a message indicating the start of the demonstration for converting strings to integers.
++    printf("*** Start of Converting Strings to int Demo ***\n");
++
++    // Declaring an array of characters named `intString` with a size defined by the macro `BUFFER_SIZE`.
++    char intString[BUFFER_SIZE];
++
++    // Declaring an integer variable `intNumber` which will hold the converted integer value.
++    int intNumber;
++
++    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {
++        // Prompting the user to type an integer numeric string.
++        printf("Type an int numeric string (q - to quit):\n"); 
++
++        // Reading the input string from the standard input and store it in `intString`.
++        fgets(intString, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of the input string.
++        intString[strlen(intString) - 1] = '\0';
++
++        // Converting the string `intString` to an integer using the `atoi` function and store the result in `intNumber`.
++        if (strcmp(intString, "q") != 0) {
++            intNumber = atoi(intString);
++            printf("Converted number is %d\n", intNumber);
++        }
++    } while (strcmp(intString, "q") != 0);
++
++    // Printing a message indicating the end of the demonstration for converting strings to integers.
++    printf("*** End of Converting Strings to int Demo ***\n\n");
++}
++
++
++/* Version 2 */
++
++
++
++/* Version 3 */
++
++
++
++
+diff --git a/converting.h b/converting.h
+new file mode 100644
+index 0000000..e229834
+--- /dev/null
++++ b/converting.h
+@@ -0,0 +1,15 @@
++// CONVERTING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h> 
++#include <string.h> 
++#include <stdlib.h>
++
++// Function prototype for the converting function.
++void converting(void);
++
++#endif // End of header guard
+diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
+new file mode 100644
+index 0000000..8447936
+Binary files /dev/null and b/fundamentals-test-cases.xlsx differ
+diff --git a/fundamentals-test.txt b/fundamentals-test.txt
+new file mode 100644
+index 0000000..d43c9c0
+--- /dev/null
++++ b/fundamentals-test.txt
+@@ -0,0 +1,29 @@
++Type not empty string (q- to quit):
++hello guys
++Type the character position within the string: 
++2
++The character found at 2 position is 'l'
++Type not empty string (q- to quit):
++BeAlright       
++Type the character position within the string: 
++6
++The character found at 6 position is 'g'
++Type not empty string (q- to quit):
++lllllllll
++Type the character position within the string: 
++20
++Too big... Position reduced to max. available
++The character found at 8 position is 'l'
++Type not empty string (q- to quit):
++q
++*** End of Indexing Strings Demo ***
++Type not empty string (q- to quit):
++sjncsa/';';
++Type the character position within the string: 
++8
++The character found at 8 position is ';'
++Type not empty string (q- to quit):
++12345LAB
++Type the character position within the string: 
++2
++The character found at 2 position is '3'
+diff --git a/fundamentals.c b/fundamentals.c
+new file mode 100644
+index 0000000..86d67c0
+--- /dev/null
++++ b/fundamentals.c
+@@ -0,0 +1,71 @@
++#include "fundamentals.h"
++
++// Disable certain warnings related to standard library functions in Windows
++#define _CRT_SECURE_NO_WARNINGS
++
++// Define buffer size for storing strings
++#define BUFFER_SIZE 80 
++
++// Define size for input buffer storing numeric inputs
++#define NUM_INPUT_SIZE 10
++
++// Include the header file again to access its functionality
++#include "fundamentals.h"
++
++// Define the function `fundamentals`
++void fundamentals (void) {
++    // Start of the indexing strings demonstration
++    printf("*** Start of Indexing Strings Demo ***\n");
++
++    // Declare a buffer to store the input string
++    char buffer1 [BUFFER_SIZE];
++
++    // Declare a buffer to store numeric input
++    char numInput [NUM_INPUT_SIZE];
++
++    // Declare a variable to store the position of the character
++    size_t position;
++
++    // Start a loop for user interaction
++    do
++    {
++        // Prompt the user to input a non-empty string
++        printf("Type not empty string (q- to quit):\n");
++        
++        // Read the input string from the user
++        fgets (buffer1, BUFFER_SIZE, stdin);
++
++        // Remove the newline character from the input string
++        buffer1 [strlen(buffer1) - 1] = '\0';
++
++        // If the input is not "q", proceed with character position input
++        if (strcmp (buffer1, "q") != 0) {
++            // Prompt the user to input the character position within the string
++            printf(("Type the character position within the string: \n"));
++            
++            // Read the numeric input for character position
++            fgets (numInput, NUM_INPUT_SIZE, stdin) ;
++            
++            // Remove the newline character from the numeric input
++            numInput [strlen (numInput)- 1] = '\0';
++            
++            // Convert the numeric input to an integer
++            position = atoi(numInput);
++            
++            // If the position is greater than or equal to the length of the string, adjust it
++            if (position >= strlen(buffer1))
++            {
++                position = strlen(buffer1) - 1;
++                printf("Too big... Position reduced to max. available\n");
++            }
++            
++            // Print the character found at the specified position within the string
++            printf ("The character found at %d position is \'%c'\n", (int)position, buffer1[position]);
++        }
++    } while (strcmp (buffer1, "q") != 0); // Continue looping until the user inputs "q"
++
++    // End of the indexing strings demonstration
++    printf("*** End of Indexing Strings Demo ***\n\n");
++
++    // Version 2 and Version 3 are left empty for future implementations
++}
+diff --git a/fundamentals.h b/fundamentals.h
+new file mode 100644
+index 0000000..f49fe48
+--- /dev/null
++++ b/fundamentals.h
+@@ -0,0 +1,13 @@
++// FUNDAMENTALS MODULE HEADER
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++// Include necessary standard library headers
++#include <stdio.h> // For input/output operations
++#include <string.h> // For string manipulation functions
++#include <stdlib.h> // For functions like `atoi()` used for string to integer conversion
++
++// Declare the fundamentals function prototype
++void fundamentals (void);
++
++#endif // End of header guard
+diff --git a/main.c b/main.c
+new file mode 100644
+index 0000000..43a0e6f
+--- /dev/null
++++ b/main.c
+@@ -0,0 +1,46 @@
++// Including header files for the different modules
++#include "fundamentals.h" // For the fundamentals module
++#include "manipulating.h" // For the manipulating module
++#include "converting.h"   // For the converting module
++#include "tokenizing.h"   // For the tokenizing module
++
++// Main function of the program
++int main(void) { 
++    char buff[10]; // Buffer to store user input
++    
++    // Loop to display menu and handle user input
++    do {
++        // Displaying menu options
++        printf("1 - Fundamentals\n");
++        printf("2 - Manipulation\n");
++        printf("3 - Converting\n");
++        printf("4 - Tokenizing\n");
++        printf("0 - Exit\n");
++        printf("Which module to run? \n");
++        
++        // Reading user input
++        fgets(buff, 10, stdin);
++        
++        // Switch case to handle user choice
++        switch (buff[0]) {
++            // If user chooses option 1
++            case '1': 
++                fundamentals(); // Call fundamentals function
++                break;
++            // If user chooses option 2
++            case '2': 
++                manipulating(); // Call manipulating function
++                break;
++            // If user chooses option 3
++            case '3': 
++                converting(); // Call converting function
++                break;
++            // If user chooses option 4
++            case '4': 
++                tokenizing(); // Call tokenizing function
++                break;
++        }
++    } while (buff[0] != '0'); // Loop until user chooses to exit
++    
++    return 0; // Return 0 to indicate successful execution
++}
+diff --git a/manipulating.c b/manipulating.c
+new file mode 100644
+index 0000000..e2bab7e
+--- /dev/null
++++ b/manipulating.c
+@@ -0,0 +1,55 @@
++/* Version 1 */
++
++// Including necessary standard library headers.
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// Function definition for the manipulating function.
++void manipulating(void) {
++    // Printing a message indicating the start of the demonstration for converting strings.
++    printf("*** Start of Converting Strings Demo ***\n");
++
++    // Declaring character arrays `string1` and `string2` to store user input strings.
++    char string1[BUFFER_SIZE];
++    char string2[BUFFER_SIZE];
++
++    // Start a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {
++        // Prompting the user to type the 1st string.
++        printf("Type the 1st string (q - to quit):\n"); 
++
++        // Reading the 1st string from the standard input and storing it in `string1`.
++        fgets(string1, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of `string1`.
++        string1[strlen(string1) - 1] = '\0';
++    
++        // Checking if `string1` is not equal to "q".
++        if ((strcmp(string1, "q") != 0)) {
++            // Prompting the user to type the 2nd string.
++            printf("Type the 2nd string:\n");
++            
++            // Reading the 2nd string from the standard input and storing it in `string2`.
++            fgets(string2, BUFFER_SIZE, stdin);
++            
++            // Removing the newline character from the end of `string2`.
++            string2[strlen(string2) - 1] = '\0';
++            
++            // Concatenating `string2` to `string1`.
++            strcat(string1, string2);
++            
++            // Printing the concatenated string.
++            printf("Concatenated string is '%s'\n", string1);
++        } 
++    } while (strcmp(string1, "q") != 0); // Loop continues until `string1` is "q".
++
++    // Printing a message indicating the end of the demonstration for concatenating strings.
++    printf("*** End of Concatenating Strings Demo ***\n\n");
++
++    /* Version 2 */
++
++    /* Version 3 */
++}
++
++
+diff --git a/manipulating.h b/manipulating.h
+new file mode 100644
+index 0000000..de24853
+--- /dev/null
++++ b/manipulating.h
+@@ -0,0 +1,14 @@
++// MANIPULATING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h>
++#include <string.h>
++
++// Function prototype for the manipulating function.
++void manipulating(void);
++
++#endif // End of header guard
+diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
+new file mode 100644
+index 0000000..3c5e9e2
+Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
+diff --git a/tokenizing-test.txt b/tokenizing-test.txt
+new file mode 100644
+index 0000000..c5a2949
+--- /dev/null
++++ b/tokenizing-test.txt
+@@ -0,0 +1 @@
++Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
+\ No newline at end of file
+diff --git a/tokenizing.c b/tokenizing.c
+new file mode 100644
+index 0000000..daa8647
+--- /dev/null
++++ b/tokenizing.c
+@@ -0,0 +1,61 @@
++// Defining the macro `_CRT_SECURE_NO_WARNINGS` to disable certain warnings related to standard library functions in Windows.
++#define _CRT_SECURE_NO_WARNINGS
++
++// Defining the size of the buffer to be used for storing words.
++#define BUFFER_SIZE 300
++
++// Including the header file `tokenizing.h`, which likely contains function prototypes needed for the `tokenizing` function.
++#include "tokenizing.h"
++
++// Defining the function `tokenizing`, which takes no arguments and returns nothing (`void`).
++void tokenizing(void) {
++    /* Version 1 */
++    // Printing a message indicating the start of the tokenizing words demonstration.
++    printf("*** Start of Tokenizing Words Demo ***\n");
++
++    // Declaring an array of characters named `words` with a size defined by the macro `BUFFER_SIZE`.
++    char words[BUFFER_SIZE];
++
++    // Declaring a pointer to a character named `nextWord`, initially set to NULL.
++    char* nextWord = NULL;
++
++    // Declaring an integer variable `wordsCounter` to keep track of the number of words.
++    int wordsCounter;
++
++    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {   
++        // Prompting the user to type a few words separated by space.
++        printf("Type a few words separated by space (q - to quit): \n");
++
++        // Reading the input string from the standard input and store it in `words`.
++        fgets(words, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of the input string.
++        words[strlen(words) - 1] = '\0';
++
++        // If the input string is not "q", tokenize the words using strtok function and print each word.
++        if (strcmp(words, "q") != 0) {
++            // Tokenizing the input string `words` using space as the delimiter.
++            nextWord = strtok(words, " ");
++
++            // Initializing `wordsCounter` to 1.
++            wordsCounter = 1;
++
++            // Looping through each token (word) obtained by strtok until NULL is returned.
++            while (nextWord) {
++                // Printing the current word along with its index.
++                printf("Word #%d is '%s'\n", wordsCounter++, nextWord);
++
++                // Getting the next token (word).
++                nextWord = strtok(NULL, " ");
++            }
++        }
++    } while (strcmp(words, "q") != 0); // Loop until the input string is "q".
++
++    // Printing a message indicating the end of the tokenizing words demonstration.
++    printf("*** End of Tokenizing Words Demo ***\n\n");
++
++    /* Version 2 */
++
++    /* Version 3 */
++}
+diff --git a/tokenizing.h b/tokenizing.h
+new file mode 100644
+index 0000000..c452778
+--- /dev/null
++++ b/tokenizing.h
+@@ -0,0 +1,14 @@
++// TOKENIZING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _TOKENIZING_H_
++#define _TOKENIZING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h> 
++#include <string.h> 
++
++// Function prototype for the tokenizing function.
++void tokenizing(void);
++
++#endif // End of header guard
diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
deleted file mode 100644
index df0c4ea..0000000
Binary files a/fundamentals-test-cases.xlsx and /dev/null differ
diff --git a/manipulating(Saksham)-git-log.txt b/manipulating(Saksham)-git-log.txt
new file mode 100644
index 0000000..c3ae226
--- /dev/null
+++ b/manipulating(Saksham)-git-log.txt
@@ -0,0 +1,950 @@
+commit eaf26a4848793b8227b8738b2d33c382775aaa50
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Mon Apr 8 13:53:21 2024 -0400
+
+    manipulating(Saksham)
+
+diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
+index 0bbf16d..e395afb 100644
+--- a/(Saksham)manipulting-test.txt
++++ b/(Saksham)manipulting-test.txt
+@@ -1,3 +1,4 @@
++*** Start of Converting Strings Demo ***
+ Type the 1st string (q - to quit):
+ Hello
+ Type the 2nd string:
+@@ -25,4 +26,34 @@ Type the 1st string (q - to quit):
+ No
+ Type the 2nd string:
+ guilt
+-Concatenated string is 'Noguilt'
++Concatenated string is 'Noguilt'
++
++*** Start of Comparing Strings Demo ***
++Type the 1st string to compare (q - to quit): 
++iamnoone
++Type the 2nd string to compare: 
++iamnoone
++'iamnoone' string is equal to 'iamnoone'
++Type the 1st string to compare (q - to quit): 
++get ready 1
++Type the 2nd string to compare: 
++getready 1
++'get ready 1' string is less than 'getready 1'
++Type the 1st string to compare (q - to quit): 
++lemon juice is healthy
++Type the 2nd string to compare: 
++apple juice is healthy
++'lemon juice is healthy' string is greater than 'apple juice is healthy'
++Type the 1st string to compare (q - to quit): 
++i_am a programmer
++Type the 2nd string to compare: 
++i_am a programmer
++'i_am a programmer' string is equal to 'i_am a programmer'
++Type the 1st string to compare (q - to quit): 
++1234 
++Type the 2nd string to compare: 
++2345
++'1234' string is less than '2345'
++Type the 1st string to compare (q - to quit): 
++q
++*** End of Comparing strings Demo ***
+diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
+index f6356d1..072b43e 100644
+Binary files a/(saksham)manipulating-test-cases.xlsx and b/(saksham)manipulating-test-cases.xlsx differ
+diff --git a/manipulating.c b/manipulating.c
+index e2bab7e..fc824ed 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -49,6 +49,55 @@ void manipulating(void) {
+ 
+     /* Version 2 */
+ 
++    // Printing start message
++    printf("*** Start of Comparing Strings Demo ***\n");
++
++    // Declaring variables for storing input strings and result
++    char compare1[BUFFER_SIZE]; 
++    char compare2[BUFFER_SIZE];
++    int result;
++
++    // Starting loop for input and comparison
++    do {
++        // Prompting user for the 1st string to compare
++        printf("Type the 1st string to compare (q - to quit): \n"); 
++        
++        // Getting input for the 1st string
++        fgets(compare1, BUFFER_SIZE, stdin);
++        
++        // Replacing newline character with null terminator
++        compare1[strlen(compare1) - 1] = '\0';
++        
++        // Checking if the input is not 'q'
++        if (strcmp(compare1, "q") != 0) {
++            
++            // Prompting user for the 2nd string to compare
++            printf("Type the 2nd string to compare: \n"); 
++            
++            // Getting input for the 2nd string
++            fgets(compare2, BUFFER_SIZE, stdin);
++            
++            // Replacing newline character with null terminator
++            compare2[strlen(compare2) - 1] = '\0';
++            
++            // Comparing the strings and storing the result
++            result = strcmp(compare1, compare2);
++            
++            // Checking the result of comparison
++            if (result < 0) 
++                printf("'%s' string is less than '%s'\n", compare1, compare2);
++            else if (result == 0)
++                printf("'%s' string is equal to '%s'\n", compare1, compare2);
++            else
++                printf("'%s' string is greater than '%s'\n", compare1, compare2);
++        }
++    // Continuing loop until input is not 'q'
++    } while (strcmp(compare1, "q") != 0);
++
++    // Printing end message
++    printf("*** End of Comparing strings Demo ***\n\n");
++
++
+     /* Version 3 */
+ }
+ 
+diff --git a/tokenizing.c b/tokenizing.c
+index 6409077..01dc441 100644
+--- a/tokenizing.c
++++ b/tokenizing.c
+@@ -57,33 +57,52 @@ void tokenizing(void) {
+ 
+     /* Version 2 */
+ 
++    // Initiating the Tokenizing Phrases Demo
+     printf("*** Start of Tokenizing Phrases Demo ***\n");
+ 
++    // Declaring a character array to store phrases and initializing variables
+     char phrases[BUFFER_SIZE];
+     char *nextPhrase = NULL;
+     int phrasesCounter;
+ 
+-
++    // Starting a loop for inputting phrases
+     do
+     {
+-        printf("Type a few phrases separated by comma (q - to quit): \n"); 
++        // Prompting the user to type phrases separated by commas
++        printf("Typing a few phrases separated by commas (q - to quit): \n");
++        
++        // Reading input from the user
+         fgets(phrases, BUFFER_SIZE, stdin);
++        
++        // Removing the newline character from the input
+         phrases[strlen(phrases) - 1] = '\0';
+ 
++        // Checking if the input is not equal to 'q' (to quit)
+         if (strcmp(phrases, "q") != 0) {
++            
++            // Tokenizing the input string using strtok function
+             nextPhrase = strtok(phrases, ",");
++            
++            // Initializing phrasesCounter variable to 1
+             phrasesCounter = 1;
+ 
++            // Looping through each tokenized phrase
+             while (nextPhrase) {
++                
++                // Printing the phrase number and the tokenized phrase
+                 printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
++                
++                // Getting the next tokenized phrase
+                 nextPhrase = strtok(NULL, ",");
+             }
+         }
+     } while (strcmp(phrases, "q") != 0);
+ 
+-
++    // Printing the end of the Tokenizing phrases Demo
+     printf("*** End of Tokenizing phrases Demo ***\n\n");
+ 
+ 
++
++
+     /* Version 3 */
+ }
+
+commit 3184b4025493b76a325542a7995ce146328f5ca3
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Sun Apr 7 21:50:51 2024 -0400
+
+    Tokenizing version 2 added with updated test case excel file and text file
+
+diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
+index 3c5e9e2..21e4d7c 100644
+Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
+diff --git a/tokenizing-test.txt b/tokenizing-test.txt
+index c5a2949..e935389 100644
+--- a/tokenizing-test.txt
++++ b/tokenizing-test.txt
+@@ -1 +1,27 @@
+-Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
+\ No newline at end of file
++*** Start of Tokenizing Words Demo ***
++Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'*** Start of Tokenizing Phrases Demo ***
++Type a few phrases separated by comma (q - to quit): 
++hi, there
++Phrase #1 is 'hi'
++Phrase #2 is ' there'
++Type a few phrases separated by comma (q - to quit): 
++like, and subscribe, to my, channel
++Phrase #1 is 'like'
++Phrase #2 is ' and subscribe'
++Phrase #3 is ' to my'
++Phrase #4 is ' channel'
++Type a few phrases separated by comma (q - to quit): 
++how, are, you, 
++Phrase #1 is 'how'
++Phrase #2 is ' are'
++Phrase #3 is ' you'
++Phrase #4 is ' '
++Type a few phrases separated by comma (q - to quit): 
++my name is yyz
++Phrase #1 is 'my name is yyz'
++Type a few phrases separated by comma (q - to quit): 
++012
++Phrase #1 is '012'
++Type a few phrases separated by comma (q - to quit): 
++q
++*** End of Tokenizing phrases Demo ***
+\ No newline at end of file
+diff --git a/tokenizing.c b/tokenizing.c
+index daa8647..6409077 100644
+--- a/tokenizing.c
++++ b/tokenizing.c
+@@ -57,5 +57,33 @@ void tokenizing(void) {
+ 
+     /* Version 2 */
+ 
++    printf("*** Start of Tokenizing Phrases Demo ***\n");
++
++    char phrases[BUFFER_SIZE];
++    char *nextPhrase = NULL;
++    int phrasesCounter;
++
++
++    do
++    {
++        printf("Type a few phrases separated by comma (q - to quit): \n"); 
++        fgets(phrases, BUFFER_SIZE, stdin);
++        phrases[strlen(phrases) - 1] = '\0';
++
++        if (strcmp(phrases, "q") != 0) {
++            nextPhrase = strtok(phrases, ",");
++            phrasesCounter = 1;
++
++            while (nextPhrase) {
++                printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
++                nextPhrase = strtok(NULL, ",");
++            }
++        }
++    } while (strcmp(phrases, "q") != 0);
++
++
++    printf("*** End of Tokenizing phrases Demo ***\n\n");
++
++
+     /* Version 3 */
+ }
+
+commit e49b5f4e1ac07c3430183b620507c8860e016ddc
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Sun Apr 7 21:13:48 2024 -0400
+
+    Added Version 2 code, test cases, testing log, and git log
+
+diff --git a/Final-Project-Test-Cases.xlsx b/Final-Project-Test-Cases.xlsx
+new file mode 100644
+index 0000000..8c7d6ed
+Binary files /dev/null and b/Final-Project-Test-Cases.xlsx differ
+diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
+index 22c04b3..cdb93cc 100644
+Binary files a/converting-test-cases.xlsx and b/converting-test-cases.xlsx differ
+diff --git a/converting-test.txt b/converting-test.txt
+index c000d00..47e38ed 100644
+--- a/converting-test.txt
++++ b/converting-test.txt
+@@ -1,3 +1,4 @@
++*** Start of Converting Strings to int Demo ***
+ Type an int numeric string (q - to quit):
+ 5
+ Converted number is 5
+@@ -18,4 +19,24 @@ Type an int numeric string (q - to quit):
+ Converted number is 19
+ Type an int numeric string (q - to quit):
+ 
++
++*** Start of Converting Strings to double Demo ***
++Type the double numeric string (q - to quit):
++5.32
++Converted number is 5.320000
++Type the double numeric string (q - to quit):
++600.99
++Converted number is 600.990000
++Type the double numeric string (q - to quit):
++12.222
++Converted number is 12.222000
++Type the double numeric string (q - to quit):
++lol
++Converted number is 0.000000
++Type the double numeric string (q - to quit):
++no way
++Converted number is 0.000000
++Type the double numeric string (q - to quit):
++99.9876
++Converted number is 99.987600
+ 
+\ No newline at end of file
+diff --git a/converting.c b/converting.c
+index 8e417a1..210c4e2 100644
+--- a/converting.c
++++ b/converting.c
+@@ -43,15 +43,34 @@ void converting(void) {
+ 
+     // Printing a message indicating the end of the demonstration for converting strings to integers.
+     printf("*** End of Converting Strings to int Demo ***\n\n");
+-}
++
+ 
+ 
+ /* Version 2 */
++    printf("*** Start of Converting Strings to double Demo ***\n"); // Printing a start message
+ 
++    char doubleString[BUFFER_SIZE]; // Declaring a character array to store the input string
++    double doubleNumber; // Declaring a variable to store the converted double number
+ 
++    do { // Starting a do-while loop
++        printf("Type the double numeric string (q - to quit):\n"); // Prompting the user to input a double numeric string
++        fgets(doubleString, BUFFER_SIZE, stdin); // Reading the input string from the user
++        doubleString[strlen(doubleString) -1] = '\0'; // Removing the trailing newline character from the input string
++
++        if ((strcmp(doubleString, "q") != 0)) { // Checking if the input string is not equal to "q"
++            doubleNumber = atof(doubleString); // Converting the input string to a double number
++            printf("Converted number is %f\n", doubleNumber); // Printing the converted double number with two decimal places
++        }
++    } while (strcmp(doubleString, "q") != 0); // Continuing the loop until the input string is "q"
++
++    printf("*** End of Converting Strings to double Demo ***\n\n"); // Printing an end message
+ 
+-/* Version 3 */
+ 
+ 
+ 
+ 
++/* Version 3 */
++
++
++}
++
+diff --git a/my_program b/my_program
+new file mode 100755
+index 0000000..2768dbe
+Binary files /dev/null and b/my_program differ
+diff --git a/~$(saksham)manipulating-test-cases.xlsx b/~$(saksham)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..68f7efc
+Binary files /dev/null and b/~$(saksham)manipulating-test-cases.xlsx differ
+
+commit 9023f3f6d405e49d6fcbfd416f200b3b5cf7678d
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 17:03:24 2024 -0400
+
+    delete file
+     Please enter the commit message for your changes. Lines starting
+
+diff --git a/newfile.txt b/newfile.txt
+deleted file mode 100644
+index e69de29..0000000
+
+commit 93294306b9f549715f946d2d3447c5ab4e7d0265
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 17:02:02 2024 -0400
+
+    random file
+
+diff --git a/newfile.txt b/newfile.txt
+new file mode 100644
+index 0000000..e69de29
+
+commit 5d2165e5901182b801e35a3329c56fd3cdfc4314
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 16:46:18 2024 -0400
+
+    First commit
+
+diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
+new file mode 100644
+index 0000000..0bbf16d
+--- /dev/null
++++ b/(Saksham)manipulting-test.txt
+@@ -0,0 +1,28 @@
++Type the 1st string (q - to quit):
++Hello
++Type the 2nd string:
++ Saksham
++Concatenated string is 'Hello Saksham'
++Type the 1st string (q - to quit):
++Hi
++Type the 2nd string:
++There
++Concatenated string is 'HiThere'
++Type the 1st string (q - to quit):
++my
++Type the 2nd string:
++q
++Concatenated string is 'myq'
++Type the 1st string (q - to quit):
++q
++*** End of Concatenating Strings Demo ***
++Type the 1st string (q - to quit):
++BE A HERO NOT A COWARD
++Type the 2nd string:
++NOT A COWARD
++Concatenated string is 'BE A HERO NOT A COWARDNoguilt'
++Type the 1st string (q - to quit):
++No
++Type the 2nd string:
++guilt
++Concatenated string is 'Noguilt'
+diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..c58c27f
+Binary files /dev/null and b/(Victor)manipulating-test-cases.xlsx differ
+diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
+new file mode 100644
+index 0000000..7a8fda1
+--- /dev/null
++++ b/(Victor)manipulating-test.txt
+@@ -0,0 +1,28 @@
++Type the 1st string (q - to quit):
++mynameis
++Type the 2nd string:
++Mordi
++Concatenated string is 'mynameisMordi'
++Type the 1st string (q - to quit):
++no
++Type the 2nd string:
++lmk
++Concatenated string is 'no lmk'
++Type the 1st string (q - to quit):
++CPR.   
++Type the 2nd string:
++PROJECT
++Concatenated string is 'CPR.   PROJECT'
++Type the 1st string (q - to quit):
++Iphone          
++Type the 2nd string:
++is my fav
++Concatenated string is 'Iphone is my fav'
++Type the 1st string (q - to quit):
++CP R
++Type the 2nd string:
++Cp r
++Concatenated string is 'CP RCp r'
++Type the 1st string (q - to quit):
++q
++*** End of Concatenating Strings Demo ***
+diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..f6356d1
+Binary files /dev/null and b/(saksham)manipulating-test-cases.xlsx differ
+diff --git a/.DS_Store b/.DS_Store
+new file mode 100644
+index 0000000..019d636
+Binary files /dev/null and b/.DS_Store differ
+diff --git a/Final-Project-Plan (1).xlsx b/Final-Project-Plan (1).xlsx
+new file mode 100644
+index 0000000..32132b1
+Binary files /dev/null and b/Final-Project-Plan (1).xlsx differ
+diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
+new file mode 100644
+index 0000000..22c04b3
+Binary files /dev/null and b/converting-test-cases.xlsx differ
+diff --git a/converting-test.txt b/converting-test.txt
+new file mode 100644
+index 0000000..c000d00
+--- /dev/null
++++ b/converting-test.txt
+@@ -0,0 +1,21 @@
++Type an int numeric string (q - to quit):
++5
++Converted number is 5
++Type an int numeric string (q - to quit):
++8910
++Converted number is 8910
++Type an int numeric string (q - to quit):
++apple
++Converted number is 0
++Type an int numeric string (q - to quit):
++I_LOVE_CPR
++Converted number is 0
++Type an int numeric string (q - to quit):
++200
++Converted number is 200
++Type an int numeric string (q - to quit):
++19 23
++Converted number is 19
++Type an int numeric string (q - to quit):
++
++
+\ No newline at end of file
+diff --git a/converting.c b/converting.c
+new file mode 100644
+index 0000000..8e417a1
+--- /dev/null
++++ b/converting.c
+@@ -0,0 +1,57 @@
++// Version 1
++
++// This line  `#define _CRT_SECURE_NO_WARNINGS` is to disable certain warnings related to standard library functions in Windows.
++#define _CRT_SECURE_NO_WARNINGS
++
++// Defining the size of the buffer to be used for storing the input string.
++#define BUFFER_SIZE 80
++
++// Including the header file `converting.h`, which likely contains function prototypes needed for the `converting` function.
++#include "converting.h"
++
++// Commenting indicating the relation of the `converting` function to the VI (Version 1) of the code.
++// VI
++
++// Defining the function `converting`, which takes no arguments and returns nothing (`void`).
++void converting(void) {
++    // Printing a message indicating the start of the demonstration for converting strings to integers.
++    printf("*** Start of Converting Strings to int Demo ***\n");
++
++    // Declaring an array of characters named `intString` with a size defined by the macro `BUFFER_SIZE`.
++    char intString[BUFFER_SIZE];
++
++    // Declaring an integer variable `intNumber` which will hold the converted integer value.
++    int intNumber;
++
++    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {
++        // Prompting the user to type an integer numeric string.
++        printf("Type an int numeric string (q - to quit):\n"); 
++
++        // Reading the input string from the standard input and store it in `intString`.
++        fgets(intString, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of the input string.
++        intString[strlen(intString) - 1] = '\0';
++
++        // Converting the string `intString` to an integer using the `atoi` function and store the result in `intNumber`.
++        if (strcmp(intString, "q") != 0) {
++            intNumber = atoi(intString);
++            printf("Converted number is %d\n", intNumber);
++        }
++    } while (strcmp(intString, "q") != 0);
++
++    // Printing a message indicating the end of the demonstration for converting strings to integers.
++    printf("*** End of Converting Strings to int Demo ***\n\n");
++}
++
++
++/* Version 2 */
++
++
++
++/* Version 3 */
++
++
++
++
+diff --git a/converting.h b/converting.h
+new file mode 100644
+index 0000000..e229834
+--- /dev/null
++++ b/converting.h
+@@ -0,0 +1,15 @@
++// CONVERTING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h> 
++#include <string.h> 
++#include <stdlib.h>
++
++// Function prototype for the converting function.
++void converting(void);
++
++#endif // End of header guard
+diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
+new file mode 100644
+index 0000000..8447936
+Binary files /dev/null and b/fundamentals-test-cases.xlsx differ
+diff --git a/fundamentals-test.txt b/fundamentals-test.txt
+new file mode 100644
+index 0000000..d43c9c0
+--- /dev/null
++++ b/fundamentals-test.txt
+@@ -0,0 +1,29 @@
++Type not empty string (q- to quit):
++hello guys
++Type the character position within the string: 
++2
++The character found at 2 position is 'l'
++Type not empty string (q- to quit):
++BeAlright       
++Type the character position within the string: 
++6
++The character found at 6 position is 'g'
++Type not empty string (q- to quit):
++lllllllll
++Type the character position within the string: 
++20
++Too big... Position reduced to max. available
++The character found at 8 position is 'l'
++Type not empty string (q- to quit):
++q
++*** End of Indexing Strings Demo ***
++Type not empty string (q- to quit):
++sjncsa/';';
++Type the character position within the string: 
++8
++The character found at 8 position is ';'
++Type not empty string (q- to quit):
++12345LAB
++Type the character position within the string: 
++2
++The character found at 2 position is '3'
+diff --git a/fundamentals.c b/fundamentals.c
+new file mode 100644
+index 0000000..86d67c0
+--- /dev/null
++++ b/fundamentals.c
+@@ -0,0 +1,71 @@
++#include "fundamentals.h"
++
++// Disable certain warnings related to standard library functions in Windows
++#define _CRT_SECURE_NO_WARNINGS
++
++// Define buffer size for storing strings
++#define BUFFER_SIZE 80 
++
++// Define size for input buffer storing numeric inputs
++#define NUM_INPUT_SIZE 10
++
++// Include the header file again to access its functionality
++#include "fundamentals.h"
++
++// Define the function `fundamentals`
++void fundamentals (void) {
++    // Start of the indexing strings demonstration
++    printf("*** Start of Indexing Strings Demo ***\n");
++
++    // Declare a buffer to store the input string
++    char buffer1 [BUFFER_SIZE];
++
++    // Declare a buffer to store numeric input
++    char numInput [NUM_INPUT_SIZE];
++
++    // Declare a variable to store the position of the character
++    size_t position;
++
++    // Start a loop for user interaction
++    do
++    {
++        // Prompt the user to input a non-empty string
++        printf("Type not empty string (q- to quit):\n");
++        
++        // Read the input string from the user
++        fgets (buffer1, BUFFER_SIZE, stdin);
++
++        // Remove the newline character from the input string
++        buffer1 [strlen(buffer1) - 1] = '\0';
++
++        // If the input is not "q", proceed with character position input
++        if (strcmp (buffer1, "q") != 0) {
++            // Prompt the user to input the character position within the string
++            printf(("Type the character position within the string: \n"));
++            
++            // Read the numeric input for character position
++            fgets (numInput, NUM_INPUT_SIZE, stdin) ;
++            
++            // Remove the newline character from the numeric input
++            numInput [strlen (numInput)- 1] = '\0';
++            
++            // Convert the numeric input to an integer
++            position = atoi(numInput);
++            
++            // If the position is greater than or equal to the length of the string, adjust it
++            if (position >= strlen(buffer1))
++            {
++                position = strlen(buffer1) - 1;
++                printf("Too big... Position reduced to max. available\n");
++            }
++            
++            // Print the character found at the specified position within the string
++            printf ("The character found at %d position is \'%c'\n", (int)position, buffer1[position]);
++        }
++    } while (strcmp (buffer1, "q") != 0); // Continue looping until the user inputs "q"
++
++    // End of the indexing strings demonstration
++    printf("*** End of Indexing Strings Demo ***\n\n");
++
++    // Version 2 and Version 3 are left empty for future implementations
++}
+diff --git a/fundamentals.h b/fundamentals.h
+new file mode 100644
+index 0000000..f49fe48
+--- /dev/null
++++ b/fundamentals.h
+@@ -0,0 +1,13 @@
++// FUNDAMENTALS MODULE HEADER
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++// Include necessary standard library headers
++#include <stdio.h> // For input/output operations
++#include <string.h> // For string manipulation functions
++#include <stdlib.h> // For functions like `atoi()` used for string to integer conversion
++
++// Declare the fundamentals function prototype
++void fundamentals (void);
++
++#endif // End of header guard
+diff --git a/main.c b/main.c
+new file mode 100644
+index 0000000..43a0e6f
+--- /dev/null
++++ b/main.c
+@@ -0,0 +1,46 @@
++// Including header files for the different modules
++#include "fundamentals.h" // For the fundamentals module
++#include "manipulating.h" // For the manipulating module
++#include "converting.h"   // For the converting module
++#include "tokenizing.h"   // For the tokenizing module
++
++// Main function of the program
++int main(void) { 
++    char buff[10]; // Buffer to store user input
++    
++    // Loop to display menu and handle user input
++    do {
++        // Displaying menu options
++        printf("1 - Fundamentals\n");
++        printf("2 - Manipulation\n");
++        printf("3 - Converting\n");
++        printf("4 - Tokenizing\n");
++        printf("0 - Exit\n");
++        printf("Which module to run? \n");
++        
++        // Reading user input
++        fgets(buff, 10, stdin);
++        
++        // Switch case to handle user choice
++        switch (buff[0]) {
++            // If user chooses option 1
++            case '1': 
++                fundamentals(); // Call fundamentals function
++                break;
++            // If user chooses option 2
++            case '2': 
++                manipulating(); // Call manipulating function
++                break;
++            // If user chooses option 3
++            case '3': 
++                converting(); // Call converting function
++                break;
++            // If user chooses option 4
++            case '4': 
++                tokenizing(); // Call tokenizing function
++                break;
++        }
++    } while (buff[0] != '0'); // Loop until user chooses to exit
++    
++    return 0; // Return 0 to indicate successful execution
++}
+diff --git a/manipulating.c b/manipulating.c
+new file mode 100644
+index 0000000..e2bab7e
+--- /dev/null
++++ b/manipulating.c
+@@ -0,0 +1,55 @@
++/* Version 1 */
++
++// Including necessary standard library headers.
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// Function definition for the manipulating function.
++void manipulating(void) {
++    // Printing a message indicating the start of the demonstration for converting strings.
++    printf("*** Start of Converting Strings Demo ***\n");
++
++    // Declaring character arrays `string1` and `string2` to store user input strings.
++    char string1[BUFFER_SIZE];
++    char string2[BUFFER_SIZE];
++
++    // Start a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {
++        // Prompting the user to type the 1st string.
++        printf("Type the 1st string (q - to quit):\n"); 
++
++        // Reading the 1st string from the standard input and storing it in `string1`.
++        fgets(string1, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of `string1`.
++        string1[strlen(string1) - 1] = '\0';
++    
++        // Checking if `string1` is not equal to "q".
++        if ((strcmp(string1, "q") != 0)) {
++            // Prompting the user to type the 2nd string.
++            printf("Type the 2nd string:\n");
++            
++            // Reading the 2nd string from the standard input and storing it in `string2`.
++            fgets(string2, BUFFER_SIZE, stdin);
++            
++            // Removing the newline character from the end of `string2`.
++            string2[strlen(string2) - 1] = '\0';
++            
++            // Concatenating `string2` to `string1`.
++            strcat(string1, string2);
++            
++            // Printing the concatenated string.
++            printf("Concatenated string is '%s'\n", string1);
++        } 
++    } while (strcmp(string1, "q") != 0); // Loop continues until `string1` is "q".
++
++    // Printing a message indicating the end of the demonstration for concatenating strings.
++    printf("*** End of Concatenating Strings Demo ***\n\n");
++
++    /* Version 2 */
++
++    /* Version 3 */
++}
++
++
+diff --git a/manipulating.h b/manipulating.h
+new file mode 100644
+index 0000000..de24853
+--- /dev/null
++++ b/manipulating.h
+@@ -0,0 +1,14 @@
++// MANIPULATING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h>
++#include <string.h>
++
++// Function prototype for the manipulating function.
++void manipulating(void);
++
++#endif // End of header guard
+diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
+new file mode 100644
+index 0000000..3c5e9e2
+Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
+diff --git a/tokenizing-test.txt b/tokenizing-test.txt
+new file mode 100644
+index 0000000..c5a2949
+--- /dev/null
++++ b/tokenizing-test.txt
+@@ -0,0 +1 @@
++Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
+\ No newline at end of file
+diff --git a/tokenizing.c b/tokenizing.c
+new file mode 100644
+index 0000000..daa8647
+--- /dev/null
++++ b/tokenizing.c
+@@ -0,0 +1,61 @@
++// Defining the macro `_CRT_SECURE_NO_WARNINGS` to disable certain warnings related to standard library functions in Windows.
++#define _CRT_SECURE_NO_WARNINGS
++
++// Defining the size of the buffer to be used for storing words.
++#define BUFFER_SIZE 300
++
++// Including the header file `tokenizing.h`, which likely contains function prototypes needed for the `tokenizing` function.
++#include "tokenizing.h"
++
++// Defining the function `tokenizing`, which takes no arguments and returns nothing (`void`).
++void tokenizing(void) {
++    /* Version 1 */
++    // Printing a message indicating the start of the tokenizing words demonstration.
++    printf("*** Start of Tokenizing Words Demo ***\n");
++
++    // Declaring an array of characters named `words` with a size defined by the macro `BUFFER_SIZE`.
++    char words[BUFFER_SIZE];
++
++    // Declaring a pointer to a character named `nextWord`, initially set to NULL.
++    char* nextWord = NULL;
++
++    // Declaring an integer variable `wordsCounter` to keep track of the number of words.
++    int wordsCounter;
++
++    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {   
++        // Prompting the user to type a few words separated by space.
++        printf("Type a few words separated by space (q - to quit): \n");
++
++        // Reading the input string from the standard input and store it in `words`.
++        fgets(words, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of the input string.
++        words[strlen(words) - 1] = '\0';
++
++        // If the input string is not "q", tokenize the words using strtok function and print each word.
++        if (strcmp(words, "q") != 0) {
++            // Tokenizing the input string `words` using space as the delimiter.
++            nextWord = strtok(words, " ");
++
++            // Initializing `wordsCounter` to 1.
++            wordsCounter = 1;
++
++            // Looping through each token (word) obtained by strtok until NULL is returned.
++            while (nextWord) {
++                // Printing the current word along with its index.
++                printf("Word #%d is '%s'\n", wordsCounter++, nextWord);
++
++                // Getting the next token (word).
++                nextWord = strtok(NULL, " ");
++            }
++        }
++    } while (strcmp(words, "q") != 0); // Loop until the input string is "q".
++
++    // Printing a message indicating the end of the tokenizing words demonstration.
++    printf("*** End of Tokenizing Words Demo ***\n\n");
++
++    /* Version 2 */
++
++    /* Version 3 */
++}
+diff --git a/tokenizing.h b/tokenizing.h
+new file mode 100644
+index 0000000..c452778
+--- /dev/null
++++ b/tokenizing.h
+@@ -0,0 +1,14 @@
++// TOKENIZING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _TOKENIZING_H_
++#define _TOKENIZING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h> 
++#include <string.h> 
++
++// Function prototype for the tokenizing function.
++void tokenizing(void);
++
++#endif // End of header guard
diff --git a/manipulating(Victor)-git-log.txt b/manipulating(Victor)-git-log.txt
new file mode 100644
index 0000000..8decb3d
--- /dev/null
+++ b/manipulating(Victor)-git-log.txt
@@ -0,0 +1,1004 @@
+commit 3543cd66023846f76f43572d9f8384895851122f
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Mon Apr 8 14:43:14 2024 -0400
+
+    manipulating(vicotr) eddited for version 2
+
+diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
+index c58c27f..4e2538e 100644
+Binary files a/(Victor)manipulating-test-cases.xlsx and b/(Victor)manipulating-test-cases.xlsx differ
+diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
+index 7a8fda1..3e9e441 100644
+--- a/(Victor)manipulating-test.txt
++++ b/(Victor)manipulating-test.txt
+@@ -1,3 +1,4 @@
++*** Start of Converting Strings Demo ***
+ Type the 1st string (q - to quit):
+ mynameis
+ Type the 2nd string:
+@@ -26,3 +27,34 @@ Concatenated string is 'CP RCp r'
+ Type the 1st string (q - to quit):
+ q
+ *** End of Concatenating Strings Demo ***
++
++
++*** Start of Comparing Strings Demo ***
++Type the 1st string to compare (q - to quit): 
++icanfly
++Type the 2nd string to compare: 
++icantfly
++'icanfly' string is less than 'icantfly'
++Type the 1st string to compare (q - to quit): 
++superman or spiderman
++Type the 2nd string to compare: 
++superman or spiderman
++'superman or spiderman' string is equal to 'superman or spiderman'
++Type the 1st string to compare (q - to quit): 
++cpr is fun
++Type the 2nd string to compare: 
++cpr is hard
++'cpr is fun' string is less than 'cpr is hard'
++Type the 1st string to compare (q - to quit): 
++i am learning c 
++Type the 2nd string to compare: 
++i am learnin  c
++'i am learning c ' string is greater than 'i am learnin  c'
++Type the 1st string to compare (q - to quit): 
++color
++Type the 2nd string to compare: 
++colour
++'color' string is less than 'colour'
++Type the 1st string to compare (q - to quit): 
++q
++*** End of Comparing strings Demo ***
+
+commit eaf26a4848793b8227b8738b2d33c382775aaa50
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Mon Apr 8 13:53:21 2024 -0400
+
+    manipulating(Saksham)
+
+diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
+index 0bbf16d..e395afb 100644
+--- a/(Saksham)manipulting-test.txt
++++ b/(Saksham)manipulting-test.txt
+@@ -1,3 +1,4 @@
++*** Start of Converting Strings Demo ***
+ Type the 1st string (q - to quit):
+ Hello
+ Type the 2nd string:
+@@ -25,4 +26,34 @@ Type the 1st string (q - to quit):
+ No
+ Type the 2nd string:
+ guilt
+-Concatenated string is 'Noguilt'
++Concatenated string is 'Noguilt'
++
++*** Start of Comparing Strings Demo ***
++Type the 1st string to compare (q - to quit): 
++iamnoone
++Type the 2nd string to compare: 
++iamnoone
++'iamnoone' string is equal to 'iamnoone'
++Type the 1st string to compare (q - to quit): 
++get ready 1
++Type the 2nd string to compare: 
++getready 1
++'get ready 1' string is less than 'getready 1'
++Type the 1st string to compare (q - to quit): 
++lemon juice is healthy
++Type the 2nd string to compare: 
++apple juice is healthy
++'lemon juice is healthy' string is greater than 'apple juice is healthy'
++Type the 1st string to compare (q - to quit): 
++i_am a programmer
++Type the 2nd string to compare: 
++i_am a programmer
++'i_am a programmer' string is equal to 'i_am a programmer'
++Type the 1st string to compare (q - to quit): 
++1234 
++Type the 2nd string to compare: 
++2345
++'1234' string is less than '2345'
++Type the 1st string to compare (q - to quit): 
++q
++*** End of Comparing strings Demo ***
+diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
+index f6356d1..072b43e 100644
+Binary files a/(saksham)manipulating-test-cases.xlsx and b/(saksham)manipulating-test-cases.xlsx differ
+diff --git a/manipulating.c b/manipulating.c
+index e2bab7e..fc824ed 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -49,6 +49,55 @@ void manipulating(void) {
+ 
+     /* Version 2 */
+ 
++    // Printing start message
++    printf("*** Start of Comparing Strings Demo ***\n");
++
++    // Declaring variables for storing input strings and result
++    char compare1[BUFFER_SIZE]; 
++    char compare2[BUFFER_SIZE];
++    int result;
++
++    // Starting loop for input and comparison
++    do {
++        // Prompting user for the 1st string to compare
++        printf("Type the 1st string to compare (q - to quit): \n"); 
++        
++        // Getting input for the 1st string
++        fgets(compare1, BUFFER_SIZE, stdin);
++        
++        // Replacing newline character with null terminator
++        compare1[strlen(compare1) - 1] = '\0';
++        
++        // Checking if the input is not 'q'
++        if (strcmp(compare1, "q") != 0) {
++            
++            // Prompting user for the 2nd string to compare
++            printf("Type the 2nd string to compare: \n"); 
++            
++            // Getting input for the 2nd string
++            fgets(compare2, BUFFER_SIZE, stdin);
++            
++            // Replacing newline character with null terminator
++            compare2[strlen(compare2) - 1] = '\0';
++            
++            // Comparing the strings and storing the result
++            result = strcmp(compare1, compare2);
++            
++            // Checking the result of comparison
++            if (result < 0) 
++                printf("'%s' string is less than '%s'\n", compare1, compare2);
++            else if (result == 0)
++                printf("'%s' string is equal to '%s'\n", compare1, compare2);
++            else
++                printf("'%s' string is greater than '%s'\n", compare1, compare2);
++        }
++    // Continuing loop until input is not 'q'
++    } while (strcmp(compare1, "q") != 0);
++
++    // Printing end message
++    printf("*** End of Comparing strings Demo ***\n\n");
++
++
+     /* Version 3 */
+ }
+ 
+diff --git a/tokenizing.c b/tokenizing.c
+index 6409077..01dc441 100644
+--- a/tokenizing.c
++++ b/tokenizing.c
+@@ -57,33 +57,52 @@ void tokenizing(void) {
+ 
+     /* Version 2 */
+ 
++    // Initiating the Tokenizing Phrases Demo
+     printf("*** Start of Tokenizing Phrases Demo ***\n");
+ 
++    // Declaring a character array to store phrases and initializing variables
+     char phrases[BUFFER_SIZE];
+     char *nextPhrase = NULL;
+     int phrasesCounter;
+ 
+-
++    // Starting a loop for inputting phrases
+     do
+     {
+-        printf("Type a few phrases separated by comma (q - to quit): \n"); 
++        // Prompting the user to type phrases separated by commas
++        printf("Typing a few phrases separated by commas (q - to quit): \n");
++        
++        // Reading input from the user
+         fgets(phrases, BUFFER_SIZE, stdin);
++        
++        // Removing the newline character from the input
+         phrases[strlen(phrases) - 1] = '\0';
+ 
++        // Checking if the input is not equal to 'q' (to quit)
+         if (strcmp(phrases, "q") != 0) {
++            
++            // Tokenizing the input string using strtok function
+             nextPhrase = strtok(phrases, ",");
++            
++            // Initializing phrasesCounter variable to 1
+             phrasesCounter = 1;
+ 
++            // Looping through each tokenized phrase
+             while (nextPhrase) {
++                
++                // Printing the phrase number and the tokenized phrase
+                 printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
++                
++                // Getting the next tokenized phrase
+                 nextPhrase = strtok(NULL, ",");
+             }
+         }
+     } while (strcmp(phrases, "q") != 0);
+ 
+-
++    // Printing the end of the Tokenizing phrases Demo
+     printf("*** End of Tokenizing phrases Demo ***\n\n");
+ 
+ 
++
++
+     /* Version 3 */
+ }
+
+commit 3184b4025493b76a325542a7995ce146328f5ca3
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Sun Apr 7 21:50:51 2024 -0400
+
+    Tokenizing version 2 added with updated test case excel file and text file
+
+diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
+index 3c5e9e2..21e4d7c 100644
+Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
+diff --git a/tokenizing-test.txt b/tokenizing-test.txt
+index c5a2949..e935389 100644
+--- a/tokenizing-test.txt
++++ b/tokenizing-test.txt
+@@ -1 +1,27 @@
+-Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
+\ No newline at end of file
++*** Start of Tokenizing Words Demo ***
++Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'*** Start of Tokenizing Phrases Demo ***
++Type a few phrases separated by comma (q - to quit): 
++hi, there
++Phrase #1 is 'hi'
++Phrase #2 is ' there'
++Type a few phrases separated by comma (q - to quit): 
++like, and subscribe, to my, channel
++Phrase #1 is 'like'
++Phrase #2 is ' and subscribe'
++Phrase #3 is ' to my'
++Phrase #4 is ' channel'
++Type a few phrases separated by comma (q - to quit): 
++how, are, you, 
++Phrase #1 is 'how'
++Phrase #2 is ' are'
++Phrase #3 is ' you'
++Phrase #4 is ' '
++Type a few phrases separated by comma (q - to quit): 
++my name is yyz
++Phrase #1 is 'my name is yyz'
++Type a few phrases separated by comma (q - to quit): 
++012
++Phrase #1 is '012'
++Type a few phrases separated by comma (q - to quit): 
++q
++*** End of Tokenizing phrases Demo ***
+\ No newline at end of file
+diff --git a/tokenizing.c b/tokenizing.c
+index daa8647..6409077 100644
+--- a/tokenizing.c
++++ b/tokenizing.c
+@@ -57,5 +57,33 @@ void tokenizing(void) {
+ 
+     /* Version 2 */
+ 
++    printf("*** Start of Tokenizing Phrases Demo ***\n");
++
++    char phrases[BUFFER_SIZE];
++    char *nextPhrase = NULL;
++    int phrasesCounter;
++
++
++    do
++    {
++        printf("Type a few phrases separated by comma (q - to quit): \n"); 
++        fgets(phrases, BUFFER_SIZE, stdin);
++        phrases[strlen(phrases) - 1] = '\0';
++
++        if (strcmp(phrases, "q") != 0) {
++            nextPhrase = strtok(phrases, ",");
++            phrasesCounter = 1;
++
++            while (nextPhrase) {
++                printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
++                nextPhrase = strtok(NULL, ",");
++            }
++        }
++    } while (strcmp(phrases, "q") != 0);
++
++
++    printf("*** End of Tokenizing phrases Demo ***\n\n");
++
++
+     /* Version 3 */
+ }
+
+commit e49b5f4e1ac07c3430183b620507c8860e016ddc
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Sun Apr 7 21:13:48 2024 -0400
+
+    Added Version 2 code, test cases, testing log, and git log
+
+diff --git a/Final-Project-Test-Cases.xlsx b/Final-Project-Test-Cases.xlsx
+new file mode 100644
+index 0000000..8c7d6ed
+Binary files /dev/null and b/Final-Project-Test-Cases.xlsx differ
+diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
+index 22c04b3..cdb93cc 100644
+Binary files a/converting-test-cases.xlsx and b/converting-test-cases.xlsx differ
+diff --git a/converting-test.txt b/converting-test.txt
+index c000d00..47e38ed 100644
+--- a/converting-test.txt
++++ b/converting-test.txt
+@@ -1,3 +1,4 @@
++*** Start of Converting Strings to int Demo ***
+ Type an int numeric string (q - to quit):
+ 5
+ Converted number is 5
+@@ -18,4 +19,24 @@ Type an int numeric string (q - to quit):
+ Converted number is 19
+ Type an int numeric string (q - to quit):
+ 
++
++*** Start of Converting Strings to double Demo ***
++Type the double numeric string (q - to quit):
++5.32
++Converted number is 5.320000
++Type the double numeric string (q - to quit):
++600.99
++Converted number is 600.990000
++Type the double numeric string (q - to quit):
++12.222
++Converted number is 12.222000
++Type the double numeric string (q - to quit):
++lol
++Converted number is 0.000000
++Type the double numeric string (q - to quit):
++no way
++Converted number is 0.000000
++Type the double numeric string (q - to quit):
++99.9876
++Converted number is 99.987600
+ 
+\ No newline at end of file
+diff --git a/converting.c b/converting.c
+index 8e417a1..210c4e2 100644
+--- a/converting.c
++++ b/converting.c
+@@ -43,15 +43,34 @@ void converting(void) {
+ 
+     // Printing a message indicating the end of the demonstration for converting strings to integers.
+     printf("*** End of Converting Strings to int Demo ***\n\n");
+-}
++
+ 
+ 
+ /* Version 2 */
++    printf("*** Start of Converting Strings to double Demo ***\n"); // Printing a start message
+ 
++    char doubleString[BUFFER_SIZE]; // Declaring a character array to store the input string
++    double doubleNumber; // Declaring a variable to store the converted double number
+ 
++    do { // Starting a do-while loop
++        printf("Type the double numeric string (q - to quit):\n"); // Prompting the user to input a double numeric string
++        fgets(doubleString, BUFFER_SIZE, stdin); // Reading the input string from the user
++        doubleString[strlen(doubleString) -1] = '\0'; // Removing the trailing newline character from the input string
++
++        if ((strcmp(doubleString, "q") != 0)) { // Checking if the input string is not equal to "q"
++            doubleNumber = atof(doubleString); // Converting the input string to a double number
++            printf("Converted number is %f\n", doubleNumber); // Printing the converted double number with two decimal places
++        }
++    } while (strcmp(doubleString, "q") != 0); // Continuing the loop until the input string is "q"
++
++    printf("*** End of Converting Strings to double Demo ***\n\n"); // Printing an end message
+ 
+-/* Version 3 */
+ 
+ 
+ 
+ 
++/* Version 3 */
++
++
++}
++
+diff --git a/my_program b/my_program
+new file mode 100755
+index 0000000..2768dbe
+Binary files /dev/null and b/my_program differ
+diff --git a/~$(saksham)manipulating-test-cases.xlsx b/~$(saksham)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..68f7efc
+Binary files /dev/null and b/~$(saksham)manipulating-test-cases.xlsx differ
+
+commit 9023f3f6d405e49d6fcbfd416f200b3b5cf7678d
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 17:03:24 2024 -0400
+
+    delete file
+     Please enter the commit message for your changes. Lines starting
+
+diff --git a/newfile.txt b/newfile.txt
+deleted file mode 100644
+index e69de29..0000000
+
+commit 93294306b9f549715f946d2d3447c5ab4e7d0265
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 17:02:02 2024 -0400
+
+    random file
+
+diff --git a/newfile.txt b/newfile.txt
+new file mode 100644
+index 0000000..e69de29
+
+commit 5d2165e5901182b801e35a3329c56fd3cdfc4314
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 16:46:18 2024 -0400
+
+    First commit
+
+diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
+new file mode 100644
+index 0000000..0bbf16d
+--- /dev/null
++++ b/(Saksham)manipulting-test.txt
+@@ -0,0 +1,28 @@
++Type the 1st string (q - to quit):
++Hello
++Type the 2nd string:
++ Saksham
++Concatenated string is 'Hello Saksham'
++Type the 1st string (q - to quit):
++Hi
++Type the 2nd string:
++There
++Concatenated string is 'HiThere'
++Type the 1st string (q - to quit):
++my
++Type the 2nd string:
++q
++Concatenated string is 'myq'
++Type the 1st string (q - to quit):
++q
++*** End of Concatenating Strings Demo ***
++Type the 1st string (q - to quit):
++BE A HERO NOT A COWARD
++Type the 2nd string:
++NOT A COWARD
++Concatenated string is 'BE A HERO NOT A COWARDNoguilt'
++Type the 1st string (q - to quit):
++No
++Type the 2nd string:
++guilt
++Concatenated string is 'Noguilt'
+diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..c58c27f
+Binary files /dev/null and b/(Victor)manipulating-test-cases.xlsx differ
+diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
+new file mode 100644
+index 0000000..7a8fda1
+--- /dev/null
++++ b/(Victor)manipulating-test.txt
+@@ -0,0 +1,28 @@
++Type the 1st string (q - to quit):
++mynameis
++Type the 2nd string:
++Mordi
++Concatenated string is 'mynameisMordi'
++Type the 1st string (q - to quit):
++no
++Type the 2nd string:
++lmk
++Concatenated string is 'no lmk'
++Type the 1st string (q - to quit):
++CPR.   
++Type the 2nd string:
++PROJECT
++Concatenated string is 'CPR.   PROJECT'
++Type the 1st string (q - to quit):
++Iphone          
++Type the 2nd string:
++is my fav
++Concatenated string is 'Iphone is my fav'
++Type the 1st string (q - to quit):
++CP R
++Type the 2nd string:
++Cp r
++Concatenated string is 'CP RCp r'
++Type the 1st string (q - to quit):
++q
++*** End of Concatenating Strings Demo ***
+diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..f6356d1
+Binary files /dev/null and b/(saksham)manipulating-test-cases.xlsx differ
+diff --git a/.DS_Store b/.DS_Store
+new file mode 100644
+index 0000000..019d636
+Binary files /dev/null and b/.DS_Store differ
+diff --git a/Final-Project-Plan (1).xlsx b/Final-Project-Plan (1).xlsx
+new file mode 100644
+index 0000000..32132b1
+Binary files /dev/null and b/Final-Project-Plan (1).xlsx differ
+diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
+new file mode 100644
+index 0000000..22c04b3
+Binary files /dev/null and b/converting-test-cases.xlsx differ
+diff --git a/converting-test.txt b/converting-test.txt
+new file mode 100644
+index 0000000..c000d00
+--- /dev/null
++++ b/converting-test.txt
+@@ -0,0 +1,21 @@
++Type an int numeric string (q - to quit):
++5
++Converted number is 5
++Type an int numeric string (q - to quit):
++8910
++Converted number is 8910
++Type an int numeric string (q - to quit):
++apple
++Converted number is 0
++Type an int numeric string (q - to quit):
++I_LOVE_CPR
++Converted number is 0
++Type an int numeric string (q - to quit):
++200
++Converted number is 200
++Type an int numeric string (q - to quit):
++19 23
++Converted number is 19
++Type an int numeric string (q - to quit):
++
++
+\ No newline at end of file
+diff --git a/converting.c b/converting.c
+new file mode 100644
+index 0000000..8e417a1
+--- /dev/null
++++ b/converting.c
+@@ -0,0 +1,57 @@
++// Version 1
++
++// This line  `#define _CRT_SECURE_NO_WARNINGS` is to disable certain warnings related to standard library functions in Windows.
++#define _CRT_SECURE_NO_WARNINGS
++
++// Defining the size of the buffer to be used for storing the input string.
++#define BUFFER_SIZE 80
++
++// Including the header file `converting.h`, which likely contains function prototypes needed for the `converting` function.
++#include "converting.h"
++
++// Commenting indicating the relation of the `converting` function to the VI (Version 1) of the code.
++// VI
++
++// Defining the function `converting`, which takes no arguments and returns nothing (`void`).
++void converting(void) {
++    // Printing a message indicating the start of the demonstration for converting strings to integers.
++    printf("*** Start of Converting Strings to int Demo ***\n");
++
++    // Declaring an array of characters named `intString` with a size defined by the macro `BUFFER_SIZE`.
++    char intString[BUFFER_SIZE];
++
++    // Declaring an integer variable `intNumber` which will hold the converted integer value.
++    int intNumber;
++
++    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {
++        // Prompting the user to type an integer numeric string.
++        printf("Type an int numeric string (q - to quit):\n"); 
++
++        // Reading the input string from the standard input and store it in `intString`.
++        fgets(intString, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of the input string.
++        intString[strlen(intString) - 1] = '\0';
++
++        // Converting the string `intString` to an integer using the `atoi` function and store the result in `intNumber`.
++        if (strcmp(intString, "q") != 0) {
++            intNumber = atoi(intString);
++            printf("Converted number is %d\n", intNumber);
++        }
++    } while (strcmp(intString, "q") != 0);
++
++    // Printing a message indicating the end of the demonstration for converting strings to integers.
++    printf("*** End of Converting Strings to int Demo ***\n\n");
++}
++
++
++/* Version 2 */
++
++
++
++/* Version 3 */
++
++
++
++
+diff --git a/converting.h b/converting.h
+new file mode 100644
+index 0000000..e229834
+--- /dev/null
++++ b/converting.h
+@@ -0,0 +1,15 @@
++// CONVERTING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h> 
++#include <string.h> 
++#include <stdlib.h>
++
++// Function prototype for the converting function.
++void converting(void);
++
++#endif // End of header guard
+diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
+new file mode 100644
+index 0000000..8447936
+Binary files /dev/null and b/fundamentals-test-cases.xlsx differ
+diff --git a/fundamentals-test.txt b/fundamentals-test.txt
+new file mode 100644
+index 0000000..d43c9c0
+--- /dev/null
++++ b/fundamentals-test.txt
+@@ -0,0 +1,29 @@
++Type not empty string (q- to quit):
++hello guys
++Type the character position within the string: 
++2
++The character found at 2 position is 'l'
++Type not empty string (q- to quit):
++BeAlright       
++Type the character position within the string: 
++6
++The character found at 6 position is 'g'
++Type not empty string (q- to quit):
++lllllllll
++Type the character position within the string: 
++20
++Too big... Position reduced to max. available
++The character found at 8 position is 'l'
++Type not empty string (q- to quit):
++q
++*** End of Indexing Strings Demo ***
++Type not empty string (q- to quit):
++sjncsa/';';
++Type the character position within the string: 
++8
++The character found at 8 position is ';'
++Type not empty string (q- to quit):
++12345LAB
++Type the character position within the string: 
++2
++The character found at 2 position is '3'
+diff --git a/fundamentals.c b/fundamentals.c
+new file mode 100644
+index 0000000..86d67c0
+--- /dev/null
++++ b/fundamentals.c
+@@ -0,0 +1,71 @@
++#include "fundamentals.h"
++
++// Disable certain warnings related to standard library functions in Windows
++#define _CRT_SECURE_NO_WARNINGS
++
++// Define buffer size for storing strings
++#define BUFFER_SIZE 80 
++
++// Define size for input buffer storing numeric inputs
++#define NUM_INPUT_SIZE 10
++
++// Include the header file again to access its functionality
++#include "fundamentals.h"
++
++// Define the function `fundamentals`
++void fundamentals (void) {
++    // Start of the indexing strings demonstration
++    printf("*** Start of Indexing Strings Demo ***\n");
++
++    // Declare a buffer to store the input string
++    char buffer1 [BUFFER_SIZE];
++
++    // Declare a buffer to store numeric input
++    char numInput [NUM_INPUT_SIZE];
++
++    // Declare a variable to store the position of the character
++    size_t position;
++
++    // Start a loop for user interaction
++    do
++    {
++        // Prompt the user to input a non-empty string
++        printf("Type not empty string (q- to quit):\n");
++        
++        // Read the input string from the user
++        fgets (buffer1, BUFFER_SIZE, stdin);
++
++        // Remove the newline character from the input string
++        buffer1 [strlen(buffer1) - 1] = '\0';
++
++        // If the input is not "q", proceed with character position input
++        if (strcmp (buffer1, "q") != 0) {
++            // Prompt the user to input the character position within the string
++            printf(("Type the character position within the string: \n"));
++            
++            // Read the numeric input for character position
++            fgets (numInput, NUM_INPUT_SIZE, stdin) ;
++            
++            // Remove the newline character from the numeric input
++            numInput [strlen (numInput)- 1] = '\0';
++            
++            // Convert the numeric input to an integer
++            position = atoi(numInput);
++            
++            // If the position is greater than or equal to the length of the string, adjust it
++            if (position >= strlen(buffer1))
++            {
++                position = strlen(buffer1) - 1;
++                printf("Too big... Position reduced to max. available\n");
++            }
++            
++            // Print the character found at the specified position within the string
++            printf ("The character found at %d position is \'%c'\n", (int)position, buffer1[position]);
++        }
++    } while (strcmp (buffer1, "q") != 0); // Continue looping until the user inputs "q"
++
++    // End of the indexing strings demonstration
++    printf("*** End of Indexing Strings Demo ***\n\n");
++
++    // Version 2 and Version 3 are left empty for future implementations
++}
+diff --git a/fundamentals.h b/fundamentals.h
+new file mode 100644
+index 0000000..f49fe48
+--- /dev/null
++++ b/fundamentals.h
+@@ -0,0 +1,13 @@
++// FUNDAMENTALS MODULE HEADER
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++// Include necessary standard library headers
++#include <stdio.h> // For input/output operations
++#include <string.h> // For string manipulation functions
++#include <stdlib.h> // For functions like `atoi()` used for string to integer conversion
++
++// Declare the fundamentals function prototype
++void fundamentals (void);
++
++#endif // End of header guard
+diff --git a/main.c b/main.c
+new file mode 100644
+index 0000000..43a0e6f
+--- /dev/null
++++ b/main.c
+@@ -0,0 +1,46 @@
++// Including header files for the different modules
++#include "fundamentals.h" // For the fundamentals module
++#include "manipulating.h" // For the manipulating module
++#include "converting.h"   // For the converting module
++#include "tokenizing.h"   // For the tokenizing module
++
++// Main function of the program
++int main(void) { 
++    char buff[10]; // Buffer to store user input
++    
++    // Loop to display menu and handle user input
++    do {
++        // Displaying menu options
++        printf("1 - Fundamentals\n");
++        printf("2 - Manipulation\n");
++        printf("3 - Converting\n");
++        printf("4 - Tokenizing\n");
++        printf("0 - Exit\n");
++        printf("Which module to run? \n");
++        
++        // Reading user input
++        fgets(buff, 10, stdin);
++        
++        // Switch case to handle user choice
++        switch (buff[0]) {
++            // If user chooses option 1
++            case '1': 
++                fundamentals(); // Call fundamentals function
++                break;
++            // If user chooses option 2
++            case '2': 
++                manipulating(); // Call manipulating function
++                break;
++            // If user chooses option 3
++            case '3': 
++                converting(); // Call converting function
++                break;
++            // If user chooses option 4
++            case '4': 
++                tokenizing(); // Call tokenizing function
++                break;
++        }
++    } while (buff[0] != '0'); // Loop until user chooses to exit
++    
++    return 0; // Return 0 to indicate successful execution
++}
+diff --git a/manipulating.c b/manipulating.c
+new file mode 100644
+index 0000000..e2bab7e
+--- /dev/null
++++ b/manipulating.c
+@@ -0,0 +1,55 @@
++/* Version 1 */
++
++// Including necessary standard library headers.
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// Function definition for the manipulating function.
++void manipulating(void) {
++    // Printing a message indicating the start of the demonstration for converting strings.
++    printf("*** Start of Converting Strings Demo ***\n");
++
++    // Declaring character arrays `string1` and `string2` to store user input strings.
++    char string1[BUFFER_SIZE];
++    char string2[BUFFER_SIZE];
++
++    // Start a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {
++        // Prompting the user to type the 1st string.
++        printf("Type the 1st string (q - to quit):\n"); 
++
++        // Reading the 1st string from the standard input and storing it in `string1`.
++        fgets(string1, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of `string1`.
++        string1[strlen(string1) - 1] = '\0';
++    
++        // Checking if `string1` is not equal to "q".
++        if ((strcmp(string1, "q") != 0)) {
++            // Prompting the user to type the 2nd string.
++            printf("Type the 2nd string:\n");
++            
++            // Reading the 2nd string from the standard input and storing it in `string2`.
++            fgets(string2, BUFFER_SIZE, stdin);
++            
++            // Removing the newline character from the end of `string2`.
++            string2[strlen(string2) - 1] = '\0';
++            
++            // Concatenating `string2` to `string1`.
++            strcat(string1, string2);
++            
++            // Printing the concatenated string.
++            printf("Concatenated string is '%s'\n", string1);
++        } 
++    } while (strcmp(string1, "q") != 0); // Loop continues until `string1` is "q".
++
++    // Printing a message indicating the end of the demonstration for concatenating strings.
++    printf("*** End of Concatenating Strings Demo ***\n\n");
++
++    /* Version 2 */
++
++    /* Version 3 */
++}
++
++
+diff --git a/manipulating.h b/manipulating.h
+new file mode 100644
+index 0000000..de24853
+--- /dev/null
++++ b/manipulating.h
+@@ -0,0 +1,14 @@
++// MANIPULATING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h>
++#include <string.h>
++
++// Function prototype for the manipulating function.
++void manipulating(void);
++
++#endif // End of header guard
+diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
+new file mode 100644
+index 0000000..3c5e9e2
+Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
+diff --git a/tokenizing-test.txt b/tokenizing-test.txt
+new file mode 100644
+index 0000000..c5a2949
+--- /dev/null
++++ b/tokenizing-test.txt
+@@ -0,0 +1 @@
++Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
+\ No newline at end of file
+diff --git a/tokenizing.c b/tokenizing.c
+new file mode 100644
+index 0000000..daa8647
+--- /dev/null
++++ b/tokenizing.c
+@@ -0,0 +1,61 @@
++// Defining the macro `_CRT_SECURE_NO_WARNINGS` to disable certain warnings related to standard library functions in Windows.
++#define _CRT_SECURE_NO_WARNINGS
++
++// Defining the size of the buffer to be used for storing words.
++#define BUFFER_SIZE 300
++
++// Including the header file `tokenizing.h`, which likely contains function prototypes needed for the `tokenizing` function.
++#include "tokenizing.h"
++
++// Defining the function `tokenizing`, which takes no arguments and returns nothing (`void`).
++void tokenizing(void) {
++    /* Version 1 */
++    // Printing a message indicating the start of the tokenizing words demonstration.
++    printf("*** Start of Tokenizing Words Demo ***\n");
++
++    // Declaring an array of characters named `words` with a size defined by the macro `BUFFER_SIZE`.
++    char words[BUFFER_SIZE];
++
++    // Declaring a pointer to a character named `nextWord`, initially set to NULL.
++    char* nextWord = NULL;
++
++    // Declaring an integer variable `wordsCounter` to keep track of the number of words.
++    int wordsCounter;
++
++    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {   
++        // Prompting the user to type a few words separated by space.
++        printf("Type a few words separated by space (q - to quit): \n");
++
++        // Reading the input string from the standard input and store it in `words`.
++        fgets(words, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of the input string.
++        words[strlen(words) - 1] = '\0';
++
++        // If the input string is not "q", tokenize the words using strtok function and print each word.
++        if (strcmp(words, "q") != 0) {
++            // Tokenizing the input string `words` using space as the delimiter.
++            nextWord = strtok(words, " ");
++
++            // Initializing `wordsCounter` to 1.
++            wordsCounter = 1;
++
++            // Looping through each token (word) obtained by strtok until NULL is returned.
++            while (nextWord) {
++                // Printing the current word along with its index.
++                printf("Word #%d is '%s'\n", wordsCounter++, nextWord);
++
++                // Getting the next token (word).
++                nextWord = strtok(NULL, " ");
++            }
++        }
++    } while (strcmp(words, "q") != 0); // Loop until the input string is "q".
++
++    // Printing a message indicating the end of the tokenizing words demonstration.
++    printf("*** End of Tokenizing Words Demo ***\n\n");
++
++    /* Version 2 */
++
++    /* Version 3 */
++}
+diff --git a/tokenizing.h b/tokenizing.h
+new file mode 100644
+index 0000000..c452778
+--- /dev/null
++++ b/tokenizing.h
+@@ -0,0 +1,14 @@
++// TOKENIZING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _TOKENIZING_H_
++#define _TOKENIZING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h> 
++#include <string.h> 
++
++// Function prototype for the tokenizing function.
++void tokenizing(void);
++
++#endif // End of header guard
diff --git a/my_program b/my_program
deleted file mode 100755
index 2768dbe..0000000
Binary files a/my_program and /dev/null differ
diff --git a/tokenizing-git-log.txt b/tokenizing-git-log.txt
new file mode 100644
index 0000000..0da9092
--- /dev/null
+++ b/tokenizing-git-log.txt
@@ -0,0 +1,775 @@
+commit 3184b4025493b76a325542a7995ce146328f5ca3
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Sun Apr 7 21:50:51 2024 -0400
+
+    Tokenizing version 2 added with updated test case excel file and text file
+
+diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
+index 3c5e9e2..21e4d7c 100644
+Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
+diff --git a/tokenizing-test.txt b/tokenizing-test.txt
+index c5a2949..e935389 100644
+--- a/tokenizing-test.txt
++++ b/tokenizing-test.txt
+@@ -1 +1,27 @@
+-Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
+\ No newline at end of file
++*** Start of Tokenizing Words Demo ***
++Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'*** Start of Tokenizing Phrases Demo ***
++Type a few phrases separated by comma (q - to quit): 
++hi, there
++Phrase #1 is 'hi'
++Phrase #2 is ' there'
++Type a few phrases separated by comma (q - to quit): 
++like, and subscribe, to my, channel
++Phrase #1 is 'like'
++Phrase #2 is ' and subscribe'
++Phrase #3 is ' to my'
++Phrase #4 is ' channel'
++Type a few phrases separated by comma (q - to quit): 
++how, are, you, 
++Phrase #1 is 'how'
++Phrase #2 is ' are'
++Phrase #3 is ' you'
++Phrase #4 is ' '
++Type a few phrases separated by comma (q - to quit): 
++my name is yyz
++Phrase #1 is 'my name is yyz'
++Type a few phrases separated by comma (q - to quit): 
++012
++Phrase #1 is '012'
++Type a few phrases separated by comma (q - to quit): 
++q
++*** End of Tokenizing phrases Demo ***
+\ No newline at end of file
+diff --git a/tokenizing.c b/tokenizing.c
+index daa8647..6409077 100644
+--- a/tokenizing.c
++++ b/tokenizing.c
+@@ -57,5 +57,33 @@ void tokenizing(void) {
+ 
+     /* Version 2 */
+ 
++    printf("*** Start of Tokenizing Phrases Demo ***\n");
++
++    char phrases[BUFFER_SIZE];
++    char *nextPhrase = NULL;
++    int phrasesCounter;
++
++
++    do
++    {
++        printf("Type a few phrases separated by comma (q - to quit): \n"); 
++        fgets(phrases, BUFFER_SIZE, stdin);
++        phrases[strlen(phrases) - 1] = '\0';
++
++        if (strcmp(phrases, "q") != 0) {
++            nextPhrase = strtok(phrases, ",");
++            phrasesCounter = 1;
++
++            while (nextPhrase) {
++                printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
++                nextPhrase = strtok(NULL, ",");
++            }
++        }
++    } while (strcmp(phrases, "q") != 0);
++
++
++    printf("*** End of Tokenizing phrases Demo ***\n\n");
++
++
+     /* Version 3 */
+ }
+
+commit e49b5f4e1ac07c3430183b620507c8860e016ddc
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Sun Apr 7 21:13:48 2024 -0400
+
+    Added Version 2 code, test cases, testing log, and git log
+
+diff --git a/Final-Project-Test-Cases.xlsx b/Final-Project-Test-Cases.xlsx
+new file mode 100644
+index 0000000..8c7d6ed
+Binary files /dev/null and b/Final-Project-Test-Cases.xlsx differ
+diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
+index 22c04b3..cdb93cc 100644
+Binary files a/converting-test-cases.xlsx and b/converting-test-cases.xlsx differ
+diff --git a/converting-test.txt b/converting-test.txt
+index c000d00..47e38ed 100644
+--- a/converting-test.txt
++++ b/converting-test.txt
+@@ -1,3 +1,4 @@
++*** Start of Converting Strings to int Demo ***
+ Type an int numeric string (q - to quit):
+ 5
+ Converted number is 5
+@@ -18,4 +19,24 @@ Type an int numeric string (q - to quit):
+ Converted number is 19
+ Type an int numeric string (q - to quit):
+ 
++
++*** Start of Converting Strings to double Demo ***
++Type the double numeric string (q - to quit):
++5.32
++Converted number is 5.320000
++Type the double numeric string (q - to quit):
++600.99
++Converted number is 600.990000
++Type the double numeric string (q - to quit):
++12.222
++Converted number is 12.222000
++Type the double numeric string (q - to quit):
++lol
++Converted number is 0.000000
++Type the double numeric string (q - to quit):
++no way
++Converted number is 0.000000
++Type the double numeric string (q - to quit):
++99.9876
++Converted number is 99.987600
+ 
+\ No newline at end of file
+diff --git a/converting.c b/converting.c
+index 8e417a1..210c4e2 100644
+--- a/converting.c
++++ b/converting.c
+@@ -43,15 +43,34 @@ void converting(void) {
+ 
+     // Printing a message indicating the end of the demonstration for converting strings to integers.
+     printf("*** End of Converting Strings to int Demo ***\n\n");
+-}
++
+ 
+ 
+ /* Version 2 */
++    printf("*** Start of Converting Strings to double Demo ***\n"); // Printing a start message
+ 
++    char doubleString[BUFFER_SIZE]; // Declaring a character array to store the input string
++    double doubleNumber; // Declaring a variable to store the converted double number
+ 
++    do { // Starting a do-while loop
++        printf("Type the double numeric string (q - to quit):\n"); // Prompting the user to input a double numeric string
++        fgets(doubleString, BUFFER_SIZE, stdin); // Reading the input string from the user
++        doubleString[strlen(doubleString) -1] = '\0'; // Removing the trailing newline character from the input string
++
++        if ((strcmp(doubleString, "q") != 0)) { // Checking if the input string is not equal to "q"
++            doubleNumber = atof(doubleString); // Converting the input string to a double number
++            printf("Converted number is %f\n", doubleNumber); // Printing the converted double number with two decimal places
++        }
++    } while (strcmp(doubleString, "q") != 0); // Continuing the loop until the input string is "q"
++
++    printf("*** End of Converting Strings to double Demo ***\n\n"); // Printing an end message
+ 
+-/* Version 3 */
+ 
+ 
+ 
+ 
++/* Version 3 */
++
++
++}
++
+diff --git a/my_program b/my_program
+new file mode 100755
+index 0000000..2768dbe
+Binary files /dev/null and b/my_program differ
+diff --git a/~$(saksham)manipulating-test-cases.xlsx b/~$(saksham)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..68f7efc
+Binary files /dev/null and b/~$(saksham)manipulating-test-cases.xlsx differ
+
+commit 9023f3f6d405e49d6fcbfd416f200b3b5cf7678d
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 17:03:24 2024 -0400
+
+    delete file
+     Please enter the commit message for your changes. Lines starting
+
+diff --git a/newfile.txt b/newfile.txt
+deleted file mode 100644
+index e69de29..0000000
+
+commit 93294306b9f549715f946d2d3447c5ab4e7d0265
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 17:02:02 2024 -0400
+
+    random file
+
+diff --git a/newfile.txt b/newfile.txt
+new file mode 100644
+index 0000000..e69de29
+
+commit 5d2165e5901182b801e35a3329c56fd3cdfc4314
+Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
+Date:   Wed Apr 3 16:46:18 2024 -0400
+
+    First commit
+
+diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
+new file mode 100644
+index 0000000..0bbf16d
+--- /dev/null
++++ b/(Saksham)manipulting-test.txt
+@@ -0,0 +1,28 @@
++Type the 1st string (q - to quit):
++Hello
++Type the 2nd string:
++ Saksham
++Concatenated string is 'Hello Saksham'
++Type the 1st string (q - to quit):
++Hi
++Type the 2nd string:
++There
++Concatenated string is 'HiThere'
++Type the 1st string (q - to quit):
++my
++Type the 2nd string:
++q
++Concatenated string is 'myq'
++Type the 1st string (q - to quit):
++q
++*** End of Concatenating Strings Demo ***
++Type the 1st string (q - to quit):
++BE A HERO NOT A COWARD
++Type the 2nd string:
++NOT A COWARD
++Concatenated string is 'BE A HERO NOT A COWARDNoguilt'
++Type the 1st string (q - to quit):
++No
++Type the 2nd string:
++guilt
++Concatenated string is 'Noguilt'
+diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..c58c27f
+Binary files /dev/null and b/(Victor)manipulating-test-cases.xlsx differ
+diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
+new file mode 100644
+index 0000000..7a8fda1
+--- /dev/null
++++ b/(Victor)manipulating-test.txt
+@@ -0,0 +1,28 @@
++Type the 1st string (q - to quit):
++mynameis
++Type the 2nd string:
++Mordi
++Concatenated string is 'mynameisMordi'
++Type the 1st string (q - to quit):
++no
++Type the 2nd string:
++lmk
++Concatenated string is 'no lmk'
++Type the 1st string (q - to quit):
++CPR.   
++Type the 2nd string:
++PROJECT
++Concatenated string is 'CPR.   PROJECT'
++Type the 1st string (q - to quit):
++Iphone          
++Type the 2nd string:
++is my fav
++Concatenated string is 'Iphone is my fav'
++Type the 1st string (q - to quit):
++CP R
++Type the 2nd string:
++Cp r
++Concatenated string is 'CP RCp r'
++Type the 1st string (q - to quit):
++q
++*** End of Concatenating Strings Demo ***
+diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..f6356d1
+Binary files /dev/null and b/(saksham)manipulating-test-cases.xlsx differ
+diff --git a/.DS_Store b/.DS_Store
+new file mode 100644
+index 0000000..019d636
+Binary files /dev/null and b/.DS_Store differ
+diff --git a/Final-Project-Plan (1).xlsx b/Final-Project-Plan (1).xlsx
+new file mode 100644
+index 0000000..32132b1
+Binary files /dev/null and b/Final-Project-Plan (1).xlsx differ
+diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
+new file mode 100644
+index 0000000..22c04b3
+Binary files /dev/null and b/converting-test-cases.xlsx differ
+diff --git a/converting-test.txt b/converting-test.txt
+new file mode 100644
+index 0000000..c000d00
+--- /dev/null
++++ b/converting-test.txt
+@@ -0,0 +1,21 @@
++Type an int numeric string (q - to quit):
++5
++Converted number is 5
++Type an int numeric string (q - to quit):
++8910
++Converted number is 8910
++Type an int numeric string (q - to quit):
++apple
++Converted number is 0
++Type an int numeric string (q - to quit):
++I_LOVE_CPR
++Converted number is 0
++Type an int numeric string (q - to quit):
++200
++Converted number is 200
++Type an int numeric string (q - to quit):
++19 23
++Converted number is 19
++Type an int numeric string (q - to quit):
++
++
+\ No newline at end of file
+diff --git a/converting.c b/converting.c
+new file mode 100644
+index 0000000..8e417a1
+--- /dev/null
++++ b/converting.c
+@@ -0,0 +1,57 @@
++// Version 1
++
++// This line  `#define _CRT_SECURE_NO_WARNINGS` is to disable certain warnings related to standard library functions in Windows.
++#define _CRT_SECURE_NO_WARNINGS
++
++// Defining the size of the buffer to be used for storing the input string.
++#define BUFFER_SIZE 80
++
++// Including the header file `converting.h`, which likely contains function prototypes needed for the `converting` function.
++#include "converting.h"
++
++// Commenting indicating the relation of the `converting` function to the VI (Version 1) of the code.
++// VI
++
++// Defining the function `converting`, which takes no arguments and returns nothing (`void`).
++void converting(void) {
++    // Printing a message indicating the start of the demonstration for converting strings to integers.
++    printf("*** Start of Converting Strings to int Demo ***\n");
++
++    // Declaring an array of characters named `intString` with a size defined by the macro `BUFFER_SIZE`.
++    char intString[BUFFER_SIZE];
++
++    // Declaring an integer variable `intNumber` which will hold the converted integer value.
++    int intNumber;
++
++    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {
++        // Prompting the user to type an integer numeric string.
++        printf("Type an int numeric string (q - to quit):\n"); 
++
++        // Reading the input string from the standard input and store it in `intString`.
++        fgets(intString, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of the input string.
++        intString[strlen(intString) - 1] = '\0';
++
++        // Converting the string `intString` to an integer using the `atoi` function and store the result in `intNumber`.
++        if (strcmp(intString, "q") != 0) {
++            intNumber = atoi(intString);
++            printf("Converted number is %d\n", intNumber);
++        }
++    } while (strcmp(intString, "q") != 0);
++
++    // Printing a message indicating the end of the demonstration for converting strings to integers.
++    printf("*** End of Converting Strings to int Demo ***\n\n");
++}
++
++
++/* Version 2 */
++
++
++
++/* Version 3 */
++
++
++
++
+diff --git a/converting.h b/converting.h
+new file mode 100644
+index 0000000..e229834
+--- /dev/null
++++ b/converting.h
+@@ -0,0 +1,15 @@
++// CONVERTING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h> 
++#include <string.h> 
++#include <stdlib.h>
++
++// Function prototype for the converting function.
++void converting(void);
++
++#endif // End of header guard
+diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
+new file mode 100644
+index 0000000..8447936
+Binary files /dev/null and b/fundamentals-test-cases.xlsx differ
+diff --git a/fundamentals-test.txt b/fundamentals-test.txt
+new file mode 100644
+index 0000000..d43c9c0
+--- /dev/null
++++ b/fundamentals-test.txt
+@@ -0,0 +1,29 @@
++Type not empty string (q- to quit):
++hello guys
++Type the character position within the string: 
++2
++The character found at 2 position is 'l'
++Type not empty string (q- to quit):
++BeAlright       
++Type the character position within the string: 
++6
++The character found at 6 position is 'g'
++Type not empty string (q- to quit):
++lllllllll
++Type the character position within the string: 
++20
++Too big... Position reduced to max. available
++The character found at 8 position is 'l'
++Type not empty string (q- to quit):
++q
++*** End of Indexing Strings Demo ***
++Type not empty string (q- to quit):
++sjncsa/';';
++Type the character position within the string: 
++8
++The character found at 8 position is ';'
++Type not empty string (q- to quit):
++12345LAB
++Type the character position within the string: 
++2
++The character found at 2 position is '3'
+diff --git a/fundamentals.c b/fundamentals.c
+new file mode 100644
+index 0000000..86d67c0
+--- /dev/null
++++ b/fundamentals.c
+@@ -0,0 +1,71 @@
++#include "fundamentals.h"
++
++// Disable certain warnings related to standard library functions in Windows
++#define _CRT_SECURE_NO_WARNINGS
++
++// Define buffer size for storing strings
++#define BUFFER_SIZE 80 
++
++// Define size for input buffer storing numeric inputs
++#define NUM_INPUT_SIZE 10
++
++// Include the header file again to access its functionality
++#include "fundamentals.h"
++
++// Define the function `fundamentals`
++void fundamentals (void) {
++    // Start of the indexing strings demonstration
++    printf("*** Start of Indexing Strings Demo ***\n");
++
++    // Declare a buffer to store the input string
++    char buffer1 [BUFFER_SIZE];
++
++    // Declare a buffer to store numeric input
++    char numInput [NUM_INPUT_SIZE];
++
++    // Declare a variable to store the position of the character
++    size_t position;
++
++    // Start a loop for user interaction
++    do
++    {
++        // Prompt the user to input a non-empty string
++        printf("Type not empty string (q- to quit):\n");
++        
++        // Read the input string from the user
++        fgets (buffer1, BUFFER_SIZE, stdin);
++
++        // Remove the newline character from the input string
++        buffer1 [strlen(buffer1) - 1] = '\0';
++
++        // If the input is not "q", proceed with character position input
++        if (strcmp (buffer1, "q") != 0) {
++            // Prompt the user to input the character position within the string
++            printf(("Type the character position within the string: \n"));
++            
++            // Read the numeric input for character position
++            fgets (numInput, NUM_INPUT_SIZE, stdin) ;
++            
++            // Remove the newline character from the numeric input
++            numInput [strlen (numInput)- 1] = '\0';
++            
++            // Convert the numeric input to an integer
++            position = atoi(numInput);
++            
++            // If the position is greater than or equal to the length of the string, adjust it
++            if (position >= strlen(buffer1))
++            {
++                position = strlen(buffer1) - 1;
++                printf("Too big... Position reduced to max. available\n");
++            }
++            
++            // Print the character found at the specified position within the string
++            printf ("The character found at %d position is \'%c'\n", (int)position, buffer1[position]);
++        }
++    } while (strcmp (buffer1, "q") != 0); // Continue looping until the user inputs "q"
++
++    // End of the indexing strings demonstration
++    printf("*** End of Indexing Strings Demo ***\n\n");
++
++    // Version 2 and Version 3 are left empty for future implementations
++}
+diff --git a/fundamentals.h b/fundamentals.h
+new file mode 100644
+index 0000000..f49fe48
+--- /dev/null
++++ b/fundamentals.h
+@@ -0,0 +1,13 @@
++// FUNDAMENTALS MODULE HEADER
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++// Include necessary standard library headers
++#include <stdio.h> // For input/output operations
++#include <string.h> // For string manipulation functions
++#include <stdlib.h> // For functions like `atoi()` used for string to integer conversion
++
++// Declare the fundamentals function prototype
++void fundamentals (void);
++
++#endif // End of header guard
+diff --git a/main.c b/main.c
+new file mode 100644
+index 0000000..43a0e6f
+--- /dev/null
++++ b/main.c
+@@ -0,0 +1,46 @@
++// Including header files for the different modules
++#include "fundamentals.h" // For the fundamentals module
++#include "manipulating.h" // For the manipulating module
++#include "converting.h"   // For the converting module
++#include "tokenizing.h"   // For the tokenizing module
++
++// Main function of the program
++int main(void) { 
++    char buff[10]; // Buffer to store user input
++    
++    // Loop to display menu and handle user input
++    do {
++        // Displaying menu options
++        printf("1 - Fundamentals\n");
++        printf("2 - Manipulation\n");
++        printf("3 - Converting\n");
++        printf("4 - Tokenizing\n");
++        printf("0 - Exit\n");
++        printf("Which module to run? \n");
++        
++        // Reading user input
++        fgets(buff, 10, stdin);
++        
++        // Switch case to handle user choice
++        switch (buff[0]) {
++            // If user chooses option 1
++            case '1': 
++                fundamentals(); // Call fundamentals function
++                break;
++            // If user chooses option 2
++            case '2': 
++                manipulating(); // Call manipulating function
++                break;
++            // If user chooses option 3
++            case '3': 
++                converting(); // Call converting function
++                break;
++            // If user chooses option 4
++            case '4': 
++                tokenizing(); // Call tokenizing function
++                break;
++        }
++    } while (buff[0] != '0'); // Loop until user chooses to exit
++    
++    return 0; // Return 0 to indicate successful execution
++}
+diff --git a/manipulating.c b/manipulating.c
+new file mode 100644
+index 0000000..e2bab7e
+--- /dev/null
++++ b/manipulating.c
+@@ -0,0 +1,55 @@
++/* Version 1 */
++
++// Including necessary standard library headers.
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// Function definition for the manipulating function.
++void manipulating(void) {
++    // Printing a message indicating the start of the demonstration for converting strings.
++    printf("*** Start of Converting Strings Demo ***\n");
++
++    // Declaring character arrays `string1` and `string2` to store user input strings.
++    char string1[BUFFER_SIZE];
++    char string2[BUFFER_SIZE];
++
++    // Start a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {
++        // Prompting the user to type the 1st string.
++        printf("Type the 1st string (q - to quit):\n"); 
++
++        // Reading the 1st string from the standard input and storing it in `string1`.
++        fgets(string1, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of `string1`.
++        string1[strlen(string1) - 1] = '\0';
++    
++        // Checking if `string1` is not equal to "q".
++        if ((strcmp(string1, "q") != 0)) {
++            // Prompting the user to type the 2nd string.
++            printf("Type the 2nd string:\n");
++            
++            // Reading the 2nd string from the standard input and storing it in `string2`.
++            fgets(string2, BUFFER_SIZE, stdin);
++            
++            // Removing the newline character from the end of `string2`.
++            string2[strlen(string2) - 1] = '\0';
++            
++            // Concatenating `string2` to `string1`.
++            strcat(string1, string2);
++            
++            // Printing the concatenated string.
++            printf("Concatenated string is '%s'\n", string1);
++        } 
++    } while (strcmp(string1, "q") != 0); // Loop continues until `string1` is "q".
++
++    // Printing a message indicating the end of the demonstration for concatenating strings.
++    printf("*** End of Concatenating Strings Demo ***\n\n");
++
++    /* Version 2 */
++
++    /* Version 3 */
++}
++
++
+diff --git a/manipulating.h b/manipulating.h
+new file mode 100644
+index 0000000..de24853
+--- /dev/null
++++ b/manipulating.h
+@@ -0,0 +1,14 @@
++// MANIPULATING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h>
++#include <string.h>
++
++// Function prototype for the manipulating function.
++void manipulating(void);
++
++#endif // End of header guard
+diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
+new file mode 100644
+index 0000000..3c5e9e2
+Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
+diff --git a/tokenizing-test.txt b/tokenizing-test.txt
+new file mode 100644
+index 0000000..c5a2949
+--- /dev/null
++++ b/tokenizing-test.txt
+@@ -0,0 +1 @@
++Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
+\ No newline at end of file
+diff --git a/tokenizing.c b/tokenizing.c
+new file mode 100644
+index 0000000..daa8647
+--- /dev/null
++++ b/tokenizing.c
+@@ -0,0 +1,61 @@
++// Defining the macro `_CRT_SECURE_NO_WARNINGS` to disable certain warnings related to standard library functions in Windows.
++#define _CRT_SECURE_NO_WARNINGS
++
++// Defining the size of the buffer to be used for storing words.
++#define BUFFER_SIZE 300
++
++// Including the header file `tokenizing.h`, which likely contains function prototypes needed for the `tokenizing` function.
++#include "tokenizing.h"
++
++// Defining the function `tokenizing`, which takes no arguments and returns nothing (`void`).
++void tokenizing(void) {
++    /* Version 1 */
++    // Printing a message indicating the start of the tokenizing words demonstration.
++    printf("*** Start of Tokenizing Words Demo ***\n");
++
++    // Declaring an array of characters named `words` with a size defined by the macro `BUFFER_SIZE`.
++    char words[BUFFER_SIZE];
++
++    // Declaring a pointer to a character named `nextWord`, initially set to NULL.
++    char* nextWord = NULL;
++
++    // Declaring an integer variable `wordsCounter` to keep track of the number of words.
++    int wordsCounter;
++
++    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
++    do {   
++        // Prompting the user to type a few words separated by space.
++        printf("Type a few words separated by space (q - to quit): \n");
++
++        // Reading the input string from the standard input and store it in `words`.
++        fgets(words, BUFFER_SIZE, stdin);
++
++        // Removing the newline character from the end of the input string.
++        words[strlen(words) - 1] = '\0';
++
++        // If the input string is not "q", tokenize the words using strtok function and print each word.
++        if (strcmp(words, "q") != 0) {
++            // Tokenizing the input string `words` using space as the delimiter.
++            nextWord = strtok(words, " ");
++
++            // Initializing `wordsCounter` to 1.
++            wordsCounter = 1;
++
++            // Looping through each token (word) obtained by strtok until NULL is returned.
++            while (nextWord) {
++                // Printing the current word along with its index.
++                printf("Word #%d is '%s'\n", wordsCounter++, nextWord);
++
++                // Getting the next token (word).
++                nextWord = strtok(NULL, " ");
++            }
++        }
++    } while (strcmp(words, "q") != 0); // Loop until the input string is "q".
++
++    // Printing a message indicating the end of the tokenizing words demonstration.
++    printf("*** End of Tokenizing Words Demo ***\n\n");
++
++    /* Version 2 */
++
++    /* Version 3 */
++}
+diff --git a/tokenizing.h b/tokenizing.h
+new file mode 100644
+index 0000000..c452778
+--- /dev/null
++++ b/tokenizing.h
+@@ -0,0 +1,14 @@
++// TOKENIZING MODULE HEADER
++
++// Header guards to prevent multiple inclusion of the header file.
++#ifndef _TOKENIZING_H_
++#define _TOKENIZING_H_
++
++// Include necessary standard library headers.
++#include <stdio.h> 
++#include <string.h> 
++
++// Function prototype for the tokenizing function.
++void tokenizing(void);
++
++#endif // End of header guard
diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
deleted file mode 100644
index 21e4d7c..0000000
Binary files a/tokenizing-test-cases.xlsx and /dev/null differ
diff --git a/~$(saksham)manipulating-test-cases.xlsx b/~$(saksham)manipulating-test-cases.xlsx
deleted file mode 100644
index 68f7efc..0000000
Binary files a/~$(saksham)manipulating-test-cases.xlsx and /dev/null differ

commit 3eb879866a61a73875208acf712a4631ba61ec7c
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Mon Apr 8 15:28:18 2024 -0400

    adding fundamentals for version 2

diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
index 8447936..df0c4ea 100644
Binary files a/fundamentals-test-cases.xlsx and b/fundamentals-test-cases.xlsx differ
diff --git a/fundamentals-test.txt b/fundamentals-test.txt
index d43c9c0..568a325 100644
--- a/fundamentals-test.txt
+++ b/fundamentals-test.txt
@@ -1,3 +1,4 @@
+*** Start of Indexing Strings Demo ***
 Type not empty string (q- to quit):
 hello guys
 Type the character position within the string: 
@@ -26,4 +27,26 @@ Type not empty string (q- to quit):
 12345LAB
 Type the character position within the string: 
 2
-The character found at 2 position is '3'
+The character found at 2 position is '3'
+
+
+*** Start of Measuring Strings Demo ***
+Type a string (q - to quit):
+hello
+The length of 'hello' is 5 characters
+Type a string (q - to quit):
+ihaveacat
+The length of 'ihaveacat' is 9 characters
+Type a string (q - to quit):
+ilovemango
+The length of 'ilovemango' is 10 characters
+Type a string (q - to quit):
+0909898987766
+The length of '0909898987766' is 13 characters
+Type a string (q - to quit):
+mycatsnameisKenzo
+The length of 'mycatsnameisKenzo' is 17 characters
+Type a string (q - to quit):
+q
+*** End of Measuring Strings Demo ***
+
diff --git a/fundamentals.c b/fundamentals.c
index 86d67c0..a1a8aa7 100644
--- a/fundamentals.c
+++ b/fundamentals.c
@@ -67,5 +67,34 @@ void fundamentals (void) {
     // End of the indexing strings demonstration
     printf("*** End of Indexing Strings Demo ***\n\n");
 
-    // Version 2 and Version 3 are left empty for future implementations
+    // Version 2 
+    // Printing the start message for the Measuring Strings Demo
+    printf("*** Start of Measuring Strings Demo ***\n");
+
+    // Initializing buffer for storing user input
+    char buffer[BUFFER_SIZE];
+
+    // Loop for continuously receiving user input strings until 'q' is entered
+    do {
+        // Prompting the user to type a string
+        printf("Type a string (q - to quit):\n");
+
+        // Getting input string from the user
+        fgets(buffer, BUFFER_SIZE, stdin);
+
+        // Removing the newline character from the input string
+        buffer[strlen(buffer) - 1] = '\0';
+
+        // Checking if the entered string is not 'q'
+        if (strcmp(buffer, "q") != 0) {
+            // Printing the length of the entered string
+            printf("The length of '%s' is %d characters\n", buffer, (int)strlen(buffer));
+        }
+    } while (strcmp(buffer, "q") != 0);  // Loop continuation condition
+
+    // Printing the end message for the Measuring Strings Demo
+    printf("*** End of Measuring Strings Demo ***\n");
+
+
+
 }

commit 3543cd66023846f76f43572d9f8384895851122f
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Mon Apr 8 14:43:14 2024 -0400

    manipulating(vicotr) eddited for version 2

diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
index c58c27f..4e2538e 100644
Binary files a/(Victor)manipulating-test-cases.xlsx and b/(Victor)manipulating-test-cases.xlsx differ
diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
index 7a8fda1..3e9e441 100644
--- a/(Victor)manipulating-test.txt
+++ b/(Victor)manipulating-test.txt
@@ -1,3 +1,4 @@
+*** Start of Converting Strings Demo ***
 Type the 1st string (q - to quit):
 mynameis
 Type the 2nd string:
@@ -26,3 +27,34 @@ Concatenated string is 'CP RCp r'
 Type the 1st string (q - to quit):
 q
 *** End of Concatenating Strings Demo ***
+
+
+*** Start of Comparing Strings Demo ***
+Type the 1st string to compare (q - to quit): 
+icanfly
+Type the 2nd string to compare: 
+icantfly
+'icanfly' string is less than 'icantfly'
+Type the 1st string to compare (q - to quit): 
+superman or spiderman
+Type the 2nd string to compare: 
+superman or spiderman
+'superman or spiderman' string is equal to 'superman or spiderman'
+Type the 1st string to compare (q - to quit): 
+cpr is fun
+Type the 2nd string to compare: 
+cpr is hard
+'cpr is fun' string is less than 'cpr is hard'
+Type the 1st string to compare (q - to quit): 
+i am learning c 
+Type the 2nd string to compare: 
+i am learnin  c
+'i am learning c ' string is greater than 'i am learnin  c'
+Type the 1st string to compare (q - to quit): 
+color
+Type the 2nd string to compare: 
+colour
+'color' string is less than 'colour'
+Type the 1st string to compare (q - to quit): 
+q
+*** End of Comparing strings Demo ***

commit eaf26a4848793b8227b8738b2d33c382775aaa50
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Mon Apr 8 13:53:21 2024 -0400

    manipulating(Saksham)

diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
index 0bbf16d..e395afb 100644
--- a/(Saksham)manipulting-test.txt
+++ b/(Saksham)manipulting-test.txt
@@ -1,3 +1,4 @@
+*** Start of Converting Strings Demo ***
 Type the 1st string (q - to quit):
 Hello
 Type the 2nd string:
@@ -25,4 +26,34 @@ Type the 1st string (q - to quit):
 No
 Type the 2nd string:
 guilt
-Concatenated string is 'Noguilt'
+Concatenated string is 'Noguilt'
+
+*** Start of Comparing Strings Demo ***
+Type the 1st string to compare (q - to quit): 
+iamnoone
+Type the 2nd string to compare: 
+iamnoone
+'iamnoone' string is equal to 'iamnoone'
+Type the 1st string to compare (q - to quit): 
+get ready 1
+Type the 2nd string to compare: 
+getready 1
+'get ready 1' string is less than 'getready 1'
+Type the 1st string to compare (q - to quit): 
+lemon juice is healthy
+Type the 2nd string to compare: 
+apple juice is healthy
+'lemon juice is healthy' string is greater than 'apple juice is healthy'
+Type the 1st string to compare (q - to quit): 
+i_am a programmer
+Type the 2nd string to compare: 
+i_am a programmer
+'i_am a programmer' string is equal to 'i_am a programmer'
+Type the 1st string to compare (q - to quit): 
+1234 
+Type the 2nd string to compare: 
+2345
+'1234' string is less than '2345'
+Type the 1st string to compare (q - to quit): 
+q
+*** End of Comparing strings Demo ***
diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
index f6356d1..072b43e 100644
Binary files a/(saksham)manipulating-test-cases.xlsx and b/(saksham)manipulating-test-cases.xlsx differ
diff --git a/manipulating.c b/manipulating.c
index e2bab7e..fc824ed 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -49,6 +49,55 @@ void manipulating(void) {
 
     /* Version 2 */
 
+    // Printing start message
+    printf("*** Start of Comparing Strings Demo ***\n");
+
+    // Declaring variables for storing input strings and result
+    char compare1[BUFFER_SIZE]; 
+    char compare2[BUFFER_SIZE];
+    int result;
+
+    // Starting loop for input and comparison
+    do {
+        // Prompting user for the 1st string to compare
+        printf("Type the 1st string to compare (q - to quit): \n"); 
+        
+        // Getting input for the 1st string
+        fgets(compare1, BUFFER_SIZE, stdin);
+        
+        // Replacing newline character with null terminator
+        compare1[strlen(compare1) - 1] = '\0';
+        
+        // Checking if the input is not 'q'
+        if (strcmp(compare1, "q") != 0) {
+            
+            // Prompting user for the 2nd string to compare
+            printf("Type the 2nd string to compare: \n"); 
+            
+            // Getting input for the 2nd string
+            fgets(compare2, BUFFER_SIZE, stdin);
+            
+            // Replacing newline character with null terminator
+            compare2[strlen(compare2) - 1] = '\0';
+            
+            // Comparing the strings and storing the result
+            result = strcmp(compare1, compare2);
+            
+            // Checking the result of comparison
+            if (result < 0) 
+                printf("'%s' string is less than '%s'\n", compare1, compare2);
+            else if (result == 0)
+                printf("'%s' string is equal to '%s'\n", compare1, compare2);
+            else
+                printf("'%s' string is greater than '%s'\n", compare1, compare2);
+        }
+    // Continuing loop until input is not 'q'
+    } while (strcmp(compare1, "q") != 0);
+
+    // Printing end message
+    printf("*** End of Comparing strings Demo ***\n\n");
+
+
     /* Version 3 */
 }
 
diff --git a/tokenizing.c b/tokenizing.c
index 6409077..01dc441 100644
--- a/tokenizing.c
+++ b/tokenizing.c
@@ -57,33 +57,52 @@ void tokenizing(void) {
 
     /* Version 2 */
 
+    // Initiating the Tokenizing Phrases Demo
     printf("*** Start of Tokenizing Phrases Demo ***\n");
 
+    // Declaring a character array to store phrases and initializing variables
     char phrases[BUFFER_SIZE];
     char *nextPhrase = NULL;
     int phrasesCounter;
 
-
+    // Starting a loop for inputting phrases
     do
     {
-        printf("Type a few phrases separated by comma (q - to quit): \n"); 
+        // Prompting the user to type phrases separated by commas
+        printf("Typing a few phrases separated by commas (q - to quit): \n");
+        
+        // Reading input from the user
         fgets(phrases, BUFFER_SIZE, stdin);
+        
+        // Removing the newline character from the input
         phrases[strlen(phrases) - 1] = '\0';
 
+        // Checking if the input is not equal to 'q' (to quit)
         if (strcmp(phrases, "q") != 0) {
+            
+            // Tokenizing the input string using strtok function
             nextPhrase = strtok(phrases, ",");
+            
+            // Initializing phrasesCounter variable to 1
             phrasesCounter = 1;
 
+            // Looping through each tokenized phrase
             while (nextPhrase) {
+                
+                // Printing the phrase number and the tokenized phrase
                 printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
+                
+                // Getting the next tokenized phrase
                 nextPhrase = strtok(NULL, ",");
             }
         }
     } while (strcmp(phrases, "q") != 0);
 
-
+    // Printing the end of the Tokenizing phrases Demo
     printf("*** End of Tokenizing phrases Demo ***\n\n");
 
 
+
+
     /* Version 3 */
 }

commit 3184b4025493b76a325542a7995ce146328f5ca3
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Sun Apr 7 21:50:51 2024 -0400

    Tokenizing version 2 added with updated test case excel file and text file

diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
index 3c5e9e2..21e4d7c 100644
Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
diff --git a/tokenizing-test.txt b/tokenizing-test.txt
index c5a2949..e935389 100644
--- a/tokenizing-test.txt
+++ b/tokenizing-test.txt
@@ -1 +1,27 @@
-Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
\ No newline at end of file
+*** Start of Tokenizing Words Demo ***
+Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'*** Start of Tokenizing Phrases Demo ***
+Type a few phrases separated by comma (q - to quit): 
+hi, there
+Phrase #1 is 'hi'
+Phrase #2 is ' there'
+Type a few phrases separated by comma (q - to quit): 
+like, and subscribe, to my, channel
+Phrase #1 is 'like'
+Phrase #2 is ' and subscribe'
+Phrase #3 is ' to my'
+Phrase #4 is ' channel'
+Type a few phrases separated by comma (q - to quit): 
+how, are, you, 
+Phrase #1 is 'how'
+Phrase #2 is ' are'
+Phrase #3 is ' you'
+Phrase #4 is ' '
+Type a few phrases separated by comma (q - to quit): 
+my name is yyz
+Phrase #1 is 'my name is yyz'
+Type a few phrases separated by comma (q - to quit): 
+012
+Phrase #1 is '012'
+Type a few phrases separated by comma (q - to quit): 
+q
+*** End of Tokenizing phrases Demo ***
\ No newline at end of file
diff --git a/tokenizing.c b/tokenizing.c
index daa8647..6409077 100644
--- a/tokenizing.c
+++ b/tokenizing.c
@@ -57,5 +57,33 @@ void tokenizing(void) {
 
     /* Version 2 */
 
+    printf("*** Start of Tokenizing Phrases Demo ***\n");
+
+    char phrases[BUFFER_SIZE];
+    char *nextPhrase = NULL;
+    int phrasesCounter;
+
+
+    do
+    {
+        printf("Type a few phrases separated by comma (q - to quit): \n"); 
+        fgets(phrases, BUFFER_SIZE, stdin);
+        phrases[strlen(phrases) - 1] = '\0';
+
+        if (strcmp(phrases, "q") != 0) {
+            nextPhrase = strtok(phrases, ",");
+            phrasesCounter = 1;
+
+            while (nextPhrase) {
+                printf("Phrase #%d is '%s'\n", phrasesCounter++, nextPhrase);
+                nextPhrase = strtok(NULL, ",");
+            }
+        }
+    } while (strcmp(phrases, "q") != 0);
+
+
+    printf("*** End of Tokenizing phrases Demo ***\n\n");
+
+
     /* Version 3 */
 }

commit e49b5f4e1ac07c3430183b620507c8860e016ddc
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Sun Apr 7 21:13:48 2024 -0400

    Added Version 2 code, test cases, testing log, and git log

diff --git a/Final-Project-Test-Cases.xlsx b/Final-Project-Test-Cases.xlsx
new file mode 100644
index 0000000..8c7d6ed
Binary files /dev/null and b/Final-Project-Test-Cases.xlsx differ
diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
index 22c04b3..cdb93cc 100644
Binary files a/converting-test-cases.xlsx and b/converting-test-cases.xlsx differ
diff --git a/converting-test.txt b/converting-test.txt
index c000d00..47e38ed 100644
--- a/converting-test.txt
+++ b/converting-test.txt
@@ -1,3 +1,4 @@
+*** Start of Converting Strings to int Demo ***
 Type an int numeric string (q - to quit):
 5
 Converted number is 5
@@ -18,4 +19,24 @@ Type an int numeric string (q - to quit):
 Converted number is 19
 Type an int numeric string (q - to quit):
 
+
+*** Start of Converting Strings to double Demo ***
+Type the double numeric string (q - to quit):
+5.32
+Converted number is 5.320000
+Type the double numeric string (q - to quit):
+600.99
+Converted number is 600.990000
+Type the double numeric string (q - to quit):
+12.222
+Converted number is 12.222000
+Type the double numeric string (q - to quit):
+lol
+Converted number is 0.000000
+Type the double numeric string (q - to quit):
+no way
+Converted number is 0.000000
+Type the double numeric string (q - to quit):
+99.9876
+Converted number is 99.987600
 
\ No newline at end of file
diff --git a/converting.c b/converting.c
index 8e417a1..210c4e2 100644
--- a/converting.c
+++ b/converting.c
@@ -43,15 +43,34 @@ void converting(void) {
 
     // Printing a message indicating the end of the demonstration for converting strings to integers.
     printf("*** End of Converting Strings to int Demo ***\n\n");
-}
+
 
 
 /* Version 2 */
+    printf("*** Start of Converting Strings to double Demo ***\n"); // Printing a start message
 
+    char doubleString[BUFFER_SIZE]; // Declaring a character array to store the input string
+    double doubleNumber; // Declaring a variable to store the converted double number
 
+    do { // Starting a do-while loop
+        printf("Type the double numeric string (q - to quit):\n"); // Prompting the user to input a double numeric string
+        fgets(doubleString, BUFFER_SIZE, stdin); // Reading the input string from the user
+        doubleString[strlen(doubleString) -1] = '\0'; // Removing the trailing newline character from the input string
+
+        if ((strcmp(doubleString, "q") != 0)) { // Checking if the input string is not equal to "q"
+            doubleNumber = atof(doubleString); // Converting the input string to a double number
+            printf("Converted number is %f\n", doubleNumber); // Printing the converted double number with two decimal places
+        }
+    } while (strcmp(doubleString, "q") != 0); // Continuing the loop until the input string is "q"
+
+    printf("*** End of Converting Strings to double Demo ***\n\n"); // Printing an end message
 
-/* Version 3 */
 
 
 
 
+/* Version 3 */
+
+
+}
+
diff --git a/my_program b/my_program
new file mode 100755
index 0000000..2768dbe
Binary files /dev/null and b/my_program differ
diff --git a/~$(saksham)manipulating-test-cases.xlsx b/~$(saksham)manipulating-test-cases.xlsx
new file mode 100644
index 0000000..68f7efc
Binary files /dev/null and b/~$(saksham)manipulating-test-cases.xlsx differ

commit 9023f3f6d405e49d6fcbfd416f200b3b5cf7678d
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Wed Apr 3 17:03:24 2024 -0400

    delete file
     Please enter the commit message for your changes. Lines starting

diff --git a/newfile.txt b/newfile.txt
deleted file mode 100644
index e69de29..0000000

commit 93294306b9f549715f946d2d3447c5ab4e7d0265
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Wed Apr 3 17:02:02 2024 -0400

    random file

diff --git a/newfile.txt b/newfile.txt
new file mode 100644
index 0000000..e69de29

commit 5d2165e5901182b801e35a3329c56fd3cdfc4314
Author: SM Tausif <smtausif@SMs-MacBook-Pro.local>
Date:   Wed Apr 3 16:46:18 2024 -0400

    First commit

diff --git a/(Saksham)manipulting-test.txt b/(Saksham)manipulting-test.txt
new file mode 100644
index 0000000..0bbf16d
--- /dev/null
+++ b/(Saksham)manipulting-test.txt
@@ -0,0 +1,28 @@
+Type the 1st string (q - to quit):
+Hello
+Type the 2nd string:
+ Saksham
+Concatenated string is 'Hello Saksham'
+Type the 1st string (q - to quit):
+Hi
+Type the 2nd string:
+There
+Concatenated string is 'HiThere'
+Type the 1st string (q - to quit):
+my
+Type the 2nd string:
+q
+Concatenated string is 'myq'
+Type the 1st string (q - to quit):
+q
+*** End of Concatenating Strings Demo ***
+Type the 1st string (q - to quit):
+BE A HERO NOT A COWARD
+Type the 2nd string:
+NOT A COWARD
+Concatenated string is 'BE A HERO NOT A COWARDNoguilt'
+Type the 1st string (q - to quit):
+No
+Type the 2nd string:
+guilt
+Concatenated string is 'Noguilt'
diff --git a/(Victor)manipulating-test-cases.xlsx b/(Victor)manipulating-test-cases.xlsx
new file mode 100644
index 0000000..c58c27f
Binary files /dev/null and b/(Victor)manipulating-test-cases.xlsx differ
diff --git a/(Victor)manipulating-test.txt b/(Victor)manipulating-test.txt
new file mode 100644
index 0000000..7a8fda1
--- /dev/null
+++ b/(Victor)manipulating-test.txt
@@ -0,0 +1,28 @@
+Type the 1st string (q - to quit):
+mynameis
+Type the 2nd string:
+Mordi
+Concatenated string is 'mynameisMordi'
+Type the 1st string (q - to quit):
+no
+Type the 2nd string:
+lmk
+Concatenated string is 'no lmk'
+Type the 1st string (q - to quit):
+CPR.   
+Type the 2nd string:
+PROJECT
+Concatenated string is 'CPR.   PROJECT'
+Type the 1st string (q - to quit):
+Iphone          
+Type the 2nd string:
+is my fav
+Concatenated string is 'Iphone is my fav'
+Type the 1st string (q - to quit):
+CP R
+Type the 2nd string:
+Cp r
+Concatenated string is 'CP RCp r'
+Type the 1st string (q - to quit):
+q
+*** End of Concatenating Strings Demo ***
diff --git a/(saksham)manipulating-test-cases.xlsx b/(saksham)manipulating-test-cases.xlsx
new file mode 100644
index 0000000..f6356d1
Binary files /dev/null and b/(saksham)manipulating-test-cases.xlsx differ
diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000..019d636
Binary files /dev/null and b/.DS_Store differ
diff --git a/Final-Project-Plan (1).xlsx b/Final-Project-Plan (1).xlsx
new file mode 100644
index 0000000..32132b1
Binary files /dev/null and b/Final-Project-Plan (1).xlsx differ
diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
new file mode 100644
index 0000000..22c04b3
Binary files /dev/null and b/converting-test-cases.xlsx differ
diff --git a/converting-test.txt b/converting-test.txt
new file mode 100644
index 0000000..c000d00
--- /dev/null
+++ b/converting-test.txt
@@ -0,0 +1,21 @@
+Type an int numeric string (q - to quit):
+5
+Converted number is 5
+Type an int numeric string (q - to quit):
+8910
+Converted number is 8910
+Type an int numeric string (q - to quit):
+apple
+Converted number is 0
+Type an int numeric string (q - to quit):
+I_LOVE_CPR
+Converted number is 0
+Type an int numeric string (q - to quit):
+200
+Converted number is 200
+Type an int numeric string (q - to quit):
+19 23
+Converted number is 19
+Type an int numeric string (q - to quit):
+
+
\ No newline at end of file
diff --git a/converting.c b/converting.c
new file mode 100644
index 0000000..8e417a1
--- /dev/null
+++ b/converting.c
@@ -0,0 +1,57 @@
+// Version 1
+
+// This line  `#define _CRT_SECURE_NO_WARNINGS` is to disable certain warnings related to standard library functions in Windows.
+#define _CRT_SECURE_NO_WARNINGS
+
+// Defining the size of the buffer to be used for storing the input string.
+#define BUFFER_SIZE 80
+
+// Including the header file `converting.h`, which likely contains function prototypes needed for the `converting` function.
+#include "converting.h"
+
+// Commenting indicating the relation of the `converting` function to the VI (Version 1) of the code.
+// VI
+
+// Defining the function `converting`, which takes no arguments and returns nothing (`void`).
+void converting(void) {
+    // Printing a message indicating the start of the demonstration for converting strings to integers.
+    printf("*** Start of Converting Strings to int Demo ***\n");
+
+    // Declaring an array of characters named `intString` with a size defined by the macro `BUFFER_SIZE`.
+    char intString[BUFFER_SIZE];
+
+    // Declaring an integer variable `intNumber` which will hold the converted integer value.
+    int intNumber;
+
+    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
+    do {
+        // Prompting the user to type an integer numeric string.
+        printf("Type an int numeric string (q - to quit):\n"); 
+
+        // Reading the input string from the standard input and store it in `intString`.
+        fgets(intString, BUFFER_SIZE, stdin);
+
+        // Removing the newline character from the end of the input string.
+        intString[strlen(intString) - 1] = '\0';
+
+        // Converting the string `intString` to an integer using the `atoi` function and store the result in `intNumber`.
+        if (strcmp(intString, "q") != 0) {
+            intNumber = atoi(intString);
+            printf("Converted number is %d\n", intNumber);
+        }
+    } while (strcmp(intString, "q") != 0);
+
+    // Printing a message indicating the end of the demonstration for converting strings to integers.
+    printf("*** End of Converting Strings to int Demo ***\n\n");
+}
+
+
+/* Version 2 */
+
+
+
+/* Version 3 */
+
+
+
+
diff --git a/converting.h b/converting.h
new file mode 100644
index 0000000..e229834
--- /dev/null
+++ b/converting.h
@@ -0,0 +1,15 @@
+// CONVERTING MODULE HEADER
+
+// Header guards to prevent multiple inclusion of the header file.
+#ifndef _CONVERTING_H_
+#define _CONVERTING_H_
+
+// Include necessary standard library headers.
+#include <stdio.h> 
+#include <string.h> 
+#include <stdlib.h>
+
+// Function prototype for the converting function.
+void converting(void);
+
+#endif // End of header guard
diff --git a/fundamentals-test-cases.xlsx b/fundamentals-test-cases.xlsx
new file mode 100644
index 0000000..8447936
Binary files /dev/null and b/fundamentals-test-cases.xlsx differ
diff --git a/fundamentals-test.txt b/fundamentals-test.txt
new file mode 100644
index 0000000..d43c9c0
--- /dev/null
+++ b/fundamentals-test.txt
@@ -0,0 +1,29 @@
+Type not empty string (q- to quit):
+hello guys
+Type the character position within the string: 
+2
+The character found at 2 position is 'l'
+Type not empty string (q- to quit):
+BeAlright       
+Type the character position within the string: 
+6
+The character found at 6 position is 'g'
+Type not empty string (q- to quit):
+lllllllll
+Type the character position within the string: 
+20
+Too big... Position reduced to max. available
+The character found at 8 position is 'l'
+Type not empty string (q- to quit):
+q
+*** End of Indexing Strings Demo ***
+Type not empty string (q- to quit):
+sjncsa/';';
+Type the character position within the string: 
+8
+The character found at 8 position is ';'
+Type not empty string (q- to quit):
+12345LAB
+Type the character position within the string: 
+2
+The character found at 2 position is '3'
diff --git a/fundamentals.c b/fundamentals.c
new file mode 100644
index 0000000..86d67c0
--- /dev/null
+++ b/fundamentals.c
@@ -0,0 +1,71 @@
+#include "fundamentals.h"
+
+// Disable certain warnings related to standard library functions in Windows
+#define _CRT_SECURE_NO_WARNINGS
+
+// Define buffer size for storing strings
+#define BUFFER_SIZE 80 
+
+// Define size for input buffer storing numeric inputs
+#define NUM_INPUT_SIZE 10
+
+// Include the header file again to access its functionality
+#include "fundamentals.h"
+
+// Define the function `fundamentals`
+void fundamentals (void) {
+    // Start of the indexing strings demonstration
+    printf("*** Start of Indexing Strings Demo ***\n");
+
+    // Declare a buffer to store the input string
+    char buffer1 [BUFFER_SIZE];
+
+    // Declare a buffer to store numeric input
+    char numInput [NUM_INPUT_SIZE];
+
+    // Declare a variable to store the position of the character
+    size_t position;
+
+    // Start a loop for user interaction
+    do
+    {
+        // Prompt the user to input a non-empty string
+        printf("Type not empty string (q- to quit):\n");
+        
+        // Read the input string from the user
+        fgets (buffer1, BUFFER_SIZE, stdin);
+
+        // Remove the newline character from the input string
+        buffer1 [strlen(buffer1) - 1] = '\0';
+
+        // If the input is not "q", proceed with character position input
+        if (strcmp (buffer1, "q") != 0) {
+            // Prompt the user to input the character position within the string
+            printf(("Type the character position within the string: \n"));
+            
+            // Read the numeric input for character position
+            fgets (numInput, NUM_INPUT_SIZE, stdin) ;
+            
+            // Remove the newline character from the numeric input
+            numInput [strlen (numInput)- 1] = '\0';
+            
+            // Convert the numeric input to an integer
+            position = atoi(numInput);
+            
+            // If the position is greater than or equal to the length of the string, adjust it
+            if (position >= strlen(buffer1))
+            {
+                position = strlen(buffer1) - 1;
+                printf("Too big... Position reduced to max. available\n");
+            }
+            
+            // Print the character found at the specified position within the string
+            printf ("The character found at %d position is \'%c'\n", (int)position, buffer1[position]);
+        }
+    } while (strcmp (buffer1, "q") != 0); // Continue looping until the user inputs "q"
+
+    // End of the indexing strings demonstration
+    printf("*** End of Indexing Strings Demo ***\n\n");
+
+    // Version 2 and Version 3 are left empty for future implementations
+}
diff --git a/fundamentals.h b/fundamentals.h
new file mode 100644
index 0000000..f49fe48
--- /dev/null
+++ b/fundamentals.h
@@ -0,0 +1,13 @@
+// FUNDAMENTALS MODULE HEADER
+#ifndef _FUNDAMENTALS_H_
+#define _FUNDAMENTALS_H_
+
+// Include necessary standard library headers
+#include <stdio.h> // For input/output operations
+#include <string.h> // For string manipulation functions
+#include <stdlib.h> // For functions like `atoi()` used for string to integer conversion
+
+// Declare the fundamentals function prototype
+void fundamentals (void);
+
+#endif // End of header guard
diff --git a/main.c b/main.c
new file mode 100644
index 0000000..43a0e6f
--- /dev/null
+++ b/main.c
@@ -0,0 +1,46 @@
+// Including header files for the different modules
+#include "fundamentals.h" // For the fundamentals module
+#include "manipulating.h" // For the manipulating module
+#include "converting.h"   // For the converting module
+#include "tokenizing.h"   // For the tokenizing module
+
+// Main function of the program
+int main(void) { 
+    char buff[10]; // Buffer to store user input
+    
+    // Loop to display menu and handle user input
+    do {
+        // Displaying menu options
+        printf("1 - Fundamentals\n");
+        printf("2 - Manipulation\n");
+        printf("3 - Converting\n");
+        printf("4 - Tokenizing\n");
+        printf("0 - Exit\n");
+        printf("Which module to run? \n");
+        
+        // Reading user input
+        fgets(buff, 10, stdin);
+        
+        // Switch case to handle user choice
+        switch (buff[0]) {
+            // If user chooses option 1
+            case '1': 
+                fundamentals(); // Call fundamentals function
+                break;
+            // If user chooses option 2
+            case '2': 
+                manipulating(); // Call manipulating function
+                break;
+            // If user chooses option 3
+            case '3': 
+                converting(); // Call converting function
+                break;
+            // If user chooses option 4
+            case '4': 
+                tokenizing(); // Call tokenizing function
+                break;
+        }
+    } while (buff[0] != '0'); // Loop until user chooses to exit
+    
+    return 0; // Return 0 to indicate successful execution
+}
diff --git a/manipulating.c b/manipulating.c
new file mode 100644
index 0000000..e2bab7e
--- /dev/null
+++ b/manipulating.c
@@ -0,0 +1,55 @@
+/* Version 1 */
+
+// Including necessary standard library headers.
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#include "manipulating.h"
+
+// Function definition for the manipulating function.
+void manipulating(void) {
+    // Printing a message indicating the start of the demonstration for converting strings.
+    printf("*** Start of Converting Strings Demo ***\n");
+
+    // Declaring character arrays `string1` and `string2` to store user input strings.
+    char string1[BUFFER_SIZE];
+    char string2[BUFFER_SIZE];
+
+    // Start a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
+    do {
+        // Prompting the user to type the 1st string.
+        printf("Type the 1st string (q - to quit):\n"); 
+
+        // Reading the 1st string from the standard input and storing it in `string1`.
+        fgets(string1, BUFFER_SIZE, stdin);
+
+        // Removing the newline character from the end of `string1`.
+        string1[strlen(string1) - 1] = '\0';
+    
+        // Checking if `string1` is not equal to "q".
+        if ((strcmp(string1, "q") != 0)) {
+            // Prompting the user to type the 2nd string.
+            printf("Type the 2nd string:\n");
+            
+            // Reading the 2nd string from the standard input and storing it in `string2`.
+            fgets(string2, BUFFER_SIZE, stdin);
+            
+            // Removing the newline character from the end of `string2`.
+            string2[strlen(string2) - 1] = '\0';
+            
+            // Concatenating `string2` to `string1`.
+            strcat(string1, string2);
+            
+            // Printing the concatenated string.
+            printf("Concatenated string is '%s'\n", string1);
+        } 
+    } while (strcmp(string1, "q") != 0); // Loop continues until `string1` is "q".
+
+    // Printing a message indicating the end of the demonstration for concatenating strings.
+    printf("*** End of Concatenating Strings Demo ***\n\n");
+
+    /* Version 2 */
+
+    /* Version 3 */
+}
+
+
diff --git a/manipulating.h b/manipulating.h
new file mode 100644
index 0000000..de24853
--- /dev/null
+++ b/manipulating.h
@@ -0,0 +1,14 @@
+// MANIPULATING MODULE HEADER
+
+// Header guards to prevent multiple inclusion of the header file.
+#ifndef _MANIPULATING_H_
+#define _MANIPULATING_H_
+
+// Include necessary standard library headers.
+#include <stdio.h>
+#include <string.h>
+
+// Function prototype for the manipulating function.
+void manipulating(void);
+
+#endif // End of header guard
diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
new file mode 100644
index 0000000..3c5e9e2
Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
diff --git a/tokenizing-test.txt b/tokenizing-test.txt
new file mode 100644
index 0000000..c5a2949
--- /dev/null
+++ b/tokenizing-test.txt
@@ -0,0 +1 @@
+Type a few words separated by space (q - to quit): H E L L OWord #1 is 'H'Word #2 is 'E'Word #3 is 'L'Word #4 is 'L'Word #5 is 'O'Type a few words separated by space (q - to quit): i love codingWord #1 is 'i'Word #2 is 'love'Word #3 is 'coding'Type a few words separated by space (q - to quit): This,is,a,sentence Word #1 is 'This,is,a,sentence'Type a few words separated by space (q - to quit): q*** End of Tokenizing Words Demo ***Type a few words separated by space (q - to quit): 123 456 789Word #1 is '123'Word #2 is '456'Word #3 is '789'Type a few words separated by space (q - to quit): word1\tword2\nword3Word #1 is 'word1\tword2\nword3'
\ No newline at end of file
diff --git a/tokenizing.c b/tokenizing.c
new file mode 100644
index 0000000..daa8647
--- /dev/null
+++ b/tokenizing.c
@@ -0,0 +1,61 @@
+// Defining the macro `_CRT_SECURE_NO_WARNINGS` to disable certain warnings related to standard library functions in Windows.
+#define _CRT_SECURE_NO_WARNINGS
+
+// Defining the size of the buffer to be used for storing words.
+#define BUFFER_SIZE 300
+
+// Including the header file `tokenizing.h`, which likely contains function prototypes needed for the `tokenizing` function.
+#include "tokenizing.h"
+
+// Defining the function `tokenizing`, which takes no arguments and returns nothing (`void`).
+void tokenizing(void) {
+    /* Version 1 */
+    // Printing a message indicating the start of the tokenizing words demonstration.
+    printf("*** Start of Tokenizing Words Demo ***\n");
+
+    // Declaring an array of characters named `words` with a size defined by the macro `BUFFER_SIZE`.
+    char words[BUFFER_SIZE];
+
+    // Declaring a pointer to a character named `nextWord`, initially set to NULL.
+    char* nextWord = NULL;
+
+    // Declaring an integer variable `wordsCounter` to keep track of the number of words.
+    int wordsCounter;
+
+    // Starts a do-while loop. The loop will execute at least once and then continue to execute as long as the condition in the `while` statement is true.
+    do {   
+        // Prompting the user to type a few words separated by space.
+        printf("Type a few words separated by space (q - to quit): \n");
+
+        // Reading the input string from the standard input and store it in `words`.
+        fgets(words, BUFFER_SIZE, stdin);
+
+        // Removing the newline character from the end of the input string.
+        words[strlen(words) - 1] = '\0';
+
+        // If the input string is not "q", tokenize the words using strtok function and print each word.
+        if (strcmp(words, "q") != 0) {
+            // Tokenizing the input string `words` using space as the delimiter.
+            nextWord = strtok(words, " ");
+
+            // Initializing `wordsCounter` to 1.
+            wordsCounter = 1;
+
+            // Looping through each token (word) obtained by strtok until NULL is returned.
+            while (nextWord) {
+                // Printing the current word along with its index.
+                printf("Word #%d is '%s'\n", wordsCounter++, nextWord);
+
+                // Getting the next token (word).
+                nextWord = strtok(NULL, " ");
+            }
+        }
+    } while (strcmp(words, "q") != 0); // Loop until the input string is "q".
+
+    // Printing a message indicating the end of the tokenizing words demonstration.
+    printf("*** End of Tokenizing Words Demo ***\n\n");
+
+    /* Version 2 */
+
+    /* Version 3 */
+}
diff --git a/tokenizing.h b/tokenizing.h
new file mode 100644
index 0000000..c452778
--- /dev/null
+++ b/tokenizing.h
@@ -0,0 +1,14 @@
+// TOKENIZING MODULE HEADER
+
+// Header guards to prevent multiple inclusion of the header file.
+#ifndef _TOKENIZING_H_
+#define _TOKENIZING_H_
+
+// Include necessary standard library headers.
+#include <stdio.h> 
+#include <string.h> 
+
+// Function prototype for the tokenizing function.
+void tokenizing(void);
+
+#endif // End of header guard
